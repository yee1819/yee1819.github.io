<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git笔记</title>
    <url>/posts/d9283bc6.html</url>
    <content><![CDATA[<h1 id="GIit"><a href="#GIit" class="headerlink" title="GIit"></a>GIit</h1><blockquote>
<p>Git  是什么?</p>
<p>Git 是一个分布式版本控制系统</p>
<p>Git 是一个对项目文件管理的工具，有着版本控制等功能</p>
</blockquote>
<h2 id="git本地仓库的工作原理"><a href="#git本地仓库的工作原理" class="headerlink" title="git本地仓库的工作原理"></a>git本地仓库的工作原理</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  sequenceDiagram
	participant 远程仓库
 	本地仓库-&gt;&gt;本地仓库:  init
	本地仓库-&gt;&gt;远程仓库: git config --global(验证账号密码)
	本地仓库-&gt;&gt;远程仓库: git remote add origin（连接远程的地址）
	远程仓库--&gt;&gt;本地仓库:  clone（克隆）
	远程仓库-&gt;&gt;本地仓库: pull or fetch
	本地仓库-&gt;&gt;本地仓库: merge
	暂存区-&gt;&gt;本地仓库:  commit
    工作区-&gt;&gt;暂存区: add
	Note right of 工作区 : 新建文件---未跟踪(untracked)
	Note right of 工作区 : 修改文件---未暂存(unstaged)
	暂存区-&gt;&gt;工作区: git restore  file 回退
	暂存区-&gt;&gt;暂存区: git restore --staged file 清退暂存区
	本地仓库-&gt;&gt;本地仓库: git reset 重置
	本地仓库--&gt;&gt;远程仓库: branch（选择分支push）
	本地仓库--&gt;&gt;远程仓库: push
	远程仓库--&gt;&gt;远程仓库: merge(合并)
  </pre></div>
<blockquote>
<p>git 文件管理 会 忽略 .gitignore 文件中的文件路径</p>
</blockquote>
<h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><h3 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1. 初始化本地仓库"></a>1. 初始化本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>创建.git文件夹，存放修改前后的版本信息，方便回滚以及记录</p>
<blockquote>
<p>.git 是隐藏文件夹，需要设置显示隐藏文件夹才可以显示</p>
</blockquote>
<h3 id="2-提交文件到缓冲区"><a href="#2-提交文件到缓冲区" class="headerlink" title="2. 提交文件到缓冲区"></a>2. 提交文件到缓冲区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//全部提交</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">// 单个文件</span><br><span class="line">git add first_file.txt</span><br></pre></td></tr></table></figure>
<h3 id="3-查看仓库状态"><a href="#3-查看仓库状态" class="headerlink" title="3. 查看仓库状态"></a>3. 查看仓库状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<h3 id="4-提交暂存区文件进仓库"><a href="#4-提交暂存区文件进仓库" class="headerlink" title="4.提交暂存区文件进仓库"></a>4.提交暂存区文件进仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;本次提交修改的注释,可以任意文本&quot;</span></span><br></pre></td></tr></table></figure>
<p>提交工作区的文件进仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;你的提交信息&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不需要进入暂存区就提交工作区的文件，其中-a是-all  全部的意思</p>
<blockquote>
<p>注意，这个方法不提交新的文件，只针对git 已追踪的文件，即已存在的文件，新文件提交仍然需要gitadd再git commit</p>
</blockquote>
<h3 id="5-查看提交日志-可查看提交人、分支、文件、时间"><a href="#5-查看提交日志-可查看提交人、分支、文件、时间" class="headerlink" title="5.查看提交日志(可查看提交人、分支、文件、时间)"></a>5.查看提交日志(可查看提交人、分支、文件、时间)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>指令有其他参数<code>git log [option]</code>，其中option的值有</p>
<ul>
<li><p>分支名,可单独查看分支的 修改</p>
</li>
<li><p><code>--all</code></p>
</li>
</ul>
<p>显示所有分支</p>
<ul>
<li><code>--all d</code></li>
</ul>
<p>提交信息为一行</p>
<ul>
<li><code>--abbrev-commit</code></li>
</ul>
<p>让输出的commitId简短</p>
<ul>
<li><code>--graph</code></li>
</ul>
<p>以图片形式显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --all --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<p>其余更多请参考<a href="https://zhuanlan.zhihu.com/p/629756328">git log命令参数详解 - 知乎 (zhihu.com)</a></p>
<hr>
<p><strong>所有日志，包括回退的日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-版本回退"><a href="#6-版本回退" class="headerlink" title="6.版本回退"></a>6.版本回退</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset  --hard commitID</span><br></pre></td></tr></table></figure>
<p><code>commitID</code> 通过  <code>git log</code> 查看</p>
<blockquote>
<p><code>--soft</code> 、<code>--mixed</code>以及<code>--hard</code>是三个恢复等级。</p>
<ul>
<li>使用<code>--soft</code>就仅仅将头指针恢复，已经add的暂存区以及工作空间的所有东西都不变。</li>
<li>如果使用<code>--mixed</code>，就将头恢复掉，已经add的暂存区也会丢失掉，工作空间的代码什么的是不变的。</li>
<li>如果使用<code>--hard</code>，那么一切就全都恢复了，头变，aad的暂存区消失，代码什么的也恢复到以前状态。</li>
</ul>
</blockquote>
<p>注意！！！</p>
<blockquote>
<p>使用<code>git reset</code>只会把git已追踪的文件回退，不会把新建立的文件删除</p>
<p>如果要清理新建立的文件有俩种方式</p>
<ol>
<li><code>git add</code>加入追踪后回退</li>
<li><code>git clean</code>清理未追踪的文件</li>
</ol>
</blockquote>
<hr>
<h3 id="7-查看分支"><a href="#7-查看分支" class="headerlink" title="7. 查看分支"></a>7. 查看分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8-创建分支"><a href="#8-创建分支" class="headerlink" title="8. 创建分支"></a>8. 创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="9-切换分支"><a href="#9-切换分支" class="headerlink" title="9. 切换分支"></a>9. 切换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br><span class="line">//or</span><br><span class="line">git switch 分支名</span><br></pre></td></tr></table></figure>
<p><code>HEAD</code>指向当前分支</p>
<p>切换到一个不存在的分支，即创建新分支并复制当前分支内容并切换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名 </span><br><span class="line">//or</span><br><span class="line">git switch -c  分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="10-删除分支"><a href="#10-删除分支" class="headerlink" title="10. 删除分支"></a>10. 删除分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名</span><br><span class="line">//↑ 需要做各种检查</span><br><span class="line"></span><br><span class="line">//不做检查强制删除</span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="11-合并分支"><a href="#11-合并分支" class="headerlink" title="11.合并分支"></a>11.合并分支</h3><p>首先使用<code>git switch</code>或者<code>git checkout</code>选择需要保留的分支上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure>
<p>合并后<code>esc</code>+<code>:</code>+<code>wq</code>退出合并文本编辑</p>
<h5 id="处理分支"><a href="#处理分支" class="headerlink" title="处理分支"></a>处理分支</h5><p>当是使用<code>merge</code>合并分支的时候,如果有相同的文件修改了不一样的变动，即<code>冲突</code>,此时git会自动合并,git并不会处理冲突，只在命令行告诉你什么地方会有冲突:</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515085927238.webp" alt="image-20240515085927238"></p>
<p>在test.txt 文件内是这样的</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515090143129.webp" alt="image-20240515090143129"></p>
<p>其中<code>`HEAD</code>到<code>=====</code>分割线是你所合并的主分支内容，等号分割线下到<code>hello</code>是被我合并的分支（hello 是我合并的分支名）</p>
<p>之后手动修改需要解决的冲突内容，可以选择都保留，也可以选择留下一部分，<code>git add</code>+<code>git commit</code>上传本地仓库，以下是项目流程结构图</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515094404470.webp" alt="image-20240515094404470"></p>
<h5 id="禁用Fast-forward"><a href="#禁用Fast-forward" class="headerlink" title="禁用Fast forward"></a>禁用Fast forward</h5><p>默认的快速合并的结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522143722591.webp" alt="image-20240522143722591"></p>
<p>其中新建用户是dev的commit ，快速合并中HEAD直接指向dev，导致dev的提交信息被遗失了</p>
<p>以下是 禁用快速合并的结果</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522144153222.webp" alt="image-20240522144153222"></p>
<p>如图所示，合并后的commit信息还在</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge --no-ff feature-branch</span><br></pre></td></tr></table></figure>
<h5 id="squash"><a href="#squash" class="headerlink" title="squash"></a>squash</h5><p>如果分支commit太多太乱，可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge --squash feature-branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这项指令会让所有的提交合并为一个提交进行合并，并且不保留合并信息</p>
<hr>
<h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase </span><br></pre></td></tr></table></figure>
<p>交换commit的顺序，重写commit的顺序，让提交历史更加简洁易懂</p>
<p>具体待续…</p>
<hr>
<h3 id="12-远程仓库"><a href="#12-远程仓库" class="headerlink" title="12. 远程仓库"></a>12. 远程仓库</h3><h4 id="先要关联远程仓库"><a href="#先要关联远程仓库" class="headerlink" title="先要关联远程仓库"></a>先要关联远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库地址</span><br></pre></td></tr></table></figure>
<ul>
<li><code>origin</code>的作用是给远程仓库地址起一个别名为<code>origin</code>，这是一个默认名字,可以替换，相当于c语言的<code>typedef</code>以及<code>#define</code>,origin作为远程仓库的地址添加到本地仓库，在之后的拉取代码，推送代码的过程中就不需要每次都打一大串的远程仓库地址</li>
</ul>
<h4 id="查看绑定的远程仓库地址"><a href="#查看绑定的远程仓库地址" class="headerlink" title="查看绑定的远程仓库地址"></a>查看绑定的远程仓库地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="有多少个远程仓库"><a href="#有多少个远程仓库" class="headerlink" title="有多少个远程仓库"></a>有多少个远程仓库</h4><blockquote>
<p>建议使用上面的指令查看，包含关系关系如下图</p>
</blockquote>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240518203302693.webp" alt="image-20240518203302693"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote </span><br></pre></td></tr></table></figure>
<h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>最常用的指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<ul>
<li>命令为推送文件夹的所有不被忽略的文件到origin所指的仓库地址的main分支上</li>
<li><code>-u</code>是<code>--set-upstream</code>的缩写</li>
</ul>
<p>用于关联远程仓库与本地仓库的指定分支，关联后不需要指定分支名就可以使用<code>git push</code>以及<code>git pull</code>指令</p>
<p>查看本地分支以及远程仓库分支的跟踪状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240518204251921.webp" alt="image-20240518204251921"></p>
<p>修改关联分支仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -u origin/new-branch old-branch-name</span><br></pre></td></tr></table></figure>
<p>完全指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-f] [--set-upstream][远端名称[本地分支名][:远端分支名]]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-f</code> ，即<code>--force</code>如果指令加入，则是不理会推送冲突（即他人的提交或者在远程仓库的修改），强制覆盖</li>
<li><code>--set-upstream</code>也就是<code>-u</code>上面有详细解释</li>
<li>远端名称，即远程仓库地址，可用别名替代，也就是默认设置的<code>origin</code></li>
<li>如果远程仓库和本地仓库一致，则省略<code>[:远程分支]</code></li>
<li>推送到不同的名称的的分支示例<code>git push -u origin main:yuan_branch</code> ，本地的main分支推送到了远程的yuan_branch分支</li>
</ul>
<hr>
<h4 id="克隆-远程仓库"><a href="#克隆-远程仓库" class="headerlink" title="克隆 远程仓库"></a>克隆 远程仓库</h4><blockquote>
<p>clone，和词意相当，也就是把远程仓库的全部文件下载到本地</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址 [本地文件夹名称]</span><br><span class="line">//例如</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git  repo</span><br></pre></td></tr></table></figure>
<ul>
<li>本地文件夹名称可省略，会在当前自动创建一个远程仓库名的文件夹。并把所有的文件下载到这个文件夹里面</li>
</ul>
<p>设置了文件夹名则是在目录下创建文件夹名的文件夹，并把所有的文件下载到这个文件夹里面。</p>
<hr>
<h4 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h4><p>除了push时连接远程仓库外还可以通过以下方法</p>
<p><code>git checkout --track origin/dev</code></p>
<p>作用：</p>
<ol>
<li>创建一个名为 <code>dev</code> 的本地分支（假设远程分支是 <code>origin/dev</code>）。</li>
<li>切换到这个新创建的本地分支。</li>
<li>配置这个本地分支以跟踪远程分支 <code>origin/dev</code></li>
</ol>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev  <span class="comment"># 创建并切换到本地分支 dev，从 origin/dev 的当前提交开始</span></span><br><span class="line">git branch --set-upstream-to=origin/dev  <span class="comment"># 配置本地分支 dev 以跟踪 origin/dev</span></span><br></pre></td></tr></table></figure>
<p>将这两个步骤合并为一步</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b dev --track origin/dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="13-抓取和拉取远程仓库"><a href="#13-抓取和拉取远程仓库" class="headerlink" title="13.抓取和拉取远程仓库"></a>13.抓取和拉取远程仓库</h3><p>抓取：<code>fetch</code>,获取远程仓库的最新修改，创造一个origin/分支名的新分支，不会自动合并需要你手动合并</p>
<p>以下是使用方法：</p>
<ul>
<li>获取所有分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>
<ul>
<li>获取远程仓库的某个分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch  origin main</span><br></pre></td></tr></table></figure>
<p> 抓取最新变化以后，需要你手动去合并分支，更新你的本地仓库的代码</p>
<p>拉取：<code>full</code>，获取远程仓库的修改，并且合并这个修改的代码到你的本地仓库，此时可能产生冲突，这时候就需要</p>
<p>也就是说，<code>full</code>其实是<code>fetch</code>+<code>merge</code></p>
<hr>
<h3 id="14-标签-tag"><a href="#14-标签-tag" class="headerlink" title="14. 标签 tag"></a>14. 标签 tag</h3><p>标签是git版本自定义文本的功能，让人更好的区分不同版本，而不是一串无规律的数字字母编号</p>
<p>可以理解为 给不同的 commit版本 起别名，或是一个 死指针  固定的指向那个  commit</p>
<p><code>git tag</code>查看所有标签</p>
<p><code>git tag &lt;tagname&gt;</code>创建一个标签，默认以当前分支的最新commit为基本</p>
<p><code>git tag &lt;tagname&gt; &lt;commitID&gt;</code>给指定commitId进行打标签</p>
<p><code>git show &lt;tagname&gt;</code>展示标签详细信息</p>
<p><code>git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</code>给标签设置详细信息</p>
<p><code>git push origin &lt;tagname&gt;</code>上传标签到远程仓库</p>
<p><code>git push origin master --tags</code>上传全部标签到远程仓库</p>
<p><code>git tag -d &lt;tagname&gt;</code>删除标签</p>
<p><code>git push origin --delete &lt;tagname&gt;</code>远程仓库的标签删除</p>
<p><code>git push origin :refs/tags/&lt;tagname&gt;</code>同上</p>
<blockquote>
<p><a href="https://git-scm.com/book/zh/v2/Git-基础-打标签">Git - 打标签 (git-scm.com)</a></p>
</blockquote>
<hr>
<h3 id="15-贮藏-stash"><a href="#15-贮藏-stash" class="headerlink" title="15. 贮藏 stash"></a>15. 贮藏 stash</h3><p>当我在一个分支中，已经完成了一部分的开发，但是还不能提交，这时候我需要切换到另一个分支（例如有紧急bug），这个时候切换分支未提交的文件就会一起带到另一个分支上，</p>
<p>这个时候我们就需要冷藏这个分支上未提交的工作区。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch hello</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\345\210\206\346\224\257.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (hello)</span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (hello)</span><br><span class="line">$ git status</span><br><span class="line">On branch hello</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个时候工作区就干净了，可以任意切换分支了</p>
<p><code>git stash</code>贮藏</p>
<p><code>git stash list</code>查看所有的贮藏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以通过下述命令来标记此次储藏，以便后期查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash save [stashMessage]</span><br></pre></td></tr></table></figure>
<p>解封/恢复</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash apply</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\346\226\260\345\273\272\347\224\250\346\210\267.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;2&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过<code>git stash apply</code>可以解封，但是还存在在stash list中，通过<code>git stash drop</code>删除，可以看出，stash是一个栈结构</p>
<figure class="highlight plaintext"><figcaption><span>git stash drop</span></figcaption><table><tr><td class="code"><pre><span class="line">git stash drop</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (f4c2dafa4382f0d70657cf4c713bf39e336ef0e0)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch &#x27;dev2&#x27;</span><br></pre></td></tr></table></figure>
<p><code>git stash pop</code>通过这个可以一键删除并恢复</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: fc958c7 新建用户</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;2&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\346\226\260\345\273\272\347\224\250\346\210\267.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (72215c233f434ebd7e98eac7421ccf26d8b626b1)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假如我有多个贮藏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我可以选择一个<code>git stash apply stash@&#123;0&#125;</code>指定的编号去恢复</p>
<hr>
<h3 id="16-工作区回退-暂存区回退-checkout-reset-restore"><a href="#16-工作区回退-暂存区回退-checkout-reset-restore" class="headerlink" title="16. 工作区回退/暂存区回退  checkout / reset/restore"></a>16. 工作区回退/暂存区回退  checkout / reset/restore</h3><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>工作区的文件在修改后可以执行两种操作：</p>
<ul>
<li><p><code>git add</code></p>
<p>确认工作无误后，把文件上传到暂存区，再commit一个新版本</p>
</li>
<li><p><code>git checkout -- 文件名</code></p>
<p>发现工作有错误，回退到修改之前</p>
</li>
<li><p><code>git restore</code></p>
<p>git 2.23 版本后出现的回退指令</p>
</li>
</ul>
<p>首先，使用<code>git status</code>查看仓库状态，这是一个干净无修改的工作区</p>
<p>我们修改一个test.txt，添加一行字符串</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">//添加一行字符串后</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>git restore是git 2.23出现的新指令，用于清晰语义，因为checkout是切换分支有歧义…</p>
</blockquote>
<p>先使用<code>git checkout -- 文件名</code>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样做就回退test.txt文件到了commit<code>--&gt;HEAD</code>的状态</p>
<hr>
<h4 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h4><p>现在使用<code>git restore</code>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git restore test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一样可以完成结果，回复到暂存区的状态</p>
<p>如果想回退到<code>HEAD--&gt;</code>，那么指令是<code>git restore --source=HEAD example.txt</code></p>
<hr>
<p>在查资料的时候看见<code>git restore --staged &lt;file&gt;</code></p>
<p>这个是<strong>清空暂存区中的文件</strong>（仅从暂存区移除，不影响工作区）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">//再修改工作区的<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git restore --staged test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<p>我们可以看到暂存区的文件被退回了，但是工作区已经修改的文件仍然还在</p>
<hr>
<h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><p>如果是想仅仅是把暂存区的文件放回工作区可以使用：<code>git reset HEAD &lt;file&gt;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        modified:   <span class="string">&quot;\350\277\231\346\230\257hello2.txt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git reset HEAD hello.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       hello.txt</span><br><span class="line">M       test.txt</span><br><span class="line">M       这是hello2.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        modified:   <span class="string">&quot;\350\277\231\346\230\257hello2.txt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以下是gpt的介绍</p>
<p><code>git reset</code> 是一个非常强大的 Git 命令，用于撤销更改和移动 HEAD 指针。它可以用于重置暂存区的文件、更改当前分支的提交历史，甚至更新工作目录。以下是详细的用法和示例：</p>
<p>基本用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset [&lt;mode&gt;] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>
<p>模式：</p>
<ol>
<li><strong>—soft</strong>：仅移动 HEAD 指针，不改变暂存区和工作区的内容。</li>
<li><strong>—mixed</strong>（默认模式）：移动 HEAD 指针，并重置暂存区为指定的 commit，但不改变工作区的内容。</li>
<li><strong>—hard</strong>：移动 HEAD 指针，重置暂存区，并更新工作区，使其与指定的 commit 一致。</li>
</ol>
<p>用法和示例：</p>
<ol>
<li><code>--soft</code> 模式</li>
</ol>
<p>仅重置 HEAD 指针，不改变暂存区和工作区。这种模式适合想保留更改但移动提交历史的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，但保留暂存区和工作区的更改</span><br><span class="line">git reset --soft &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，保留当前的所有更改为已暂存状态。</p>
<ol>
<li><code>--mixed</code> 模式（默认）</li>
</ol>
<p>重置 HEAD 指针和暂存区，但保留工作区的更改。这是默认模式，适合想保留更改但从暂存区移除的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，并重置暂存区，但保留工作区的更改</span><br><span class="line">git reset --mixed &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，并将当前的更改从暂存区移除，但保留在工作区。</p>
<ol>
<li><code>--hard</code> 模式</li>
</ol>
<p>重置 HEAD 指针、暂存区和工作区，使其全部与指定的 commit 一致。这会丢失所有未提交的更改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，并重置暂存区和工作区，使它们与该提交一致</span><br><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，并丢弃所有未提交的更改。</p>
<hr>
<p>其他示例</p>
<ol>
<li>重置单个文件</li>
</ol>
<p>如果只想重置暂存区中的某个文件，可以使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会把指定文件从暂存区移除，但保留在工作区。</p>
<ol>
<li>移动到特定提交</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --hard &lt;commit_hash&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD、暂存区和工作区都重置到指定的提交。</p>
<ol>
<li>撤销最近的提交但保留更改</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会撤销最近的提交，但保留所有更改为已暂存状态。</p>
<blockquote>
<p><code>git reset</code> 是一个功能强大且多用途的命令，可以用来修改提交历史、重置暂存区和工作区。根据不同的模式，可以选择适合当前需求的操作方式：</p>
<ul>
<li><strong>—soft</strong> 保留所有更改，但移动 HEAD 指针。</li>
<li><strong>—mixed</strong> 重置暂存区，但保留工作区更改。</li>
<li><strong>—hard</strong> 丢弃所有未提交的更改，并重置到指定的提交。</li>
</ul>
</blockquote>
<p>ps.reset偷个懒用的gpt的介绍</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>回退分为三种</p>
<ol>
<li>回退工作区</li>
</ol>
<ul>
<li><code>git checkout &lt;file&gt;</code></li>
<li><code>git restore &lt;file&gt;</code></li>
</ul>
<ol>
<li>文件从暂存区到工作区，不影响工作区</li>
</ol>
<ul>
<li><code>git reset HEAD &lt;file&gt;</code></li>
<li><code>git restore --staged &lt;file&gt;</code></li>
</ul>
<ol>
<li>commit、暂存区、工作区都变为commit一个版本</li>
</ol>
<ul>
<li><code>`git reset --hard commit_id</code></li>
</ul>
<h3 id="17-删除文件"><a href="#17-删除文件" class="headerlink" title="17. 删除文件"></a>17. 删除文件</h3><p><code>git rm &lt;file&gt;</code></p>
<p>暂存区和工作区都删除文件，只需要commit，相当于手动删除+git add</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git <span class="built_in">rm</span> hello.txt</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;hello.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        deleted:    hello.txt</span><br><span class="line">        </span><br><span class="line">$ git commit -m <span class="string">&quot;删除hello&quot;</span></span><br><span class="line">[main f979439] 删除hello</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="18-版本差异"><a href="#18-版本差异" class="headerlink" title="18.版本差异"></a>18.版本差异</h3><p><code>git diff</code> 是一个用于显示未提交更改的 Git 命令。它可以显示工作区和暂存区之间的差异、暂存区和最近一次提交之间的差异，以及其他特定的比较。以下是 <code>git diff</code> 的详细用法和一些常见示例：</p>
<p> 基本用法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>显示工作区中未暂存的更改。</p>
<p> 常见示例</p>
<ol>
<li>查看工作区和暂存区之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>这个命令会显示工作区中未暂存的更改。</p>
<ol>
<li>查看暂存区和最近一次提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
<p>这个命令（或者 <code>git diff --staged</code>）会显示已暂存但还未提交的更改。</p>
<ol>
<li>查看工作区和最近一次提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<p>这个命令会显示工作区中所有未提交的更改，无论它们是否已经暂存。</p>
<ol>
<li>查看两个分支之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff branch1 branch2</span><br></pre></td></tr></table></figure>
<p>这个命令会显示 <code>branch1</code> 和 <code>branch2</code> 之间的差异。</p>
<ol>
<li>查看两个提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff commit1 commit2</span><br></pre></td></tr></table></figure>
<p>这个命令会显示 <code>commit1</code> 和 <code>commit2</code> 之间的差异。</p>
<ol>
<li>查看特定文件的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会显示当前工作区中的特定文件和最近一次提交之间的差异。</p>
<ol>
<li>查看特定目录的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD &lt;directory&gt;/</span><br></pre></td></tr></table></figure>
<p>这个命令会显示当前工作区中的特定目录和最近一次提交之间的差异。</p>
<p>其他有用的选项</p>
<ul>
<li><p><strong>显示简洁的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>
<p>这个命令会以简洁的统计方式显示更改。</p>
</li>
<li><p><strong>忽略空白字符的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --ignore-all-space</span><br></pre></td></tr></table></figure>
<p>这个命令会忽略空白字符的更改。</p>
</li>
<li><p><strong>显示统一格式的差异（默认格式）</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --unified</span><br></pre></td></tr></table></figure>
<p>这个命令会以统一格式显示更改，默认情况下 <code>git diff</code> 就是使用这种格式。</p>
</li>
<li><p><strong>仅显示名称的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --name-only</span><br></pre></td></tr></table></figure>
<p>这个命令会仅显示文件名称，而不显示具体的更改内容。</p>
</li>
</ul>
<p>例子</p>
<p>假设你有一个项目目录，修改了 <code>file1.txt</code> 和 <code>file2.txt</code> 文件，现在想查看这些修改：</p>
<ol>
<li><p>查看未暂存的更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>暂存更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add file1.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看已暂存的更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;修改了 file1.txt 和 file2.txt&quot;</span></span><br></pre></td></tr></table></figure>
<p>总结</p>
</li>
</ol>
<p><code>git diff</code> 是一个非常强大的工具，用于比较文件的不同版本。它可以帮助你在提交更改之前了解具体的修改内容，并且可以在多个不同的上下文中使用，从而提供灵活的比较方式。</p>
<h3 id="19-复制其他分支的提交到当前分支-cherry-pick"><a href="#19-复制其他分支的提交到当前分支-cherry-pick" class="headerlink" title="19. 复制其他分支的提交到当前分支  cherry-pick"></a>19. 复制其他分支的提交到当前分支  cherry-pick</h3><p><code>git cherry-pick &lt;commit&gt;</code></p>
<p>应用场景：我在bug修改提交或者main提交后，我想在我当前dev分支获取main提交的时候，就可以使用这个，不需要合并。</p>
<h3 id="20-忽略文件"><a href="#20-忽略文件" class="headerlink" title="20. 忽略文件"></a>20. 忽略文件</h3><p>在git仓库根目录中，命名一个<code>.gitignore</code></p>
<p>在这个目录中的目录或者文件名都不会出现在git的提交中，隐私信息或者配置信息就不会发出去</p>
<p>也就是说git不再追踪.gitignore写入的文件</p>
<p>如果你忽略了，但是你确实想提交<code>git add -f App.class</code></p>
<p>如果你发现你的目录写错了，但是找不到问题，<code>git check-ignore -v App.class</code>会提醒你哪里出了问题</p>
<p>如果想添加不被排除的文件</p>
<p>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.class</span><br><span class="line">但是我想要文件 App.class</span><br><span class="line">!App.class</span><br></pre></td></tr></table></figure>
<p>就可以实现不排除App.class了</p>
<hr>
<h3 id="21-清理未追踪的文件"><a href="#21-清理未追踪的文件" class="headerlink" title="21. 清理未追踪的文件"></a>21. 清理未追踪的文件</h3><p>未追踪的文件指：</p>
<ul>
<li>未通过add 添加到暂存区的文件</li>
<li>.gitignore 文件写入的目录文件</li>
</ul>
<p>通过<code>git clean</code>可以清除未追踪的文件</p>
<p><code>git clean -n</code>显示哪些文件将被删除，并不是删除，而是删除前查看将删除的文件同<code>git clean --dry-run</code></p>
<p><code>git clean -f</code>强制删除。<code>git clean --force</code></p>
<p><code>git clean -f -d</code>删除未追踪的目录，<code>git clean</code>一般只删除文件，不删除目录，需要删除目录则使用这个</p>
<p><code>git clean -f -X</code>仅删除忽略掉的文件。即<code>.gitignore</code>指定的文件</p>
<p><code>git clean -f -x</code>删除所有未追踪的文件和忽略的文件。这个选项会删除所有未追踪的文件，包括那些在 <code>.gitignore</code> 文件中指定的文件。</p>
<h3 id="22-撤销提交的revert"><a href="#22-撤销提交的revert" class="headerlink" title="22 .撤销提交的revert"></a>22 .撤销提交的revert</h3><p>相比reset的重置，把新的commit删除，revert会新建一个提交把旧的版本逆转，并保留原先的commit，保留提交历史的完整性</p>
<p><code>git revert &lt;commitid&gt;</code></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522192833426.webp" alt="image-20240522192833426"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">* c778266 qevert <span class="string">&quot;revert_test_2&quot;</span></span><br><span class="line">* b39474d revert_test_3</span><br><span class="line">* 2ce70d9 revert_test_2</span><br><span class="line">* d029a3d revert_test_1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>会发现原来的commit依旧存在，并且还添加了一个commit，显示逆转到了revert</p>
<p>允许多个撤销<code>git revert  &lt;commit&gt;   &lt;commit&gt;   &lt;commit&gt;....</code>,会一个一个撤销/逆转</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git revert  e90405d   4e41599 c778266</span><br><span class="line">[dev 13b68aa] Revert <span class="string">&quot;cs5&quot;</span></span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line">[dev f53dff4] Revert <span class="string">&quot;revert_test_4&quot;</span></span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 asa.txt</span><br><span class="line">[dev 504f1d3] Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"> 1 file changed, 4 deletions(-)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git <span class="built_in">log</span> --graph --all --pretty=oneline --abbrev-commit</span><br><span class="line">* 504f1d3 (HEAD -&gt; dev) Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line">* f53dff4 Revert <span class="string">&quot;revert_test_4&quot;</span></span><br><span class="line">* 13b68aa Revert <span class="string">&quot;cs5&quot;</span></span><br><span class="line">* ff40ccb cs6</span><br><span class="line">* e90405d cs5</span><br><span class="line">* 4e41599 revert_test_4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> git revert 2ce70d9</span><br><span class="line">Auto-merging revert.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> revert.txt</span><br><span class="line">error: could not revert 2ce70d9... revert_test_2</span><br><span class="line">hint: After resolving the conflicts, mark them with</span><br><span class="line">hint: <span class="string">&quot;git add/rm &lt;pathspec&gt;&quot;</span>, <span class="keyword">then</span> run</span><br><span class="line">hint: <span class="string">&quot;git revert --continue&quot;</span>.</span><br><span class="line">hint: You can instead skip this commit with <span class="string">&quot;git revert --skip&quot;</span>.</span><br><span class="line">hint: To abort and get back to the state before <span class="string">&quot;git revert&quot;</span>,</span><br><span class="line">hint: run <span class="string">&quot;git revert --abort&quot;</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>出现冲突时</p>
<p>在提示的文件中修改冲突后，可以选择<code>git add/rm &lt;pathspec&gt;</code>，添加到暂存区，再<code>git revert --continue</code>继续还原</p>
<p>当有多个逆转提交时可以使用<code>git revert --skip</code>跳过这个改变提交，而执行其他的逆转，比如<code>git revert A  B  C  D</code>，C出现了冲突，我选择<code>git revert --skip</code>,这个时候ABD仍然逆转，C的修改不变。</p>
<p><code>git revert --abort</code>逆转过程中，有冲突的时候使用这个语句将中止当前所有逆转，并返回到<code>git revert</code>前</p>
<h3 id="23-检索"><a href="#23-检索" class="headerlink" title="23. 检索"></a>23. 检索</h3><p><code>git grep [options] pattern [-- [pathspec...]]</code></p>
<ul>
<li><p>pattern </p>
<p>字符串或者正则表达式</p>
</li>
<li><p>[不同的模式]</p>
</li>
<li><p>pathspec</p>
<p>搜索的文件或者目录</p>
</li>
</ul>
<p>常用选项</p>
<ul>
<li><p><strong><code>-i</code></strong>：忽略大小写。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -i <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-n</code></strong>：显示匹配行的行号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -n <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-v</code></strong>：反向匹配，显示不包含匹配模式的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -v <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-c</code></strong>：只显示匹配的行数。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -c <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-l</code></strong>：只显示包含匹配模式的文件名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -l <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--cached</code></strong>：在索引（暂存区）中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep --cached <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>&lt;commit&gt;</code></strong>：在指定提交中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> HEAD</span><br><span class="line">git grep <span class="string">&quot;pattern&quot;</span> commit_hash</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>&lt;branch&gt;</code></strong>：在指定分支中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> branch_name</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--</code></strong>：分隔符，用于区分路径和模式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> -- path/to/file_or_directory</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git grep 测试</span><br><span class="line">revert.txt:测试1</span><br><span class="line">revert.txt:测试2</span><br><span class="line">revert.txt:测试3</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git grep -n 测试</span><br><span class="line">revert.txt:1:测试1</span><br><span class="line">revert.txt:3:测试2</span><br><span class="line">revert.txt:5:测试3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="24-溯源-blame"><a href="#24-溯源-blame" class="headerlink" title="24. 溯源 blame"></a>24. 溯源 blame</h3><p><code>git blame [options] &lt;file&gt;</code></p>
<p>查看文件被谁修改以及提交信息等等</p>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git blame test.txt</span><br><span class="line">86960c55 (yee1819 2024-05-15 08:53:55 +0800 1) 25616515</span><br><span class="line">86960c55 (yee1819 2024-05-15 08:53:55 +0800 2)</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 3)</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 4) 这是在main分支输入的内容</span><br><span class="line">336c576f (yee1819 2024-05-15 08:55:38 +0800 5) 这里是hello 分支的内容</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 6)</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 7) ttttt</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 8)</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 9) 6666</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>选项：</p>
<ul>
<li><p><strong><code>-L &lt;start&gt;,&lt;end&gt;</code></strong>：限制只显示特定范围的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -L 10,20 &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>只显示从第 10 行到第 20 行的修改记录。</p>
</li>
<li><p><strong><code>-c</code></strong>：使用简短的提交哈希。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -c &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-e</code></strong>：显示作者的 email 地址。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -e &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-f</code></strong>：显示完整的文件名和行号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -f &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-l</code></strong>：显示包含换行符的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -l &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-p</code></strong>：显示更详细的原始信息。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -p &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--since=&lt;date&gt;</code> 和 <code>--until=&lt;date&gt;</code></strong>：限制显示从某个日期开始或截止的修改。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame --since=2.weeks &lt;file&gt;</span><br><span class="line">例如：</span><br><span class="line">$ git blame --since=<span class="string">&quot;2023-01-01&quot;</span> test.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-C</code></strong>：检测代码搬移（跨文件）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -C &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="25-flow-分支管理系统"><a href="#25-flow-分支管理系统" class="headerlink" title="25. flow 分支管理系统"></a>25. flow 分支管理系统</h3><p>一套详细的分支管理策略主要分为</p>
<ol>
<li><strong>主分支（master）</strong>：始终保持可发布状态，包含已经发布的版本。</li>
<li><strong>开发分支（develop）</strong>：包含即将发布的功能，作为功能分支的集成分支。</li>
<li><strong>功能分支（feature）</strong>：用于开发新功能，基于 <code>develop</code> 创建，完成后合并回 <code>develop</code>。</li>
<li><strong>发布分支（release）</strong>：用于准备新版本的发布，基于 <code>develop</code> 创建，完成后合并回 <code>master</code> 和 <code>develop</code>。</li>
<li><strong>热修复分支（hotfix）</strong>：用于修复紧急问题，基于 <code>master</code> 创建，完成后合并回 <code>master</code> 和 <code>develop</code>。</li>
</ol>
<p>需要先置安装，有独特的一套指令，以及良好的结构化规范，不过多了解。</p>
<h3 id="26-worktree-仓库"><a href="#26-worktree-仓库" class="headerlink" title="26. worktree 仓库"></a>26. worktree 仓库</h3><p>当工作中需要频繁切换分支的时候，可以创建一个新的工作目录，相当于复制一个仓库来方便切换</p>
<p><code>git worktree add &lt;path&gt; [branch]</code> </p>
<ul>
<li><p><code>&lt;path&gt;</code>为路径</p>
</li>
<li><p><code>[branch]</code> 可选的分支名，如果不填写，则自动创建一个与路径目录名相同的分支。如果该分支已存在则切换到同名分支。</p>
<p>如果没有这个分支则需要加一个<code>-b</code></p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">填写分支且不存在该分支</span><br><span class="line">$ git worktree add ../my-feature-branch -b feature-branch</span><br><span class="line">Preparing worktree (new branch <span class="string">&#x27;feature-branch&#x27;</span>)</span><br><span class="line">HEAD is now at 504f1d3 Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不填写分支且不存在该分支</span><br><span class="line">$ git worktree add ../my-feature-branch2</span><br><span class="line">Preparing worktree (new branch <span class="string">&#x27;my-feature-branch2&#x27;</span>)</span><br><span class="line">HEAD is now at 504f1d3 Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">  dev2</span><br><span class="line">+ feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git worktree list</span><br><span class="line">C:/Users/Yee/Desktop/gitdome             504f1d3 [dev]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch   504f1d3 [feature-branch]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch2  504f1d3 [my-feature-branch2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">填写分支且存在该分支</span><br><span class="line">$ git worktree add ../dev2</span><br><span class="line">Preparing worktree (checking out <span class="string">&#x27;dev2&#x27;</span>)</span><br><span class="line">HEAD is now at 7ff7fe3 登录功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">+ dev2</span><br><span class="line">+ feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522201614876.webp" alt="image-20240522201614876"></p>
<p>删除工作目录</p>
<p><code>git worktree remove &lt;path&gt;</code></p>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git worktree remove ../my-feature-branch</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git worktree remove ../dev2</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git worktree list</span><br><span class="line">C:/Users/Yee/Desktop/gitdome             504f1d3 [dev]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch2  504f1d3 [my-feature-branch2]</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">  dev2</span><br><span class="line">  feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以发现，工作目录虽然删除了，但是分支依旧还在。</p>
<p>特点：</p>
<ul>
<li><p><strong>共享同一个 Git 仓库</strong>：所有工作目录共享同一个 Git 仓库，因此对象存储和引用（如提交、分支、标签）是共享的。</p>
</li>
<li><p><strong>独立的工作树和索引</strong>：每个工作目录都有自己的工作树和索引，因此在一个工作目录中的未提交更改不会影响其他工作目录。</p>
<p>类似贮藏和切换分支</p>
</li>
<li><p><strong>适用于并行开发</strong>：使用 <code>git worktree</code> 可以同时在多个分支上进行开发，而不需要频繁切换分支。</p>
</li>
</ul>
<hr>
<h3 id="999-给命令起别名"><a href="#999-给命令起别名" class="headerlink" title="999.给命令起别名"></a>999.给命令起别名</h3><p>一些指令需要配置一堆参数，每次打的话会浪费很多时间例如查看日志<code>`git log</code>一般都会带以下参数：<code>git log --graph --all --pretty=oneline --abbrev-commit</code></p>
<p>每次都打会很麻烦，这个时候就需要起个别名，每次只要需要打一点指令就可以执行一长串的命令</p>
<blockquote>
<p>alias</p>
</blockquote>
<h3 id="998-Git-Git-钩子-git-scm-com"><a href="#998-Git-Git-钩子-git-scm-com" class="headerlink" title="998.Git - Git 钩子 (git-scm.com)"></a>998.<a href="https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子">Git - Git 钩子 (git-scm.com)</a></h3><h2 id="不同方式本地连接github的方法"><a href="#不同方式本地连接github的方法" class="headerlink" title="不同方式本地连接github的方法"></a>不同方式本地连接github的方法</h2><h3 id="git-bash-命令行"><a href="#git-bash-命令行" class="headerlink" title="git  bash  命令行"></a>git  bash  命令行</h3><h3 id="github-桌面版"><a href="#github-桌面版" class="headerlink" title="github  桌面版"></a>github  桌面版</h3><h3 id="github-GUI"><a href="#github-GUI" class="headerlink" title="github  GUI"></a>github  GUI</h3><h2 id="待续计划"><a href="#待续计划" class="headerlink" title="待续计划"></a>待续计划</h2><ul>
<li>[ ] 变基 rebase</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql中where和join...on连接的区别</title>
    <url>/posts/266da2c0.html</url>
    <content><![CDATA[<h1 id="浅析SQL语句中俩种内连接的区别"><a href="#浅析SQL语句中俩种内连接的区别" class="headerlink" title="浅析SQL语句中俩种内连接的区别"></a>浅析SQL语句中俩种内连接的区别</h1><blockquote>
<p> 在SQL语言中，查询数据总是免不了多表查询，而内连接是我们在日常使用中最经常使用的一种连接查询。而经常使用的内连接中，有人喜欢用<code>INNER JOIN ON</code>这种连接，又有人喜欢用<code>WHERE TAB_1.列名 = tab_2.列名</code>的方式，那么他们又有什么区别呢。</p>
</blockquote>
<div class="tabs" id="归档"><ul class="nav-tabs no-default"></ul><div class="tab-contents"></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>大概率讲错了，今天拿了一个70万、一个10万的数据来测试</p>
<p>发现时间差不多…</p>
<p>有时间再测试！！</p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新页面"><a href="#创建一个新页面" class="headerlink" title="创建一个新页面"></a>创建一个新页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">//or</span><br><span class="line">$ hexo new post <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"></span><br><span class="line">//新的普通界面</span><br><span class="line">$ hexo new page <span class="string">&quot;My New Page&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">$ hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署站点"><a href="#部署站点" class="headerlink" title="部署站点"></a>部署站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a>$$ </p>
<h3 id="清除静态资源"><a href="#清除静态资源" class="headerlink" title="清除静态资源"></a>清除静态资源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<h3 id="运行三连"><a href="#运行三连" class="headerlink" title="运行三连"></a>运行三连</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<h3 id="部署三连"><a href="#部署三连" class="headerlink" title="部署三连"></a>部署三连</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx初步认识</title>
    <url>/posts/bbc25a0e.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx是一个Web服务器和反向代理服务器，有着高性能，占用内存低、可扩展性高多功能等等一系列优点</p>
<p>功能：充当反向代理服务器，服务器的负载均衡、支持HTTP/HTTPS协议、内置缓存机制，自由设置缓存时间提高需要时间和减少后端服务器负载、有着安全性：控制访问路径、IP白名单、名单和速率限制。</p>
<h2 id="下载以及初步运行"><a href="#下载以及初步运行" class="headerlink" title="下载以及初步运行"></a>下载以及初步运行</h2><p>以Windows为例：</p>
<p>官网下载<a href="https://nginx.org/en/download.html">nginx：下载</a></p>
<p>因为Nginx初始端口为80，这是所有服务器默认的HTTP端口，在<code>Windows中</code>会被占用从而打不开，首先我们需要修改默认端口，解压Nginx文件夹后打开Nginx路径下的<code>\nginx-1.26.0\conf\nginx.conf</code></p>
<p>映入眼帘的是如下配置（去除注释外）：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他我们先不管，先把视线放在<code>http</code>-&gt;<code>server</code>之中，我们可以看到<code>listen</code>后面跟着80这个数字，listen就是我们想要找到的端口号设置，把这一段修改为任意一个没被占用的端口号即可，我这里修改为90</p>
<p>如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"> <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">90</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">	    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    	<span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        	<span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后我们打开<a href="http://127.0.0.1:90/">127.0.0.1:90</a>就能看见默认生成的Nginx页面</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240529201310112.webp" alt="默认Nginx"></p>
<p>我们注意到<code>server</code>之中还有好几个配置名字，这些都是什么意思呢？</p>
<p>首先看到<code>listen</code>下的<code>server_name</code>，这个起到设置域名或者IP地址的作用，众所周知localhost就是127.0.0.1,所以我们能在27.0.0.1:90访问到Nginx的初始界面。</p>
<p><code>server_name</code>可以使用域名、IP、通配符、正则表达式、<code>default_server</code>进行匹配，定义服务器的地址，其中default_server修饰是搭配80 或者 443 标记用于指定默认的服务器块，当没有其他服务器块匹配请求的域名时，NGINX将使用这个默认的服务器块 （也可以设置你想展示的默认端口或IP地址 。</p>
<p>接下来就是</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"><span class="section">location</span> = /50x.html &#123;</span><br><span class="line">    <span class="attribute">root</span>   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>location</code>后设置访问的是请求，可以使用正则表达式、通配符、地址、文件等等例如<code>/</code>就是请求网址根目录，<code>/50x.html</code>，就是请求<code>127.0.0.1:90/50x.html</code>，<code>&#123;&#125;</code>内的参数<code>root</code>为文件地址，可以是相对路径也可以是绝对地址，<code>index</code>是主页的搜索范围，例如上面的配置中就是在<code>/html/</code>找到<code>index.html</code>或者<code>index.htm</code></p>
<blockquote>
<p>Nginx先判断的并不是请求而是路径，但是可以类似的通过<code>try_files $uri /test.html;</code>把路径变为请求，在下面有讲到…</p>
<p>如果省略后缀名也可以找出来结果</p>
</blockquote>
<p>使用<code>=</code>号的时候，会精准匹配某个准确的字符串</p>
<p>我们观察到root 也就是路径写着是<code>html</code>，那么这个html在哪里呢？我们打开Nginx的文件夹中看看</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240529203147654.webp" alt="html路径"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240529203307267.webp" alt="网址`/`或`/50x.html`"></p>
<p>除了这个以外，还有一行<code>error_page   500 502 503 504  /50x.html;</code>，意思是如果发生了 500、502、503、504状态码错误，就跳转到<code>/50x.html</code>界面，用来处理页面错误问题。</p>
<p>了解到这些以后我们来自定义一个配置试试看。</p>
<p>添加配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">        <span class="section">location</span> /test &#123;</span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">            <span class="comment"># index test.html;</span></span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> /test.html;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#此时/test可能会被解析为路径而不是请求，所以需要  try_files  </span></span><br><span class="line">        <span class="section">location</span> = /hello.html &#123;</span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意！修改配置后需要重启Nginx！！！</p>
<p><code>try_files 正则表达式或者文件名;</code> 加载查询到的第一个结果</p>
</blockquote>
<p>结果如下：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240529211241824.webp" alt="自定义新界面的结果"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240530003849843.webp" alt="请求以及缺省后缀名"></p>
<p>编码问题不用在意啦…</p>
<h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><h3 id="1-站点配置"><a href="#1-站点配置" class="headerlink" title="1.站点配置"></a>1.站点配置</h3><p>以我的一个站点配置为例子</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#默认端口号配置，开启了HTTPS  SSL</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2 default_server;</span><br><span class="line">		<span class="attribute">listen</span> 端口号;</span><br><span class="line">    <span class="attribute">server_name</span> kiko2568.top xxx.xx.xx.xx;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    <span class="comment">#站点所在目录</span></span><br><span class="line">    <span class="attribute">root</span> /www/wwwroot/kiko2568.top;</span><br><span class="line">    <span class="comment">#CERT-APPLY-CHECK--START</span></span><br><span class="line">    <span class="comment"># 用于SSL证书申请时的文件验证相关配置 -- 请勿删除</span></span><br><span class="line">    <span class="comment">#include 可以引入文件所在的目录下的文件，可以用通配符，正则表达式</span></span><br><span class="line">    <span class="attribute">include</span> /www/server/panel/vhost/nginx/well-known/kiko2568.top.conf;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#CERT-APPLY-CHECK--END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span></span><br><span class="line">    <span class="comment">#error_page 404/404.html;</span></span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_START</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$server_port</span> !<span class="regexp">~ 443)</span>&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(/.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_END</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>    /www/server/panel/vhost/cert/kiko2568.top/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>    /www/server/panel/vhost/cert/kiko2568.top/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> xxxxx+xxxxxxxx:xxxxx+xxxxxxxx-xxxxx:xxxxx+xxxxxx:xxx+xxxxxx:xxxxx+xxxxxx:xxxxxxxxxx:xxxxx+xxxx:xSA+3DES:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000&quot;</span>;</span><br><span class="line">    <span class="comment">#错误界面</span></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#SSL-END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span></span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="comment">#error_page 502 /502.html;</span></span><br><span class="line">    <span class="comment">#ERROR-PAGE-END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span></span><br><span class="line">    <span class="attribute">include</span> enable-php-<span class="number">80</span>.conf;</span><br><span class="line">    <span class="comment">#PHP-INFO-END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span></span><br><span class="line">    <span class="attribute">include</span> /www/server/panel/vhost/rewrite/kiko2568.top.conf;</span><br><span class="line">    <span class="comment">#REWRITE-END</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#禁止访问的文件或目录</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#一键申请SSL证书验证目录相关设置</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.well-known</span>&#123;</span><br><span class="line">        <span class="attribute">allow</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#禁止在证书验证目录放入敏感文件</span></span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$uri</span> <span class="regexp">~ &quot;^/\.well-known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$&quot;</span> ) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">#设置静态资源缓存过期时间 和日志</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">30d</span>;</span><br><span class="line">        <span class="attribute">error_log</span> /dev/null;</span><br><span class="line">        <span class="attribute">access_log</span> /dev/null;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">#设置js||css 文件缓存过期时间 和日志</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ .*\.(js|css)?$</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">12h</span>;</span><br><span class="line">        <span class="attribute">error_log</span> /dev/null;</span><br><span class="line">        <span class="attribute">access_log</span> /dev/null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#日志存放记录</span></span><br><span class="line">    <span class="attribute">access_log</span>  /www/wwwlogs/kiko2568.top.log;</span><br><span class="line">    <span class="attribute">error_log</span>  /www/wwwlogs/kiko2568.top.<span class="literal">error</span>.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Nginx服务器配置"><a href="#Nginx服务器配置" class="headerlink" title="Nginx服务器配置"></a>Nginx服务器配置</h3><blockquote>
<p>这里我直接转载<a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">Nginx 配置详解 | 菜鸟教程 (runoob.com)</a></p>
<p>他写的好详细！！！</p>
<p>小小偷个懒</p>
</blockquote>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">...              <span class="comment">#全局块</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;         <span class="comment">#events块</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">http</span>      <span class="comment">#http块</span></span><br><span class="line">&#123;</span><br><span class="line">    ...   <span class="comment">#http全局块</span></span><br><span class="line">    <span class="attribute">server</span>        <span class="comment">#server块</span></span><br><span class="line">    &#123; </span><br><span class="line">        ...       <span class="comment">#server全局块</span></span><br><span class="line">        <span class="section">location</span> [PATTERN]   <span class="comment">#location块</span></span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="section">location</span> [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span></span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     <span class="comment">#http全局块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>
<li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>
<li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>
<li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">########### 每个指令必须有分号结束。#################</span></span><br><span class="line"><span class="comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。  </span></span><br><span class="line"><span class="comment">#worker_processes 2;  #允许生成的进程数，默认为1   可设置  auto</span></span><br><span class="line"><span class="comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span><br><span class="line"><span class="attribute">error_log</span> log/<span class="literal">error</span>.log <span class="literal">debug</span>;  <span class="comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;   <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;  <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;    <span class="comment">#最大连接数，默认为512</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;   <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream; <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line">    <span class="comment">#access_log off; #取消服务日志    </span></span><br><span class="line">    <span class="attribute">log_format</span> myFormat <span class="string">&#x27;<span class="variable">$remote_addr</span>–<span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="variable">$request</span> <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="variable">$http_referer</span> <span class="variable">$http_user_agent</span> <span class="variable">$http_x_forwarded_for</span>&#x27;</span>; <span class="comment">#自定义格式</span></span><br><span class="line">    <span class="attribute">access_log</span> log/access.log myFormat;  <span class="comment">#combined为日志格式的默认值</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;   <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">100k</span>;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line">    <span class="section">upstream</span> mysvr &#123;   </span><br><span class="line">      <span class="attribute">server</span> <span class="number">127.0.0.1:7878</span>;</span><br><span class="line">      <span class="attribute">server</span> <span class="number">192.168.10.121:3333</span> backup;  <span class="comment">#热备</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">120</span>; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">4545</span>;   <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;   <span class="comment">#监听地址       </span></span><br><span class="line">        <span class="section">location</span>  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           <span class="attribute">proxy_pass</span>  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           <span class="attribute">deny</span> <span class="number">127.0.0.1</span>;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           <span class="attribute">allow</span> <span class="number">172.18.5.54</span>; <span class="comment">#允许的ip           </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是nginx的基本配置，需要注意的有以下几点：</p>
<p>1、几个常见配置项：</p>
<ul>
<li>1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</li>
<li>2.$remote_user ：用来记录客户端用户名称；</li>
<li>3.$time_local ： 用来记录访问时间与时区；</li>
<li>4.$request ： 用来记录请求的url与http协议；</li>
<li>5.$status ： 用来记录请求状态；成功是200；</li>
<li>6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li>
<li>7.$http_referer ：用来记录从那个页面链接访问过来的；</li>
<li>8.$http_user_agent ：记录客户端浏览器的相关信息；</li>
</ul>
<p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p>
<p>3、每个指令必须有分号结束。</p>
<hr>
<h2 id="代理、正向代理以及反向代理"><a href="#代理、正向代理以及反向代理" class="headerlink" title="代理、正向代理以及反向代理"></a>代理、正向代理以及反向代理</h2><p>代理：通过第三方（第一第二方为服务器端和客户端）服务器来进行代理，让服务器端和客户端不直接碰面，从而成功请求响应数据。</p>
<h3 id="正向代理："><a href="#正向代理：" class="headerlink" title="正向代理："></a>正向代理：</h3><p>forward proxy</p>
<p>代理的是客户端，去和服务器端交互</p>
<p>客户端给代理服务器发送请求，由代理服务器转发给服务器端，并把响应的内容转发回客户端</p>
<p>用处：</p>
<ul>
<li><p><strong>突破访问限制</strong> </p>
<p>类似vpn，使用不属于本地网络来访问不能访问的地方</p>
</li>
<li><p><strong>提高访问速度</strong></p>
<p>通常代理服务器都设置一个较大的硬盘缓冲区，会将部分请求的响应保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。</p>
</li>
<li><p><strong>隐藏客户端真实IP</strong></p>
<p>服务器端交互 的是代理服务器而不是客户端，起到了隐藏的作用</p>
</li>
</ul>
<h3 id="反向代理："><a href="#反向代理：" class="headerlink" title="反向代理："></a>反向代理：</h3><p><strong>reverse proxy</strong></p>
<p>代理的是服务器端，去和客户端交互</p>
<p>作为伪装的服务器端接受请求把请求转发给服务器端，并假装服务器端把真正的服务器响应的数据给客户端</p>
<p>用处：</p>
<ul>
<li><strong>隐藏服务器真实IP</strong><br>使用反向代理，可以对客户端隐藏服务器的IP地址。</li>
</ul>
<ul>
<li><strong>负载均衡</strong><br>反向代理服务器可以做负载均衡，根据所有真实服务器的负载情况，将客户端请求分发到不同的真实服务器上。</li>
</ul>
<ul>
<li><strong>提高访问速度</strong><br>反向代理服务器可以对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务，提高访问速度。</li>
</ul>
<ul>
<li><strong>提供安全保障</strong><br>反向代理服务器可以作为应用层防火墙，为网站提供对基于Web的攻击行为（例如DoS/DDoS）的防护，更容易排查恶意软件等。还可以为后端服务器统一提供加密和SSL加速（如SSL终端代理），提供HTTP访问认证等。</li>
</ul>
<h3 id="Nginx设置代理"><a href="#Nginx设置代理" class="headerlink" title="Nginx设置代理"></a>Nginx设置代理</h3><h4 id="设置-404-页面导向地址"><a href="#设置-404-页面导向地址" class="headerlink" title="设置 404 页面导向地址"></a>设置 404 页面导向地址</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> https://www.error.com; <span class="comment">#错误页</span></span><br><span class="line"><span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;    <span class="comment">#如果被代理服务器返回的状态码为400或者大于400，设置的error_page配置起作用。默认为off。</span></span><br></pre></td></tr></table></figure>
<h4 id="如果我们的代理只允许接受get，post请求方法的一种"><a href="#如果我们的代理只允许接受get，post请求方法的一种" class="headerlink" title="如果我们的代理只允许接受get，post请求方法的一种"></a>如果我们的代理只允许接受get，post请求方法的一种</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_method</span> get;    <span class="comment">#支持客户端的请求方法。post/get；</span></span><br></pre></td></tr></table></figure>
<h4 id="设置支持的http协议版本"><a href="#设置支持的http协议版本" class="headerlink" title="设置支持的http协议版本"></a>设置支持的http协议版本</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">0</span> ; <span class="comment">#Nginx服务器提供代理服务的http协议版本1.0，1.1,默认设置为1.0版本</span></span><br></pre></td></tr></table></figure>
<p>设置HTTP2</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2; <span class="comment">#设置前端2.0 443接口支持 http2以及SSL</span></span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /path/to/your/certificate.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /path/to/your/private.key;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>; <span class="comment">#后端还是1.1 </span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 Nginx 配置中，即使前端使用的是 HTTP/2，与后端服务器的通信通常仍然使用 HTTP/1.1。原因在于，HTTP/2 的主要优点（如多路复用、头部压缩和服务器推送）主要体现在客户端和 Nginx 之间的通信中。Nginx 作为反向代理服务器，可以将前端的 HTTP/2 请求转换为后端的 HTTP/1.1 请求，这样可以确保与后端服务器的兼容性和稳定性。</p>
<h4 id="负载均衡时，某服务器超时-连接失败-时不再请求"><a href="#负载均衡时，某服务器超时-连接失败-时不再请求" class="headerlink" title="负载均衡时，某服务器超时/连接失败 时不再请求"></a>负载均衡时，某服务器超时/连接失败 时不再请求</h4><p>例如有俩个服务器A，B，B连接不上了，这个时候再发送给B请求就会超时，等待响应时间长，才把重新请求发给A，可以断开链接</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">1</span>;   <span class="comment">#nginx服务器与被代理的服务器建立连接的超时时间，默认60秒</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">1</span>; <span class="comment">#nginx服务器想被代理服务器组发出read请求后，等待响应的超时间，默认为60秒。</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">1</span>; <span class="comment">#nginx服务器想被代理服务器组发出write请求后，等待响应的超时间，默认为60秒。</span></span><br><span class="line"><span class="attribute">proxy_ignore_client_abort</span> <span class="literal">on</span>;  <span class="comment">#客户端断网时，nginx服务器是否终端对被代理服务器的请求。默认为off。</span></span><br></pre></td></tr></table></figure>
<h4 id="负载均衡时设置异常情况切换下一个服务器"><a href="#负载均衡时设置异常情况切换下一个服务器" class="headerlink" title="负载均衡时设置异常情况切换下一个服务器"></a>负载均衡时设置异常情况切换下一个服务器</h4><p>如果使用upstream指令配置一组服务器作为被代理服务器，服务器中的访问算法遵循配置的负载均衡规则，同时可以使用该指令配置在发生哪些异常情况时，将请求顺次交由下一组服务器处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_next_upstream timeout;  #反向代理upstream中设置的服务器组，出现故障时，被代理服务器返回的状态值。</span><br></pre></td></tr></table></figure>
<p>状态值可以是：</p>
<ul>
<li>error：建立连接或向被代理的服务器发送请求或读取响应信息时服务器发生错误。</li>
<li>timeout：建立连接，想被代理服务器发送请求或读取响应信息时服务器发生超时。</li>
<li>invalid_header:被代理服务器返回的响应头异常。</li>
<li>off:无法将请求分发给被代理的服务器。</li>
<li>http_400，http_500|http_502|http_503|http_504|http_404….:被代理服务器返回的状态码为400，500，502，等。</li>
</ul>
<h4 id="获取客户端真实信息而不是代理服务器"><a href="#获取客户端真实信息而不是代理服务器" class="headerlink" title="获取客户端真实信息而不是代理服务器"></a>获取客户端真实信息而不是代理服务器</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>; <span class="comment">#只要用户在浏览器中访问的域名绑定了 VIP VIP 下面有RS；则就用$host ；host是访问URL中的域名和端口  www.taobao.com:80</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment">#把源IP 【$remote_addr,建立HTTP连接header里面的信息】赋值给X-Real-IP;这样在代码中 $X-Real-IP来获取 源IP</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;<span class="comment">#在nginx 作为代理服务器时，设置的IP列表，会把经过的机器ip，代理机器ip都记录下来，用 【，】隔开；代码中用 echo $x-forwarded-for |awk -F, &#x27;&#123;print $1&#125;&#x27; 来作为源IP</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>; <span class="comment">#将客户端使用的协议（http 或 https）传递给后端服务器。</span></span><br></pre></td></tr></table></figure>
<h4 id="反向代理：-1"><a href="#反向代理：-1" class="headerlink" title="反向代理："></a>反向代理：</h4><p>和下面的负载均衡一样</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span>;</span><br><span class="line">    <span class="comment">#....还可以再加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>基本示例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080/admin/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一张图解释</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  sequenceDiagram
	客户端-&gt;&gt;nginx: 请求
	nginx-&gt;&gt;服务器: 转发
	Note right of 客户端: 请求地址：http:localhost&#x2F;api&#x2F;xxxxx
    Note right of nginx: 转发地址：http:localhost&#x2F;8080&#x2F;admin&#x2F;xxxxx
  </pre></div>
<hr>
<h4 id="配置大全"><a href="#配置大全" class="headerlink" title="配置大全"></a>配置大全</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">include</span>       mime.types;   <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line"><span class="attribute">default_type</span>  application/octet-stream; <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line"><span class="comment">#access_log off; #取消服务日志    </span></span><br><span class="line"><span class="attribute">log_format</span> myFormat <span class="string">&#x27; <span class="variable">$remote_addr</span>–<span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="variable">$request</span> <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="variable">$http_referer</span> <span class="variable">$http_user_agent</span> <span class="variable">$http_x_forwarded_for</span>&#x27;</span>; <span class="comment">#自定义格式</span></span><br><span class="line"><span class="attribute">access_log</span> log/access.log myFormat;  <span class="comment">#combined为日志格式的默认值</span></span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;   <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line"><span class="attribute">sendfile_max_chunk</span> <span class="number">100k</span>;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">1</span>;   <span class="comment">#nginx服务器与被代理的服务器建立连接的超时时间，默认60秒</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">1</span>; <span class="comment">#nginx服务器想被代理服务器组发出read请求后，等待响应的超时间，默认为60秒。</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">1</span>; <span class="comment">#nginx服务器想被代理服务器组发出write请求后，等待响应的超时间，默认为60秒。</span></span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">0</span> ; <span class="comment">#Nginx服务器提供代理服务的http协议版本1.0，1.1，默认设置为1.0版本。</span></span><br><span class="line"><span class="comment">#proxy_method get;    #支持客户端的请求方法。post/get；</span></span><br><span class="line"><span class="attribute">proxy_ignore_client_abort</span> <span class="literal">on</span>;  <span class="comment">#客户端断网时，nginx服务器是否终端对被代理服务器的请求。默认为off。</span></span><br><span class="line"><span class="attribute">proxy_ignore_headers</span> <span class="string">&quot;Expires&quot;</span> <span class="string">&quot;Set-Cookie&quot;</span>;  <span class="comment">#Nginx服务器不处理设置的http相应投中的头域，这里空格隔开可以设置多个。</span></span><br><span class="line"><span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;    <span class="comment">#如果被代理服务器返回的状态码为400或者大于400，设置的error_page配置起作用。默认为off。</span></span><br><span class="line"><span class="attribute">proxy_headers_hash_max_size</span> <span class="number">1024</span>; <span class="comment">#存放http报文头的哈希表容量上限，默认为512个字符。</span></span><br><span class="line"><span class="attribute">proxy_headers_hash_bucket_size</span> <span class="number">128</span>; <span class="comment">#nginx服务器申请存放http报文头的哈希表容量大小。默认为64个字符。</span></span><br><span class="line"><span class="attribute">proxy_next_upstream</span> timeout;  <span class="comment">#反向代理upstream中设置的服务器组，出现故障时，被代理服务器返回的状态值。error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off</span></span><br><span class="line"><span class="comment">#proxy_ssl_session_reuse on; 默认为on，如果我们在错误日志中发现“SSL3_GET_FINSHED:digest check failed”的情况时，可以将该指令设置为off。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>用户多的时候，执行业务处理中的服务器免不了高并发，如果只有一个服务器，那么可能导致响应速度慢业务堵塞服务器崩溃等等不好的后果。所以一般会由多个服务器进行业务处理，降低每个服务器的压力。</p>
<p>具体使用</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">0.0.0.1</span>;</span><br><span class="line">        <span class="comment">#....还可以再加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">            <span class="comment">#相当与 http://backend1.example.com</span></span><br><span class="line">            <span class="comment">#或者 http://backend2.example.com</span></span><br><span class="line">            <span class="comment">#或者 http://0.0.0.1</span></span><br><span class="line">            <span class="comment"># 复制粘贴upstream 的server</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，服务器就有原本的一个服务器支撑业务就变为多个服务器一起进行</p>
<h3 id="轮询-Round-Robin"><a href="#轮询-Round-Robin" class="headerlink" title="轮询 (Round Robin):"></a><strong>轮询 (Round Robin)</strong>:</h3><p>默认的算法：例如设置了三个服务器进行负载均衡，则按照顺序一个一个轮流分配请求到每个后端服务器。</p>
<p>例如a、b、c为三个服务器 的编号，现在有一连串的请求到Nginx，那么分配顺序就是：abc abc abc abc abc</p>
<h3 id="权重-Weight"><a href="#权重-Weight" class="headerlink" title="权重 (Weight):"></a><strong>权重 (Weight)</strong>:</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置方法就是在IP地址后面加上  weight= 权重值 ，不设置默认为1</p>
<p>如代码所示，a、b、c的权重为3、2、1那么一串请求进入的分配结果为：</p>
<p>aaabbc  aaabbc    aaabbc </p>
<h3 id="IP-哈希-IP-Hash"><a href="#IP-哈希-IP-Hash" class="headerlink" title="IP 哈希 (IP Hash):"></a><strong>IP 哈希 (IP Hash)</strong>:</h3><p>根据客户端 IP 地址的哈希值来分配请求，这样来自同一个客户端的请求会始终被分配到同一个后端服务器。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求的session就不怕被分配到其他的服务器了。</p>
<h3 id="热备（backup）"><a href="#热备（backup）" class="headerlink" title="热备（backup）"></a><strong>热备（backup）</strong></h3><p>设置某个 服务器 做当作备用，当全部服务器都故障了，就使用这个备用服务器。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> mysvr &#123; </span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span>  backup;  <span class="comment">#热备     </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入a、b是编号，b是热备，那么请求是这样的aaaaaaaaaa，a 故障了，bbbbbbbbb。</p>
<h3 id="健康检查-Health-Check"><a href="#健康检查-Health-Check" class="headerlink" title="健康检查 (Health Check):"></a><strong>健康检查 (Health Check)</strong>:</h3><p>为了确保请求只被分配到正常运行的服务器，可以配置健康检查。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span> weight=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">health_check</span> interval=<span class="number">10s</span> fails=<span class="number">3</span> passes=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三个参数为：</p>
<ul>
<li><p><strong>interval=10s</strong>:<br>表示健康检查的时间间隔，即每 10 秒对每个上游服务器进行一次健康检查。</p>
</li>
<li><p><strong>fails=3</strong>:<br>表示在标记服务器为不可用之前必须连续失败的健康检查次数。如果服务器连续 3 次健康检查失败，那么它将被认为是不可用的。</p>
</li>
<li><p><strong>passes=2</strong>:<br>表示在将服务器标记为可用之前必须连续成功的健康检查次数。如果服务器被标记为不可用，但之后连续 2 次健康检查成功，那么它将被重新标记为可用。</p>
</li>
</ul>
<h3 id="最少连接-Least-Connections"><a href="#最少连接-Least-Connections" class="headerlink" title="最少连接 (Least Connections):"></a><strong>最少连接 (Least Connections)</strong>:</h3><p> 将请求分配给当前活动连接数最少的服务器，适用于请求处理时间较长的场景。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul>
<li>down，表示当前的server暂时不参与负载均衡。</li>
<li>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</li>
<li>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li>
<li>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li>
</ul>
<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> mysvr &#123; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:7878</span> weight=<span class="number">2</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.10.121:3333</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">1</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考</p>
<blockquote>
<p><a href="https://www.runoob.com/w3cnote/nginx-proxy-balancing.html">Nginx 反向代理与负载均衡详解 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/464965616">深入理解 http 反向代理（nginx） - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/381967653">运维排查篇 | 访问nginx出现403错误 - 知乎 (zhihu.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1418457">终于有人把正向代理和反向代理解释的明明白白了！-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://blog.csdn.net/david_xtd/article/details/16967837">写给Web开发人员看的Nginx介绍_ngnix和服务器语言-CSDN博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
        <tag>网络</tag>
        <tag>Nginx</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>buttfly魔改记录</title>
    <url>/posts/290fb21d.html</url>
    <content><![CDATA[<blockquote>
<p>本文是本人魔改butterfly的记录，作为数据丢失或者出现bug找出问题的关键</p>
</blockquote>
<div class="note warning modern"><p>基于butterfly 4.11，hexo 7.0 ，npm 10.5.1  ，node  20.10.0 进行修改<br>请注意版本，以及发布时间进行查看</p>
</div>
<p>让我们开始吧</p>
<h2 id="先置"><a href="#先置" class="headerlink" title="先置"></a>先置</h2><p><strong>首先我们要先学会如何自定义引入 css 以及 js 文件</strong></p>
<p>在你的博客源目录下的<code>source</code>中建立文件夹css,js，在文件夹中可以存入你的自定义css文件 和 js文件</p>
<p>如果你放入你的自定义文件运行了以后发现博客没有变化，那么你并没有引入你的css文件和js文件。</p>
<p>在主题文件夹的_config.yml中的<code>inject</code>引入，如果是css文件则写在head下面，如果是js文件则写在bottom下，这样文件就会在生成静态文件后插入html文件的头/尾部分。</p>
<p>css 文件和js文件引入分为俩种，本地引入和网络cdn引入….本地引入的路径如下，以博客文件夹下的<code>source</code>文件夹为源目录来查找</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120317696.webp" alt="image-20240412031727598"></p>
<hr>
<h2 id="全站生效"><a href="#全站生效" class="headerlink" title="全站生效"></a>全站生效</h2><h3 id="字体、代码字体的修改"><a href="#字体、代码字体的修改" class="headerlink" title="字体、代码字体的修改"></a>字体、代码字体的修改</h3><details class="folding-tag" green><summary> 字体修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9%E5%89%8D.webp" alt="image-20240412023652811"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9%E5%90%8E.webp" alt="image-20240412023743061"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" red><summary> 代码字体修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120255886.webp" alt="image-20240412025525745"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120255834.webp" alt="image-20240412025550679"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<p>以下是修改方法，参考至<a href="https://www.imbhj.com/posts/25c13146/">Butterfly 如何优雅的改字体 | Ordis’Blog (imbhj.com)</a></p>
<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">本地引入</button><button type="button" class="tab " data-href="-2">cdn引入</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>在你的自定义css文件夹建立一个文件，并且下载好你的字体文件</p>
<p>并且如下输入代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;font-name&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;font-src&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;font-format&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><p><code>font-name</code>可自己定义</p>
</li>
<li><p><code>font-display</code>是当你的指定字体出现问题或没有加载时会切换其他字体以免出现奔溃无法访问现象</p>
</li>
<li><p><code>font-scr</code>是你的字体文件路径，可以是本地路径，也可以是网络路径</p>
</li>
<li><p><code>font-format</code>是根据你的字体文件格式来写，具体如下,主要用于浏览器识别，其中<code>woff</code>,<code>woff2</code>是专门针对网页而进行优化的格式</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;<span class="comment">/*声明一个名为iconfont的字体变量*/</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.svg#iconfont&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    在你的主题文件夹config.yml的inject中引入css文件，完成后在font：的<code>font-family</code>：后写入你在css文件中写的<code>font-name</code>，如此变大功告成了</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120354796.webp" alt="image-20240412035422706"></p>
<p>  如果想修改代码的字体，以上的步骤一致，只是在最后一步中修改为 <code>code-font-family</code>写入你的<code>font-name</code>….</p></div><div class="tab-item-content" id="-2"><p>找到你想引入的字体cdn链接，在主题文件夹的_config.yml文件内引入</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120357057.webp" alt="image-20240412035733965"></p>
<p>在cdn链接网址中找到<code>font-family</code>属性的值，如下图所示我的字体名为<code>LXGW WenKai Screen</code></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120359482.webp" alt="image-20240412035940079"></p>
<p>在主题文件夹的_config.yml中找到<code>font:</code>下的<code>font-family</code>填入这个值</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120354796.webp" alt="image-20240412035422706"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<div class="note danger simple"><p>在主题配置的<code>font-family</code>中你想要改变的字体后面建议放一个备用字体，以免没有成功加载前面的字体所导致的崩溃或bug</p>
</div>
<div class="note default simple"><p>本地引入的方式由于字体文件比较大的原因往往在网页加载的时候相比网络cdn引入下往往会慢上很多，很影响观感<br>建议使用网络cdn引入</p>
</div>
<div class="note primary modern"><p>本站使用的字体和博客字体分别为<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai / 霞鹜文楷</a> and <a href="https://github.com/githubnext/monaspace">monaspace</a></p>
</div>
<hr>
<h3 id="顶部图随机"><a href="#顶部图随机" class="headerlink" title="顶部图随机"></a>顶部图随机</h3><p>留个空</p>
<hr>
<h3 id="页脚修改"><a href="#页脚修改" class="headerlink" title="页脚修改"></a>页脚修改</h3><p>进入主题文件夹<code>themes\butterfly\layout\includes</code>找到<code>footer.pug</code>打开</p>
<p>这个时候的代码应该是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#footer-wrap</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> theme.footer.owner.enable</span><br><span class="line">    - var now = new Date()</span><br><span class="line">    - var nowYear = now.getFullYear()</span><br><span class="line">    <span class="keyword">if</span> theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">      .copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      .copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">  <span class="keyword">if</span> theme.footer.copyright</span><br><span class="line">    .framework-info</span><br><span class="line">      span= _p(<span class="string">&#x27;footer.framework&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      a(href=<span class="string">&#x27;https://hexo.io&#x27;</span>)= <span class="string">&#x27;Hexo&#x27;</span></span><br><span class="line">      span.footer-separator |</span><br><span class="line">      span= _p(<span class="string">&#x27;footer.theme&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      a(href=<span class="string">&#x27;https://github.com/jerryc127/hexo-theme-butterfly&#x27;</span>)= <span class="string">&#x27;Butterfly&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> theme.footer.custom_text</span><br><span class="line">    .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们把第一行外的代码全部缩进一格并加上这俩句<code>#footer_right</code>和<code>#footer_left</code>,此时我们将footer页脚分为俩个区间，一个左边一个右边</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#footer-wrap</span></span><br><span class="line">  <span class="comment">#footer_left</span></span><br><span class="line">    <span class="keyword">if</span> theme.footer.owner.enable</span><br><span class="line">      - var now = new Date()</span><br><span class="line">      - var nowYear = now.getFullYear()</span><br><span class="line">      <span class="keyword">if</span> theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">        .copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        .copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">    <span class="keyword">if</span> theme.footer.copyright</span><br><span class="line">      .framework-info</span><br><span class="line">        span= _p(<span class="string">&#x27;footer.framework&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">        a(href=<span class="string">&#x27;https://hexo.io&#x27;</span>)= <span class="string">&#x27;Hexo&#x27;</span></span><br><span class="line">        span.footer-separator |</span><br><span class="line">        span= _p(<span class="string">&#x27;footer.theme&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">        a(href=<span class="string">&#x27;https://github.com/jerryc127/hexo-theme-butterfly&#x27;</span>)= <span class="string">&#x27;Butterfly&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> theme.footer.custom_text</span><br><span class="line">      .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">  <span class="comment">#footer_right</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="主页相关"><a href="#主页相关" class="headerlink" title="主页相关"></a>主页相关</h2><hr>
<h3 id="自定义侧边栏"><a href="#自定义侧边栏" class="headerlink" title="自定义侧边栏"></a>自定义侧边栏</h3><hr>
<h4 id="添加随机诗词"><a href="#添加随机诗词" class="headerlink" title="添加随机诗词"></a>添加随机诗词</h4><p>数据调用于<a href="https://www.jinrishici.com/">今日诗词  (jinrishici.com)</a></p>
<p>留个空</p>
<hr>
<h2 id="文章页面相关"><a href="#文章页面相关" class="headerlink" title="文章页面相关"></a>文章页面相关</h2><hr>
<h3 id="阅读模式的背景色"><a href="#阅读模式的背景色" class="headerlink" title="阅读模式的背景色"></a>阅读模式的背景色</h3><blockquote>
<p>原版的阅读模式整个界面白花花的一片和夜间模式的黑乎乎一片，让我感觉空白处太多，看文章有些不够专注中央</p>
<p>所以我想修改一些背景颜色来突出文章内容</p>
</blockquote>
<details class="folding-tag" yellow><summary> 修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120413619.webp" alt="image-20240412041339379"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120415629.webp" alt="image-20240412041510387"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" black><summary> 黑夜模式修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120414023.webp" alt="image-20240412041443793"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120415105.webp" alt="image-20240412041532878"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" ><summary> 修改方法如下 </summary>
              <div class='content'>
              <p>修改方法如下</p><p>在<code>blog\themes\butterfly\source\css\_mode</code>中找到<code>readmode.styl</code>进行如下修改</p><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120427601.webp" alt="image-20240412042702480"></p><p>且下面找到如图并修改</p><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120428170.webp" alt="image-20240412042823056"></p><p>如此便可以定义你的阅读模式的界面了，如果想修改其他内容，则在这个文件内查找你想修改的内容</p>
              </div>
            </details>
<hr>
<h2 id="持续更新中……"><a href="#持续更新中……" class="headerlink" title="持续更新中……."></a>持续更新中…….</h2><h2 id="计划中"><a href="#计划中" class="headerlink" title="计划中"></a>计划中</h2><div class='checkbox red'><input type="checkbox" />
            <p>顶部图根据登录端不同进行随机</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>页脚</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>标签归档界面修改</p>
            </div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexobutterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>java的学习</title>
    <url>/posts/d7d7fe33.html</url>
    <content><![CDATA[<p>JAVA的学习</p>
<p>[toc]</p>
<h2 id="计算机相关知识"><a href="#计算机相关知识" class="headerlink" title="计算机相关知识"></a>计算机相关知识</h2><h3 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h3><ul>
<li>总线</li>
<li><ul>
<li>中央处理器(CPU)</li>
<li>内存（主存）</li>
<li>存储设备（如硬盘，u盘，光盘）</li>
<li>输入设备（键盘，鼠标等）</li>
<li>输出设备（显示器，打印机）</li>
<li>通信设备（调制解调器，网卡）</li>
</ul>
</li>
</ul>
<hr>
<h4 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h4><p>英文缩写cpu，是计算机的大脑，从内存中获取指令，然后执行这些命令。</p>
<p>其中有控制单元：用于控制和协调其他组件的动作<br>算数/逻辑单元：用于完成数值运算（<code>+-*/</code>）和逻辑运算（&gt;&lt;=）</p>
<p>计算机内有个内部时钟，以固定速度发射电子脉冲。时钟速度越快，在固定时间段内的执行指令就越多，速度的计量单位是赫兹（hz），一赫兹相当于每秒一个脉冲，目前的单位是以千兆赫(Ghz)来表述,电脑的频率一般为千兆赫GHZ</p>
<p>1khz=1024hz<br>1mhz=1024khz<br>1ghz=1024mhz</p>
<p>cpu的核是实现指令读取和执行的部分，一个多核cpu是以一个具有俩个或者更多独立核的组件。可提高cpu的处理能力</p>
<p>+++</p>
<h4 id="存储设备"><a href="#存储设备" class="headerlink" title="存储设备"></a>存储设备</h4><p>内存：内存的数据断电缺失</p>
<p>永久存储数据</p>
<p>磁盘驱动器：即磁盘/硬盘，光驱（CD，DVD），USB闪存驱动器（即U盘，通用串行总线），软驱AB盘</p>
<p>+++</p>
<h3 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h3><p>五大结构</p>
<ul>
<li><p>运算器</p>
<p>完成数据加工处理的加工器</p>
</li>
<li><p>控制器</p>
<p>控制程序执行的控制器</p>
</li>
<li><p>存储器</p>
<p>记忆程序和数据的存储器</p>
</li>
<li><p>输入设备</p>
<p>输入数据和程序的输入设备</p>
</li>
<li><p>输出设备</p>
<p>输出处理结果的输出设备</p>
</li>
</ul>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC.webp" alt="冯诺依曼"></p>
<p>+++</p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>计算机是一系列电路开关，0是关，1是开</p>
<p>一个0或者一个1是一个比特（bit），是计算机最小的存储单位。</p>
<p>计算机最基本的存储单元是字节（byte），每个字节由8个比特构成。单位是B<br>千字节(KB)=1024B<br>兆字节(MB)=1024KB<br>千兆字节(GB)=1024MB<br>万兆字节(TB)=1024GB</p>
<p>八个比特存储二进制的最高数是1024 ，所以存储单位进制是1024</p>
<p>内存（RAM） 由一个有序字节序列组成，用于存储程序及程序所需 的数据</p>
<p>cpu如果要调用硬盘 里的数据要优先让内存读取硬盘的数据，再有内存交付给cpu（目的是加快工作效率，硬盘慢CPU快，内存读取速度比硬盘快约10倍）</p>
<p>内存是带点存储，断电消失，容量有限，长期存储还得靠硬盘</p>
<p>内存在这一步起到的作用：</p>
<ol>
<li>保存从硬盘读取的数据，提供给cpu使用</li>
<li>保存cpu的一些临时处理结果，以便下次使用或保存到硬盘</li>
</ol>
<p>RAM最多，速度越快，但是有上限</p>
<p>+++</p>
<h4 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h4><p>鼠标、键盘</p>
<p>显示器、打印机</p>
<p>+++</p>
<h4 id="通信设备"><a href="#通信设备" class="headerlink" title="通信设备"></a>通信设备</h4><p>拨号调制解调器、DSL（数字用户线）、无线网络、网络接口卡、电缆调制解调器</p>
<p>+++</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>管理和控制计算机的活动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> |----------------------|</span><br><span class="line"> V						V</span><br><span class="line">用户&lt;----&gt;应用程序&lt;---&gt;操作系统&lt;------&gt;硬件</span><br></pre></td></tr></table></figure>
<p>操作系统的主要任务：</p>
<ul>
<li>控制和监视系统的活动</li>
<li>分配和调配系统资源</li>
<li>调度操作</li>
</ul>
<p>+++</p>
<h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>world wide web分为web客户端和web服务器程序。</p>
<p>www可以让web客户端（浏览器）访问web服务器的页面（网页）</p>
<p>URL统一资源定位符</p>
<p>URI统一资源标识符</p>
<p>超文本传输协议（Hypetext Transfer Protocol）<strong>http协议，https协议是具有安全性的ssl加密传输协议</strong></p>
<p>万维网包含于因特网，因特网包含于互联网</p>
<p>架构：<br>B/S<br>browser server  （通过浏览器访问服务器）</p>
<p>C/S<br>client  server（通过客户端访问服务器） </p>
<p>+++</p>
<h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><p>用win+R输出cmd调出命令提示符</p>
<p>切换盘</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">d</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\&gt;</span></span><br></pre></td></tr></table></figure>
<p>dir：列出当前目录下的所有文件及文件夹</p>
<p>md：创建目录</p>
<p>rd：删除目录</p>
<p>cd：进入指定目录</p>
<p>cd..：返回上一级目录</p>
<p>cd\：返回根目录</p>
<p>del：删除文件</p>
<p>exit： 退出dos命令行</p>
<p>+++</p>
<h4 id="创建目录-移动目录-列出目录实例"><a href="#创建目录-移动目录-列出目录实例" class="headerlink" title="创建目录/移动目录/列出目录实例"></a>创建目录/移动目录/列出目录实例</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">dir</span></span></span><br><span class="line"><span class="function"> 驱动器 <span class="title">C</span> 中的卷是 <span class="title">OS</span></span></span><br><span class="line"><span class="function"> 卷的序列号是 4805-<span class="title">CB1A</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span> 的目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          .</span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          ..</span></span><br><span class="line"><span class="function">2022/05/05  12:33    &lt;<span class="title">DIR</span>&gt;          .<span class="title">anaconda</span></span></span><br><span class="line"><span class="function">2022/05/25  22:09    &lt;<span class="title">DIR</span>&gt;          .<span class="title">android</span></span></span><br><span class="line"><span class="function">2022/04/21  12:31    &lt;<span class="title">DIR</span>&gt;          .<span class="title">cache</span></span></span><br><span class="line"><span class="function">2022/05/14  01:59    &lt;<span class="title">DIR</span>&gt;          .<span class="title">conda</span></span></span><br><span class="line"><span class="function">2022/05/05  12:35                25 .<span class="title">condarc</span></span></span><br><span class="line"><span class="function">2022/05/05  12:32    &lt;<span class="title">DIR</span>&gt;          .<span class="title">continuum</span></span></span><br><span class="line"><span class="function">2022/04/21  12:31    &lt;<span class="title">DIR</span>&gt;          .<span class="title">eclipse</span></span></span><br><span class="line"><span class="function">2022/05/14  01:44    &lt;<span class="title">DIR</span>&gt;          .<span class="title">idlerc</span></span></span><br><span class="line"><span class="function">2022/05/05  12:49    &lt;<span class="title">DIR</span>&gt;          .<span class="title">ipython</span></span></span><br><span class="line"><span class="function">2022/05/05  12:49    &lt;<span class="title">DIR</span>&gt;          .<span class="title">matplotlib</span></span></span><br><span class="line"><span class="function">2022/03/25  20:04    &lt;<span class="title">DIR</span>&gt;          .<span class="title">Origin</span></span></span><br><span class="line"><span class="function">2022/04/24  23:12    &lt;<span class="title">DIR</span>&gt;          .<span class="title">p2</span></span></span><br><span class="line"><span class="function">2022/05/14  02:08                27 .<span class="title">python_history</span></span></span><br><span class="line"><span class="function">2022/03/25  20:04    &lt;<span class="title">DIR</span>&gt;          .<span class="title">QtWebEngineProcess</span></span></span><br><span class="line"><span class="function">2022/04/23  17:45    &lt;<span class="title">DIR</span>&gt;          .<span class="title">redhat</span></span></span><br><span class="line"><span class="function">2022/05/14  01:58    &lt;<span class="title">DIR</span>&gt;          .<span class="title">spyder</span>-<span class="title">py3</span></span></span><br><span class="line"><span class="function">2022/01/11  13:22    &lt;<span class="title">DIR</span>&gt;          .<span class="title">vscode</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          3<span class="title">D</span> <span class="title">Objects</span></span></span><br><span class="line"><span class="function">2021/10/17  14:14    &lt;<span class="title">DIR</span>&gt;          <span class="title">ansel</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Contacts</span></span></span><br><span class="line"><span class="function">2022/04/14  13:25    &lt;<span class="title">DIR</span>&gt;          <span class="title">Creative</span> <span class="title">Cloud</span> <span class="title">Files</span></span></span><br><span class="line"><span class="function">2022/07/30  15:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Desktop</span></span></span><br><span class="line"><span class="function">2022/07/27  01:54    &lt;<span class="title">DIR</span>&gt;          <span class="title">Documents</span></span></span><br><span class="line"><span class="function">2022/05/28  19:50    &lt;<span class="title">DIR</span>&gt;          <span class="title">Downloads</span></span></span><br><span class="line"><span class="function">2022/04/21  12:23    &lt;<span class="title">DIR</span>&gt;          <span class="title">eclipse</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Favorites</span></span></span><br><span class="line"><span class="function">2022/05/05  12:50    &lt;<span class="title">DIR</span>&gt;          <span class="title">Jedi</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Links</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Music</span></span></span><br><span class="line"><span class="function">2022/08/01  17:45    &lt;<span class="title">DIR</span>&gt;          <span class="title">OneDrive</span></span></span><br><span class="line"><span class="function">2022/04/25  00:24    &lt;<span class="title">DIR</span>&gt;          <span class="title">Pictures</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Saved</span> <span class="title">Games</span></span></span><br><span class="line"><span class="function">2021/10/15  20:38    &lt;<span class="title">DIR</span>&gt;          <span class="title">Searches</span></span></span><br><span class="line"><span class="function">2021/10/22  14:53    &lt;<span class="title">DIR</span>&gt;          <span class="title">source</span></span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          <span class="title">Videos</span></span></span><br><span class="line"><span class="function">2022/05/11  16:14    &lt;<span class="title">DIR</span>&gt;          编程</span></span><br><span class="line"><span class="function">               2 个文件             52 字节</span></span><br><span class="line"><span class="function">              36 个目录 30,808,530,944 可用字节</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">md</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">hello.java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">class2</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span> <span class="title">class2</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class2</span>&gt;<span class="title">cd</span> ..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span>\</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801224825370.png" alt="image-20220801224825370"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801224845030.png" alt="image-20220801224845030"></p>
<p>+++</p>
<h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">echo</span> <span class="title">hello</span>,<span class="title">my</span> <span class="title">name</span> <span class="title">is</span> 66&gt;1.<span class="title">txt</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801225749867.png" alt="image-20220801225749867"></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">echo</span> <span class="title">hello</span>,<span class="title">my</span> <span class="title">name</span> <span class="title">is</span> <span class="title">xingtong</span>&gt;1.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801225845111.png" alt="image-20220801225845111"></p>
<p>echo指令是替代文件内容到某个文件，若无文件则创建，若存在则替代</p>
<p>+++</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">del</span> 1.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230251871.png" alt="image-20220801230251871"></p>
<p>+++</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用del可以删除文件</p>
<p>如果想批量删除一个格式的文件,如图所示有很多txt格式的文件</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230502053.png" alt="image-20220801230502053"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Yee\java&gt;del *.txt</span><br><span class="line">//*类似sql的*</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230552004.png" alt="image-20220801230552004"></p>
<p>+++</p>
<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">hello.java</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801231123355.png" alt="image-20220801231123355"></p>
<font size=5 color=red >当目录不为空，不允许删除</font>

<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span>..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">rd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function">目录不是空的。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<font size=5 color=red>当文件夹不为空又想删除时，在上一级目录使用del进行删除所有文件，再删除目录</font>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Yee&gt;cd java</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java&gt;cd class1</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java\class1&gt;echo hello,world&gt;1.docx</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java\class1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801231706768.png" alt="image-20220801231706768"></p>
<p>此时我的class1目录下的文件不为空</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class1</span>&gt;<span class="title">cd</span>..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function">目录不是空的。</span></span><br></pre></td></tr></table></figure>
<p>提示我不能删除</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">del</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class1</span>\*, 是否确认(<span class="title">Y</span>/<span class="title">N</span>)? <span class="title">Y</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801232037632.png" alt="image-20220801232037632"></p>
<p>就能删除了</p>
<p>+++</p>
<h2 id="浅识JAVA"><a href="#浅识JAVA" class="headerlink" title="浅识JAVA"></a>浅识JAVA</h2><p>  人机交互方式</p>
<p>图形化界面（GUI）、命令行方式（CLI）</p>
<p>JAVASE   标准版   支持面向桌面型应用</p>
<p>JAVAEE   企业版    开发企业环境下的应用程序解决方案针对Web应用程序开发</p>
<p>JAVAME  小型版    支持JAVA移动端的平台</p>
<p>JAVA Card    支持java小程序</p>
<p>+++</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>三大特征：封装，多态，继承</p>
<p>基本概念：类，对象</p>
<p>+++</p>
<h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>吸收C/C++的特点，去掉C/C++的一些容易弄错的点，例如指针、内存申请与释放，多继承等等，提供一个相对安全的内存管理和访问机制</p>
<p>+++</p>
<h3 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h3><p>由于java程序的特点，使用虚拟机（JVM）运行，可以在多个平台（windows，linux等等）上运行同一个java程序。</p>
<p>+++</p>
<h3 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h3><p>java虚拟机：JVM</p>
<p>垃圾收集机制</p>
<p>+++</p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>java开发工具包，其中包括JAVA开发工具和jre，开发工具包含：编译工具（javac.exe）和打包工具(jar.exe)等</p>
<p>+++</p>
<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>包括java虚拟机(JVM)和JAVA程序的核心类库，想运行JAVA程序只需要有JRE就好</p>
<p>+++</p>
<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>java运行的环境，虚拟机</p>
<p>+++</p>
<h3 id="用命令行运行java程序"><a href="#用命令行运行java程序" class="headerlink" title="用命令行运行java程序"></a>用命令行运行java程序</h3><p>用记事本写好一个java程序，修改后缀为java</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220802192446930.png" alt="image-20220802192446930"></p>
<p>在cmd里实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编译</span></span><br><span class="line">C:\Users\Yee\java\class2&gt;javac hello.java</span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line">C:\Users\Yee\java\class2&gt;java hello</span><br><span class="line">hello,world</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>与c/c++一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是文档注释</span></span><br><span class="line"><span class="comment">会被java内置的jdk提供的javadoc解析，生成一套以网页形式体现的该程序的说明文档</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>以下是大概的使用方法概述</p>
<p>首先先写一个java程序，里面包含文档注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">@author</span> yxq</span></span><br><span class="line"><span class="comment"> <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> 测试文档的用法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要设置环境变量jdk才能通过命令行打开javadoc</p>
<p>小技巧，在需要打开cmd的路径前加上cmd和空格点回车打开的cmd就是当前目录下的cmd</p>
<p>或者直接在目录上输入cmd打开的cmd也是目录下的cmd</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803151328647.png" alt="image-20220803151328647"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//命令行语句（尚硅谷讲的是）</span></span><br><span class="line">javadoc -d  建立一个新文件夹的文件夹名  -author -version java文件名</span><br><span class="line"><span class="comment">//csdn查的资料是</span></span><br><span class="line">javadoc -encoding UTF-<span class="number">8</span> -charset UTF-<span class="number">8</span> Doc.java</span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>也可以用idea等编译器生成文档</p>
<p>这里是idea的生成文档使用方法</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803152220242.png" alt="image-20220803152220242"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803152356217.png" alt="image-20220803152356217"></p>
<p>遇到了几个问题javadoc:错误 - 无法读取 Input lenght=1 </p>
<p>不能生成文档，是因为不能存在中文路径名。换成英文就可以了。</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803153330401.png" alt="image-20220803153330401"></p>
<p>这样就能生成使用文档了</p>
<p>+++</p>
<h3 id="java-api-文档"><a href="#java-api-文档" class="headerlink" title="java     api   文档"></a>java     api   文档</h3><p>api 是接口</p>
<p>讲解了各个类名使用方法</p>
<p>+++</p>
<h3 id="程序编写注意事项"><a href="#程序编写注意事项" class="headerlink" title="程序编写注意事项"></a>程序编写注意事项</h3><p>一个java文件中，可以有多个class</p>
<p>但是只能有一个public class </p>
<p>并且public class 后面的类名与文件名相同</p>
<p>程序的入口是main()方法格式 是固定的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//args 是一个单词的缩写arguments 参数  可变</span></span><br><span class="line"><span class="comment">//即</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可运行</span></span><br><span class="line"><span class="comment">//中括号可以变</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String  a[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可运行</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>编译后会生成一个或多个字节码文件，文件名与数量与java文件的class名字数量相同。</p>
<p>+++</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>+++</p>
<h3 id="关键字保留字"><a href="#关键字保留字" class="headerlink" title="关键字保留字"></a>关键字保留字</h3><p>关键字：由java语言赋予特殊功能的单词或者字符串</p>
<p>保留字：现版本Java未使用，但以后的版本可能会使用，尽量避开使用例如goto、const</p>
<p>+++</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量、方法、类，接口，包命名时使用的字符序列称为标识符（只要是能命名的都是标识符）</p>
<p>定义规则：由26个字母大小写，0-9  十个数字，_下划线,$，组成</p>
<p>注意：</p>
<ul>
<li>数字不可以开头</li>
<li>不能使用关键字和保留字，可以包含关键字例如int是关键字不能使用，int_1可以使用</li>
<li>java区分大小写，长度无限制</li>
<li><p>标识符不能包含空格</p>
</li>
<li><p>标识符可以为中文，但是尽量不用，以免造成编码不一致等等问题</p>
</li>
</ul>
<p>+++</p>
<p>命名规范（不是强制要求，只是建议，增强代码可读性）</p>
<ul>
<li>包名多单词组成时全小写，不同单词用__链接例如:     java_start_day1</li>
<li>类名、接口名：多单词组成时，首字母大写:   JavaStartDay1</li>
<li>变量名、方法名：多单词组成，第一个单词小写首字母，后面的单词首字母大写 ：javaStartDay1</li>
<li>常量名:所有字母大写，用下划线连接：JAVA_START_DAY1</li>
</ul>
<p>+++</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量存在于内存中一个存储区域</p>
<p>该区域的数据在同一类型范围内不断变化</p>
<p>变量是程序中最基本的存储单元，包含变量类型、变量名、存储的值</p>
<p>变量用于在内存中保存数据</p>
<p>变量必须先声明后使用</p>
<p>用变量名访问这块区域的数据</p>
<p>变量的作用域一般为所定义的{}内</p>
<p>变量在作用域中才可生效</p>
<p>同一个作用域中，不可以定义重名的变量 </p>
<p>+++</p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>+++</p>
<p>基本数据类型</p>
<p>整形：byte、short、int、long</p>
<p>浮点型：float、double</p>
<p>字符型：char</p>
<p>布尔型：boolean</p>
<p>+++</p>
<p>引用数据类型</p>
<p>类（class）、接口（interface）、数组（array）</p>
<p>+++</p>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>8bit位(1byte)</td>
<td><code>-128~127</code>即-2^7^<code>~</code>2^7^-1</td>
</tr>
<tr>
<td>short</td>
<td>16bit位(2byte)</td>
<td><code>-32768~32767</code>即-2^15^~2^15^-1</td>
</tr>
<tr>
<td>int</td>
<td>32bit(4byte)</td>
<td><code>-2147483648~2147483647</code>即-2^31^~2^31^-1</td>
</tr>
<tr>
<td>long</td>
<td>64bit(8byte)</td>
<td><code>-9223372036854775808~9223372036854775807</code>即-2^63^~2^63^-1</td>
</tr>
<tr>
<td>char</td>
<td>16bit</td>
<td><code>&#39;\u0000&#39;~&#39;\uffff&#39;</code>即0~65535</td>
</tr>
</tbody>
</table>
</div>
<p>赋值long的时候需要在末尾加一个L或l</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long a=23123213L;</span><br><span class="line">long b=231232131l;                                                                                       </span><br><span class="line">int c=2313;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>单精度float,精确到小数点后7位数</p>
<p>双精度double，精度是float的俩倍</p>
<p>浮点型由两种表达方式</p>
<p>十进制：4.23      42.33f     3.00</p>
<p>科学计数法：2.19e4   4.44E5   100e-2</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4byte</td>
<td>-3.403E38~3.403E38</td>
</tr>
<tr>
<td>double</td>
<td>8byte</td>
<td>-1.798E308~1.798E308</td>
</tr>
</tbody>
</table>
</div>
<p>java定义浮点型默认为double，声名float型常量则需要在后面加==f或F==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> a=<span class="number">5.32f</span>;</span><br><span class="line"><span class="type">float</span> b=<span class="number">4.55F</span>;</span><br><span class="line"><span class="type">double</span> c=<span class="number">3.45</span>;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>char  1字符=2字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义char型变量，用&#x27;&#x27;；</span></span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//一个char只能存储一个字符</span></span><br><span class="line"><span class="type">char</span> cc=<span class="string">&#x27;ab&#x27;</span>;<span class="comment">//错误</span></span><br><span class="line"><span class="comment">//可以输入中文或者数字或者其他国家语言</span></span><br><span class="line"><span class="type">char</span> ccc=<span class="string">&#x27;啊&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c2=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="comment">//也可以存储一个符号,包括转义子符</span></span><br><span class="line"><span class="type">char</span> c3=<span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c4=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">//可以用unicode</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;\u0043&#x27;</span>;<span class="comment">//是C</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\ddd</td>
<td>1~3位八进制数表示的字符</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>1~4位十六进制表示的字符</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号’</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号”</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠\</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>走纸换页</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符tab键</td>
</tr>
</tbody>
</table>
</div>
<p>+++</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>boolean只有两个值==true和false==,即真与否</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> a=<span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> b=flase;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>自动类型提升</p>
<p>范围小的和范围大的相运算，应用范围大的类型接收结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">223</span>;</span><br><span class="line"><span class="type">byte</span> c=a+b;<span class="comment">//错误</span></span><br><span class="line"><span class="type">int</span> c=a+b;<span class="comment">//正确</span></span><br><span class="line"><span class="type">long</span> c=a+b;<span class="comment">//正确</span></span><br><span class="line"><span class="type">double</span> c=a+b;</span><br><span class="line">c=<span class="number">235.0</span></span><br><span class="line"><span class="comment">//而整型与浮点型运算都自动提升到浮点型</span></span><br><span class="line"><span class="comment">//char 与整型运算</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> a1=a+c;<span class="comment">//a1=98</span></span><br><span class="line"><span class="comment">//当char   byte    short   三个类型进行运算时，自动转化为int型</span></span><br><span class="line"><span class="type">byte</span> aa=<span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> a2=<span class="number">32</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//无论byte、short、char三种运算最后的结果由byte、short、char接收都不会成功</span></span><br><span class="line"><span class="type">byte</span>、<span class="type">char</span>、<span class="type">short</span>-&gt;<span class="type">int</span> -&gt;<span class="type">long</span>-&gt;<span class="type">float</span>-&gt;<span class="type">double</span></span><br><span class="line"><span class="comment">//高等级转化到低等级会出错</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>强制类型转换</p>
<p>byte、short、char运算时该怎么办呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> b=<span class="number">33</span>;</span><br><span class="line"><span class="type">short</span> c=a+b;<span class="comment">//错误</span></span><br><span class="line"><span class="type">short</span> c= (<span class="type">short</span>) (a+b);<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//强制转换会造成精度损失</span></span><br><span class="line"><span class="comment">//浮点型变为整数型损失小数部分</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> b=(<span class="type">int</span>)a;<span class="comment">//b=12</span></span><br><span class="line"><span class="comment">//超过数的精度时</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> b=(<span class="type">byte</span>)i;b=-<span class="number">128</span><span class="comment">//与二进制存储有关</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>当long型定义时忘记写L时，会认为定义是int型，自动提升为long型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> l1=<span class="number">123213</span>;</span><br><span class="line"><span class="type">long</span> l2=<span class="number">22312312312312312111</span>;<span class="comment">//会报错，int型不允许这么长的变量存在，所以也就没了转化为long型的可能性</span></span><br><span class="line"><span class="comment">//同理，float型也是</span></span><br><span class="line"><span class="type">float</span> f1=<span class="number">12.3</span>;<span class="comment">//错误，默认为double，向下转换类型时失败，不允许向下自转</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>整型常量默认int，浮点型默认double</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> b=<span class="number">12</span>;</span><br><span class="line"><span class="type">byte</span> b1=b+<span class="number">1</span>;<span class="comment">//编译出错，因为，1默认int型，导致b自动提升为int型，不能自动转化会byte，导致出错</span></span><br><span class="line"><span class="type">float</span> a=<span class="number">1.23f</span>;</span><br><span class="line"><span class="type">float</span> b=a+<span class="number">1.1</span>;<span class="comment">//出错，理由同上。</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><p>引用数据类型，不算基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明String</span></span><br><span class="line">String ch=<span class="string">&quot;1231232你好那&quot;</span>;</span><br><span class="line"><span class="comment">//使用双引号，字符串。</span></span><br><span class="line"><span class="comment">//String可以和八种基本类型做运算，即连接运算</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">99999</span>;</span><br><span class="line">String b=<span class="string">&quot;你好，&quot;</span>;</span><br><span class="line">String c=a+b;<span class="comment">//c=&quot;你好，99999&quot;</span></span><br><span class="line"><span class="comment">//其他逻辑、浮点型，布尔型等等都可以连接,以String型接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="type">char</span> ch=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">String str=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(ch+num+str);<span class="comment">//107hello</span></span><br><span class="line">System.out.println(ch+str+num);<span class="comment">//ahello10</span></span><br><span class="line">System.out.println(ch+(num+str));<span class="comment">//ahello10</span></span><br><span class="line">System.out.println((ch+num)+str);<span class="comment">//107hello</span></span><br><span class="line">System.out.println(str+num+ch);<span class="comment">//hello10a</span></span><br><span class="line"><span class="comment">//string和多种数据类型计算时是根据左到右的顺序计算</span></span><br><span class="line"><span class="comment">//只要遇到string，后面的都是string连接了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x27;a&#x27;+&#x27;b&#x27;+&#x27;c&#x27;和&quot;a&quot;+&#x27;b&#x27;+&#x27;c&#x27;不一样,字符型加号是做运算，字符串加号是连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String 转化为int型的方法为</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span>  Integer.parseInt(str1);</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>计算机常用八进制，二进制，十六进制，十进制。</p>
<p>二进制   0b   0B   开头</p>
<p>八进制   0o   0O 开头</p>
<p>十六进制  0x   0X   开头   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">0b1100</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">1100</span>; <span class="comment">//十进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> 0o127;<span class="comment">//八进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">0x1100</span>;<span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure>
<p>计算机内最高位    0正数    1负数</p>
<p>计算机底层以补码的方式存储数据！</p>
<p>二进制转八进制，三位二进制数看成一位八进制数范围0-7，八进制转二进制，每一个数字转为三位二进制数字拼接</p>
<p>二进制于十六进制转换也是如此</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">二进制 <span class="number">000</span> <span class="number">101</span> <span class="number">111</span></span><br><span class="line">八进制  <span class="number">0</span>   <span class="number">5</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span></span><br><span class="line">   </span><br><span class="line">-</span><br><span class="line"><span class="number">2</span>-<span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">*</span><br><span class="line"><span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span></span><br><span class="line">/</span><br><span class="line"><span class="number">40</span>/<span class="number">8</span>=<span class="number">5</span></span><br><span class="line"><span class="number">41</span>/<span class="number">8</span>=<span class="number">5</span><span class="comment">//自动转int取整    </span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41</span>/<span class="number">8</span>;<span class="comment">//a=5.0</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41</span>/(<span class="type">double</span>)<span class="number">8</span>;<span class="comment">//5.125</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41.0</span>/<span class="number">8</span>;<span class="comment">//5.125</span></span><br><span class="line">%</span><br><span class="line"><span class="number">41</span>%<span class="number">8</span>=<span class="number">1</span></span><br><span class="line">-<span class="number">41</span>%<span class="number">8</span>=-<span class="number">1</span></span><br><span class="line"><span class="number">41</span>%-<span class="number">8</span>=<span class="number">1</span></span><br><span class="line">-<span class="number">41</span>%-<span class="number">8</span>=-<span class="number">1</span></span><br><span class="line"><span class="comment">//被模数符号决定了    </span></span><br><span class="line">++</span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line">x=++i;<span class="comment">//x=2</span></span><br><span class="line">y=i++；<span class="comment">//y=1</span></span><br><span class="line">运算符在前面的先运算在赋值</span><br><span class="line">运算符在后面则先赋值再运算</span><br><span class="line">--</span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line">x=--i;<span class="comment">//x=0</span></span><br><span class="line">y=i--；<span class="comment">//y=1</span></span><br><span class="line"><span class="comment">//自增自减的时候不会自动转化为int型，即不改变变量本身数据类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td><code>赋值,a=3,c=b=6;</code></td>
</tr>
<tr>
<td><code>+=</code></td>
<td><code>a+=4同a=a+4</code></td>
</tr>
<tr>
<td><code>-=</code></td>
<td><code>a-=4同a=a-4</code></td>
</tr>
<tr>
<td><code>/=</code></td>
<td><code>a/=4同a=a/4</code></td>
</tr>
<tr>
<td><code>%=</code></td>
<td><code>a%=4同a=a%4</code></td>
</tr>
<tr>
<td><code>*=</code></td>
<td><code>a*=4同a=a*4</code></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>注意，a+=5与a=a+5,不同点，前者不会改变数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//即</span></span><br><span class="line"><span class="type">short</span> a=<span class="number">5</span>;</span><br><span class="line">a+=<span class="number">5</span>;<span class="comment">//不会出错</span></span><br><span class="line">a=a+<span class="number">5</span>;<span class="comment">//a会先转int型，导致不能转化更小级别的short，出错</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>运算</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==</code></td>
<td>等于</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
<tr>
<td><code>instanceof</code></td>
<td>检查是否属于对象”hello” instanceof String   返回true</td>
</tr>
</tbody>
</table>
</div>
<p>运算结果均为布尔型</p>
<p>+++</p>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>短路与</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
<td>逻辑或</td>
</tr>
<tr>
<td>`</td>
<td></td>
<td>`</td>
<td>短路或</td>
</tr>
<tr>
<td><code>^</code></td>
<td>异或</td>
</tr>
<tr>
<td><code>!</code></td>
<td>非</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp;与&amp;&amp; 的区别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> a1=<span class="literal">false</span>,a2=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>,num2=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(a1&amp;(num1++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a2&amp;&amp;(num2++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//num1 = 11</span></span><br><span class="line"><span class="comment">//num2 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与和短路与的区别就在这里，当前面的判断有一个为false时，短路与  后面的语句不会运算，逻辑与   会继续运算</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  |   与   ||   的区别</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> a1=<span class="literal">true</span>,a2=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>,num2=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(a1|(num1++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a2||(num2++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num1 = 11</span></span><br><span class="line"><span class="comment">//num2 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//短路或在获得一个true条件时，不会继续后面的运算，而逻辑或会继续运算</span></span><br></pre></td></tr></table></figure>
<p>短路与和短路或效率稍微高一些</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>a&amp;b</th>
<th>a&amp;&amp;b</th>
<th>`a</th>
<th>b`</th>
<th>`a</th>
<th></th>
<th>b`</th>
<th><code>!a</code></th>
<th><code>b^a</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
</tbody>
</table>
</div>
<p>异或：先取反，在判断是否或</p>
<p>+++</p>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">位运算符</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:left">异或，两个二进制数中位数相同为0，不相同为1</td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:left">`</td>
<td>或，返回两位数都为0的值，否则返回1</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:left">取反，把二进制数的0变为1，1变为0</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;&gt;</code></td>
<td style="text-align:left">右移，a&gt;&gt;n,把a的二进制数向右移动n位，相当于a=a//2^n^，可以做除法,当a&gt;&gt;1的时候相当于a//2</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;</code></td>
<td style="text-align:left">左移，a&lt;&lt;n,把a的二进制数向左移动n位，相当于a=a<code>*</code>2^n^，可以做除法,当a&lt;&lt;1的时候相当于a<code>*</code>2</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:left">与，返回两位二进制数都为1 的部分，可以判断奇偶，例3&amp;1=1，2&amp;1=0，1的二进制是01，2是10，3是11，1&amp;3即01与11都为1 的数是个位的1，2&amp;1没有相同位数上的1，即为0，通过这样的方式判断奇偶</td>
</tr>
</tbody>
</table>
</div>
<p>这里是异或的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/位运算的异或.png"/></p>
<p>这里是或的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/位运算的或.png"/></p>
<p>这里是取反示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%96%E5%8F%8D.png" alt="位运算取反"></p>
<p>这里是左移与右移</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B7%A6%E7%A7%BB%E5%8F%B3%E7%A7%BB.png" alt="位运算左移右移"></p>
<p>这里是与的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E4%B8%8E&amp;.png" alt="位运算的与&amp;"></p>
<blockquote>
<p>补充：右移时，如果是负数，用1补左边，正数用0补前面</p>
<p><code>&gt;&gt;&gt;</code>无符号右移，无论正数负数都是左边补0</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//位运算的一些小用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 交换值</span></span><br><span class="line"><span class="type">int</span> num1=<span class="number">1</span>,num2=<span class="number">2</span>;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p> 格式：条件表达式 ?  表达式1:表达式2</p>
<p>符合条件表达式进入表达式1，否则进入表达式2</p>
<p>类似： if (条件表达式){<br>    表达式1<br>}else{<br>    表达式2<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">99</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (num1+<span class="number">1</span>&gt;=<span class="number">100</span>)?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">99</span>;</span><br><span class="line">        String str ;</span><br><span class="line">        <span class="keyword">if</span>(num1+<span class="number">1</span>&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">            str = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            str = <span class="string">&quot;no&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表达式有数据类型要求，字符串和整型不能同时满足</p>
<p>故三元运算可以转化 if-else  结构  但是   if_else 结构 不一定可以转化三元运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">(n&gt;m)?<span class="string">&quot;m大&quot;</span>:<span class="number">55</span>;<span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>
<p>三元运算可以嵌套使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">in</span> <span class="operator">=</span> ( n &gt; m)  ? <span class="string">&quot;n大&quot;</span> : ( ( n &lt; m) ? <span class="string">&quot;m大&quot;</span> : <span class="string">&quot;一样大&quot;</span> ) ;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>三元运算、单目运算，赋值运算是从右往左运算的，其他都是从左往右运算</p>
<p>+++</p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制 大体可以分为  顺序结构，分支结构和循环结构</p>
<p>+++</p>
<h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>顺序结构 即按照顺序从上往下一步一步地执行语句</p>
<p>+++</p>
<h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><h5 id="if-else分支"><a href="#if-else分支" class="headerlink" title="if-else分支"></a>if-else分支</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">a</span>  <span class="operator">=</span>  <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    若为 <span class="literal">false</span> 执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分支可以嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        <span class="keyword">if</span>(判断语句<span class="number">2</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">if</span>(判断语句<span class="number">3</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            若为  <span class="literal">false</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断语句<span class="number">5</span>)&#123;</span><br><span class="line">    若为 <span class="literal">false</span> 执行语句</span><br><span class="line">        <span class="keyword">if</span>(判断语句<span class="number">4</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            若为  <span class="literal">false</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断语句<span class="number">6</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中default可以省略，作为不满足所有case条件的补充</span></span><br><span class="line"><span class="comment">//再有，case条件内若无break，执行完结构语句则玩下继续执行下一个内容</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        结构<span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        结构<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即表达式是1，进入case1，执行结构1，此时无case，继续执行结构2，遇到break，退出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        结构<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        结构<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="comment">//若为这个情况，表达式值为1，则执行结构1遇到则退出</span></span><br></pre></td></tr></table></figure>
<p>switch结构表达式的值为   int 、byte 、 short 、 char 、 枚举类型（jdk1.5新增）、 String（jdk1.7新增）</p>
<p>default可以不放在末尾，运行会查看满不满足case，不满族进入default，运算后检测若无break，则继续往下运行。</p>
<p>+++</p>
<h5 id="另一种switch结构"><a href="#另一种switch结构" class="headerlink" title="另一种switch结构"></a>另一种switch结构</h5><p>在写代码的过程中使用switch结构，当忘记了break的书写，稍稍不留心就会出大茬子，在jdk12之中引入了一种新的switch结构，可以不需要break就可以实现结束switch结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(n*<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(n);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;不是1也不是2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">&gt;&gt;<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;<span class="number">3</span></span><br><span class="line">不是<span class="number">1</span>也不是<span class="number">2</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，当case里有许多语句时，需要用括号括起来，不加括号会报错</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(n*<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                System.out.println(n);</span><br><span class="line">                System.out.println(<span class="string">&quot;这是2&quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;不是1也不是2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//新的switch语法可以返回值</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> x=<span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; n*<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; n+<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="number">0</span>;</span><br><span class="line">        &#125;;<span class="comment">//注意这里需要分号结尾</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的x接收了switch返回的值。</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>+++</p>
<h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始表达式[可省略，放置循环体外]:迭代条件[不可省略，为布尔值，为<span class="literal">true</span>运行，<span class="literal">false</span>退出循环]:迭代表达式[可省略，放置循环体内])&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125;</span><br><span class="line">与c语言相同</span><br><span class="line"><span class="comment">//迭代条件可以为空，可以省略，会导致死循环，需要设置break。    </span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件[布尔值，<span class="literal">true</span>进入循环，<span class="literal">false</span>退出])&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="do…-while循环"><a href="#do…-while循环" class="headerlink" title="do….while循环"></a>do….while循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	循环体;    </span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件[布尔值，<span class="literal">true</span>进入循环，<span class="literal">false</span>退出]);</span><br><span class="line"><span class="comment">//do...while 循环与while循环的差距是while循环进入时判断条件是否为true，是进入循环，false则退出循环。</span></span><br><span class="line"><span class="comment">//do...while循环不论条件是否为false，都会进行一次循环，再判断条件是否成立选择退出还是继续循环</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<ul>
<li><p>循环语句的条件判断可以是true</p>
</li>
<li><p>在循环语句里设置break可以跳出循环，可以搭配if条件选择使用。</p>
</li>
<li>循环可以嵌套使用，多使用一层循环会导致计算时间大幅度上升，慎用多级嵌套</li>
<li></li>
</ul>
<p>++++</p>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>从输入设备输入数据是需要使用Scanner对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//也可以使用    import  java.util.*     使用所有java的util包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scannertest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Scanner对象实例化</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//oo即为实例化的Scanner对象</span></span><br><span class="line">        <span class="comment">//Scanner对象的方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> oo.nextInt();<span class="comment">//nextInt 是指接收数字</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">panduan</span> <span class="operator">=</span> in.nextBoolean();</span><br><span class="line"></span><br><span class="line">Scanner未定义接收<span class="type">char</span>型，可以使用next()接收一个字符串再取第一个字符的方式接收<span class="type">char</span>型</span><br><span class="line"><span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> in.next();</span><br><span class="line"><span class="type">char</span> <span class="variable">sex_1</span> <span class="operator">=</span> sex.charAt(<span class="number">0</span>);<span class="comment">//此处为0指取出在索引零位存储位置的字符</span></span><br><span class="line"><span class="comment">//这样我们就能输入char字符型变量了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入格式与接收格式需要一致，若不一致如果不能向上提升数据类型会报错。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>输出格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print();<span class="comment">//输出一行内容，不换行</span></span><br><span class="line">System.out.println();<span class="comment">//相对于上面的格式会输出完自动换行</span></span><br><span class="line">System.out.printf();<span class="comment">//格式化输出，具体同c语言</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">36</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(name+<span class="string">&quot;今年&quot;</span>+num+<span class="string">&quot;岁了&quot;</span>);</span><br><span class="line"><span class="comment">//小明今年36岁了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num_2</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">System.out.println(num+num_2+name);</span><br><span class="line"><span class="comment">//48小明</span></span><br><span class="line">System.out.println(name+num+num_2);</span><br><span class="line"><span class="comment">//小明3612</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;%s今年%d岁了&quot;</span>,name,num);</span><br><span class="line"><span class="comment">//小明今年36岁了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//format格式化输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>format输出</p>
<p>字符串中用format函数进行精度输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;&#125;，小名是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是kiko，小名是suki</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;1&#125;，小名是&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是suki，小名是kiko</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;0&#125;，小名是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是kiko，小名是suki</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;0&#125;，小名是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="number">6666</span>))</span><br><span class="line">我的名字是kiko，小名是<span class="number">6666</span></span><br><span class="line"><span class="comment">#以上是简单的位置输出格式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>format是一个使用起来十分强大的格式控制</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/py输出.png"/></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#冒号前面的数字是后面的字符串数字</span></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;&#123;:_^25&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">___________张三____________</span><br><span class="line"><span class="comment">#其中25 是总共输出的长度，而25前的‘^’是对其方式，在填充方式前的是当输出内容少 ，不足以填满长度而填充的字符</span></span><br><span class="line"><span class="comment">#如果不指明填充的字符，则默认空格</span></span><br><span class="line"><span class="comment">#千分位例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;0:*&gt;25,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">9876543210</span>))</span><br><span class="line">************<span class="number">9</span>,<span class="number">876</span>,<span class="number">543</span>,<span class="number">210</span></span><br><span class="line"><span class="comment">#每隔三个数字添加一个‘，’</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;0:0&gt;25,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">9876543210</span>))</span><br><span class="line">0000000000009,<span class="number">876</span>,<span class="number">543</span>,<span class="number">210</span></span><br><span class="line"><span class="comment">#精度例子</span></span><br><span class="line"><span class="comment">#如果要求保留俩位小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>qq=<span class="number">0.12333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>.<span class="built_in">format</span>(qq))</span><br><span class="line"><span class="number">0.12</span></span><br><span class="line"><span class="comment">#不过在整数部分变成非零后我不知道为什么会变成科学计数法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>qq=<span class="number">231.123214</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>.<span class="built_in">format</span>(qq))</span><br><span class="line"><span class="number">2.3e+02</span></span><br><span class="line"><span class="comment">#修改输出类型</span></span><br><span class="line"><span class="comment">#和c语言差不多的，b表示二进制，c表示字符，d表示整数型，o表示八进制，x表示十六进制</span></span><br><span class="line"><span class="comment">#X是十六进制X大写，E和e是科学计数法表示浮点数的大小写e，f是标准浮点数输出</span></span><br><span class="line"><span class="comment">#%表示百分比输出浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">1100100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:c&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line">d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:d&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:o&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">31202</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">79E2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">79e2</span></span><br><span class="line"><span class="comment">#以下是浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">2.4223</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:e&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300e+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:E&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300E+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:f&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:%&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">242.230000</span>%</span><br></pre></td></tr></table></figure>
<p>format函数的另外一个输出方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是f-string输出方法</span></span><br><span class="line">&gt;&gt;&gt;name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">&gt;&gt;&gt;age=<span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">f&quot;我是 <span class="subst">&#123;name&#125;</span> ，我今年 <span class="subst">&#123;age&#125;</span> 岁&quot;</span>)</span><br><span class="line">我是 张三 ，我今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:-^<span class="number">25</span>&#125;</span>&quot;</span>)</span><br><span class="line">-----------张三------------</span><br><span class="line"><span class="comment">#输出的方式余format差不多，唯一的区别是f-string的方法不需要在后面使用format函数。</span></span><br><span class="line"><span class="comment">#直接在输出时候填入变量，控制格式即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC的应用</title>
    <url>/posts/9375e561.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>JDBC是java操作关系数据库的一套API</p>
<p>全称：JAVA  DataBase  Connectivity     java数据库连接</p>
</blockquote>
<p>市面上的数据库多种多样，每个数据库的底层逻辑都不一样，不同数据库需要学习不同的接口来连接数据库，为了减少学习工作量统一使用jdbc的接口代码，由数据库的各个厂商使用jar包来适配不一样的底层实现逻辑。</p>
<p>这时候我们只用学习jdbc就可以实现各类数据库的增删查改了。不管是什么数据库系统，都能保证java代码的一致性。</p>
<p>过去：</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  graph TB
java---&gt;mysql
java---&gt;server
java---&gt;DB2
java---&gt;...各种各样的数据库
  </pre></div>
<p>现在：</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  graph TB
java--调用--&gt;jdbc
jdbc--&gt;mysql驱动
jdbc--&gt;server驱动
jdbc--&gt;DB2驱动
jdbc--&gt;其他
mysql驱动--&gt;mysql
server驱动--&gt;server
DB2驱动--&gt;DB2
其他--&gt;其他数据库
  </pre></div>
<blockquote>
<p>本篇使用   mysql8.0   jdk 1.8  IDEA 2023  学习实践</p>
</blockquote>
<p>mysql驱动下载地址：<a href="https://dev.mysql.com/downloads/">MySQL :: MySQL Community Downloads</a></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203604734.webp" alt="image-20240519203604734"></p>
<p>选择无关平台</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203644277.webp" alt="image-20240519203644277"></p>
<p>选择zip下载就可以了</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203711892.webp" alt="image-20240519203711892"></p>
<p>如果想下载历史版本的话</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203806676.webp" alt="image-20240519203806676"></p>
<p>在下图下拉框可以选择旧版本</p>
<blockquote>
<p>不同版本之间的驱动有对应的MySQL数据库版本以及jdk版本</p>
</blockquote>
<p>系统依旧选择无关平台</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203839065.webp" alt="image-20240519203839065"></p>
<p>下载好驱动以后，在你的项目中添加到库里面</p>
<p>例如我存放驱动的文件目录为lib，点击右键添加到库</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240520021042343.webp" alt="image-20240520021042343"></p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//创建驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取连接地址     IP地址+mysql一般使用3306端口 /数据库名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line">        <span class="comment">//用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span>  <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span>  <span class="variable">password</span> <span class="operator">=</span>  <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;201819&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取执行对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">        <span class="comment">//可以根据  count 的数值来判断 是否数据库更改成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>com.mysql.jdbc.Driver</code>为驱动版本8.0以下使用的，8.0以上可能会出问题不能运行</p>
<p>亦有可能会出现提示但是仍然可以运行，如下提示你该使用新的驱动注册</p>
<p><code>Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></p>
<p>驱动版本为8.0以上使用<code>com.mysql.cj.jdbc.Driver</code></p>
<p>版本5以后的驱动也可以不写注册驱动，jar包自动获取</p>
</blockquote>
<p>原来的表格：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521013241436.webp" alt="image-20240521013241436"></p>
<p>修改成功后的表格：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521013340904.webp" alt="image-20240521013340904"></p>
<h2 id="JDBC-的API-简单应用"><a href="#JDBC-的API-简单应用" class="headerlink" title="JDBC 的API 简单应用"></a>JDBC 的API 简单应用</h2><h3 id="1-DriverManager-类"><a href="#1-DriverManager-类" class="headerlink" title="1. DriverManager 类"></a>1. DriverManager 类</h3><p>1.1 获取连接 <code>getConnection</code>方法</p>
<p><code>getConnection</code>一般有三个参数，url，username，password。后俩个不用多说，就是数据库的用户名和密码</p>
<p>调用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span>  <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span>  <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<p>其中url的格式为:<code>jdbc:mysql://url地址:端口/数据库名?各种参数配置&amp;各种参数配置</code></p>
<ul>
<li><code>jdbc:mysql</code></li>
<li><p><code>url:端口</code>：数据库所在的IP地址+端口号</p>
</li>
<li><p>数据库名</p>
</li>
<li><p>各种参数配置，在数据库名后面以<code>?</code>开始，以<code>&amp;</code>连接多个配置，例如时区和字符编码等等</p>
<p>例：设置编码为UTF-8</p>
</li>
</ul>
<p><code>jdbc:mysql://127.0.0.1:3306/test??useUnicode=true&amp;characterEncoding=UTF-8</code></p>
<blockquote>
<p>当使用本地地址127.0.0.1以及默认端口3306是可以省略，为：<code>jdbc:mysql:///test</code></p>
</blockquote>
<p>1.2 注册驱动</p>
<p><code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>的底层方法其实是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>com.mysql.jdbc.Driver</code>为驱动版本8.0以下使用的，8.0以上可能会出问题不能运行</p>
<p>亦有可能会出现提示但是仍然可以运行，如下提示你该使用新的驱动注册</p>
<p><code>Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></p>
<p>驱动版本为8.0以上使用<code>com.mysql.cj.jdbc.Driver</code></p>
<p>版本5以后的驱动也可以不写注册驱动，jar包自动获取</p>
<p><del>又重复了一遍…</del></p>
</blockquote>
<h3 id="2-Connection-类"><a href="#2-Connection-类" class="headerlink" title="2. Connection 类"></a>2. Connection 类</h3><h4 id="1-获取执行sql的对象"><a href="#1-获取执行sql的对象" class="headerlink" title="1. 获取执行sql的对象"></a>1. 获取执行sql的对象</h4><p>1.1 普通获取<code>Statement</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>
<p>1.2 获取预编译sql对象<code>PreparedStatement</code>获取</p>
<p>1.3 获取执行存储过程对象</p>
<h4 id="2-mysql-事务控制"><a href="#2-mysql-事务控制" class="headerlink" title="2. mysql 事务控制"></a>2. mysql 事务控制</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>mysql</th>
<th>JDBC</th>
</tr>
</thead>
<tbody>
<tr>
<td>开启事务</td>
<td>BEGIN  <br />或者<br />START TRANSACTION</td>
<td>setAutoCommit(bool autoCommit)<br />默认为true，自动提交事务<br />改为false时，手动提交事物，即开启事务</td>
</tr>
<tr>
<td>提交事务</td>
<td>COMMIT</td>
<td>commit()</td>
</tr>
<tr>
<td>回滚事务</td>
<td>ROLLBACK</td>
<td>rollback()</td>
</tr>
</tbody>
</table>
</div>
<p>初始数据：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521032911216.webp" alt="image-20240521032911216"></p>
<p>现在是默认自动事务(即事务没开启)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;222&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;222&#x27; where id = &#x27;5&#x27; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取执行对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> statement.executeUpdate(sql1);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>  ; <span class="comment">//手动制造的异常</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> statement.executeUpdate(sql2);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：运行了sql1以后出现异常跳出来了，sql1执行的代码还在</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033138016.webp" alt="image-20240521033138016"></p>
<p>接下来是开启事务的实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;333&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;333&#x27; where id = &#x27;5&#x27; &quot;</span>;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> statement.executeUpdate(sql1);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>  ; <span class="comment">//手动制造的异常</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> statement.executeUpdate(sql2);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：事务出错，数据回滚</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033544206.webp" alt="image-20240521033544206"></p>
<p>如果把<code>//            int i = 1/0  ;</code>注释掉了，执行的结果如下：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033652158.webp" alt="image-20240521033652158"></p>
<h3 id="Statement-类"><a href="#Statement-类" class="headerlink" title="Statement 类"></a>Statement 类</h3><h4 id="1-执行sql语句的方法"><a href="#1-执行sql语句的方法" class="headerlink" title="1 执行sql语句的方法"></a>1 执行sql语句的方法</h4><h4 id="1-0-执行所有sql语句"><a href="#1-0-执行所有sql语句" class="headerlink" title="1.0 执行所有sql语句"></a>1.0 执行所有sql语句</h4><p>甚至包括存储过程</p>
<p><code>execute(sql)</code></p>
<p>返回值为Boolean值：</p>
<ul>
<li>true<br>执行后返回了一个ResultSet对象<br>也就是说sql语句 是 DQL 查询语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(stmt.execute(sql))&#123;<span class="comment">//如果为true</span></span><br><span class="line">	<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.getResultSet();<span class="comment">//获取ResultSet</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>false<br>没有返回ResultSet执行的是DML或者DDL语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">updateCount</span> <span class="operator">=</span> stmt.getUpdateCount();<span class="comment">//获取受影响的行数</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="1-1-执行DDL、DML-，即表的修改，数据修改"><a href="#1-1-执行DDL、DML-，即表的修改，数据修改" class="headerlink" title="1.1 执行DDL、DML ，即表的修改，数据修改"></a>1.1 执行DDL、DML ，即表的修改，数据修改</h5><p><code>executeUpdate(sql)</code></p>
<ul>
<li>执行DML（数据）语句时返回值受影响的行数<br>返回值大于0即为执行成功<br>实例上面很详细</li>
<li>执行DDL(数据库)时，返回值均为0<br>不报异常就是成功了</li>
</ul>
<h5 id="1-2-执行DQL，查询语句"><a href="#1-2-执行DQL，查询语句" class="headerlink" title="1.2 执行DQL，查询语句"></a>1.2 执行DQL，查询语句</h5><p><code>executeQuery(sql)</code></p>
<p>返回一个ResultSet对象</p>
<h3 id="ResultSet-类"><a href="#ResultSet-类" class="headerlink" title="ResultSet 类"></a>ResultSet 类</h3><p>一个结果集合</p>
<p>使用<code>executeQuery(sql)</code>查询语句后，返回的ResultSet对象是一个游标，指向查询语句的上一行，例如<code>student_inf</code>表查询语句</p>
<p>使用<code>select * from student_inf</code>后，游标指向：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521180625685.webp" alt="image-20240521180625685"></p>
<p>使用<code>next()</code>,可以指向下一行数据，返回值是Boolean，为true则下一行有数据，否则为false</p>
<p>使用get数据类型()来接收对应数据，例如String<code>getString()</code>，int<code>getInt()</code>,double<code>getDouble()</code></p>
<p>get数据类型()的参数分为俩种，一个是int型，按照数据在表中的位置来定位，第二种为String型，根据列名来提取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="number">3</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="number">4</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int id = resultSet.getInt(&quot;id&quot;);</span></span><br><span class="line">        <span class="comment">//String student_id = resultSet.getString(&quot;student_id&quot;);</span></span><br><span class="line">        <span class="comment">//String name =  resultSet.getString(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">//String pas = resultSet.getString(&quot;password&quot;);</span></span><br><span class="line">        <span class="comment">//String sex = resultSet.getString(&quot;sex&quot;);</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521181819044.webp" alt="image-20240521181819044"></p>
<p>其他方法：</p>
<ul>
<li><p><code>int getRow()</code>获取当前行数   ——-先last(),再getRow()可以获得总共有多少行数据</p>
</li>
<li><p><code>boolean next()</code>: 移动到下一行。</p>
</li>
<li><code>boolean previous()</code>: 移动到前一行。</li>
<li><code>boolean first()</code>: 移动到第一行。  //在可滚动的ResultSet启用,在获取PreparedStatement 或者Statement 对象时的参数加上<code>ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE</code></li>
<li><code>boolean last()</code>: 移动到最后一行。</li>
<li><code>void moveToFirst()</code>: 移动到第一行。//不可滚动的数据启用  </li>
<li><code>void moveToLast()</code>: 移动到最后一行。</li>
<li><code>boolean absolute(int row)</code>: 移动到指定行。</li>
<li><code>boolean relative(int rows)</code>: 相对于当前行移动指定行数。</li>
<li><code>boolean isBeforeFirst()</code>: 判断是否在第一行之前。</li>
<li><code>boolean isAfterLast()</code>: 判断是否在最后一行之后。</li>
<li><code>boolean isFirst()</code>: 判断是否在第一行。</li>
<li><code>boolean isLast()</code>: 判断是否在最后一行。</li>
<li><code>void beforeFirst()</code>: 移动到第一行之前。</li>
<li><code>void afterLast()</code>: 移动到最后一行之后。</li>
<li></li>
<li>获取列名：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ResultSetMetaData 对象</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">System.out.println(<span class="string">&quot;列数：&quot;</span> + columnCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsmd.getColumnName(i);</span><br><span class="line">    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i); <span class="comment">// 列别名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">columnType</span> <span class="operator">=</span> rsmd.getColumnTypeName(i); <span class="comment">// 列数据类型</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;列名：&quot;</span> + columnName);</span><br><span class="line">    System.out.println(<span class="string">&quot;列别名：&quot;</span> + columnLabel);</span><br><span class="line">    System.out.println(<span class="string">&quot;列数据类型：&quot;</span> + columnType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><p><code>void insertRow()</code>: 插入当前行。</p>
</li>
<li><p><code>void updateRow()</code>: 更新当前行。</p>
</li>
<li><p><code>void deleteRow()</code>: 删除当前行。</p>
</li>
<li><p><code>void refreshRow()</code>：刷新当前行在resultSet的缓存</p>
</li>
<li><p><code>void update 数据类型</code>更新数据</p>
</li>
<li><p><code>void updateNull(int columnIndex)</code>: 更新指定列为 NULL 值。</p>
</li>
<li><p><code>void updateNull(String columnLabel)</code>: 更新指定列名为 NULL 值。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改数据为可编辑</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="comment">//设置修改的列，修改后的数据</span></span><br><span class="line">        resultSet.updateString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;999&quot;</span>);</span><br><span class="line">        <span class="comment">//提交更新请求</span></span><br><span class="line">        resultSet.updateRow();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521184929931.webp" alt="image-20240521184929931"></p>
<hr>
<h3 id="PreparedStatement-类"><a href="#PreparedStatement-类" class="headerlink" title="PreparedStatement 类"></a>PreparedStatement 类</h3><p>一个</p>
<p>为什么要使用这个类呢</p>
<ul>
<li><p>防止sql注入</p>
</li>
<li><p>性能高，使用预编译</p>
<blockquote>
<p>预编译默认需要关闭，需要开启</p>
<ol>
<li>useServerPrepStmts=true</li>
<li>配置mysql执行日志(自行百度)，需要重启mysql<br>一般执行sql需要：</li>
</ol>
</blockquote>
</li>
</ul>
<ol>
<li>检查sql语法</li>
<li>编译</li>
<li>执行<br>当PreparedStatement 执行sql时，如果是执行同一个sql语句，仅仅是参数不同<br>那么第一次执行sql时的步骤一模一样，第二次执行sql语句sql代码已经编译就只用执行就完成了</li>
</ol>
<h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>使用<code>Statement</code>对象的时候，执行的sql代码是以String的形式发送给mysql的。如果在一些特定条件查询，比如账户密码查询的时候输入语句加入<code>&#39; or &#39;1&#39;=&#39;1</code>,到了sql就变成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_inf <span class="keyword">where</span> <span class="string">&#x27;name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>因为<span class="number">1</span>恒等于<span class="number">1</span></span><br><span class="line"><span class="number">120190101</span>张三<span class="number">999</span>男<span class="number">19</span></span><br><span class="line"><span class="number">220190102</span>李四<span class="number">999</span>女<span class="number">18</span></span><br><span class="line"><span class="number">320200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">420200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">520200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">620200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">720200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>就不费吹灰之力获取你的数据</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>以<code>？</code>为占位符</p>
<p>查询操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf where password = ? and name= ? &quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;999&quot;</span>);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">                System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据输出如下</span></span><br><span class="line"><span class="number">120190101</span>张三<span class="number">999</span>男<span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>增、改、删：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student_inf values (?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;20240521&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;桐崎千棘&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;159&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">5</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">preparedStatement.setInt(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行 返回受影响行数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">preparedStatement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521194424842.webp" alt="image-20240521194424842"></p>
<p>删改类似，不多赘述</p>
<h2 id="封装数据进对象以及集合"><a href="#封装数据进对象以及集合" class="headerlink" title="封装数据进对象以及集合"></a>封装数据进对象以及集合</h2><p>新建一个Student_inf 类，设置好数据字段，<code>Alt</code>+<code>Inesert</code>快速重写toString()以及get和set</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student_inf</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String student_inf;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStudent_inf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student_inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent_inf</span><span class="params">(String student_inf)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.student_inf = student_inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student_inf&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, student_inf=&#x27;&quot;</span> + student_inf + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建列表</span></span><br><span class="line">List&lt;Student_inf&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="type">Student_inf</span> <span class="variable">studentInf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student_inf</span>();</span><br><span class="line">        studentInf.id= resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        studentInf.student_inf= resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">        studentInf.name=  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        studentInf.password = resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        studentInf.sex= resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentInf.age= resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(studentInf.toString());</span><br><span class="line">        lists.add(studentInf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(lists);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Student_inf&#123;<span class="built_in">id</span>=1, student_inf=<span class="string">&#x27;20190101&#x27;</span>, name=<span class="string">&#x27;张三&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=19&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=2, student_inf=<span class="string">&#x27;20190102&#x27;</span>, name=<span class="string">&#x27;李四&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;女&#x27;</span>, age=18&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=3, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=4, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=5, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=6, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=7, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">[Student_inf&#123;<span class="built_in">id</span>=1, student_inf=<span class="string">&#x27;20190101&#x27;</span>, name=<span class="string">&#x27;张三&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=19&#125;, Student_inf&#123;<span class="built_in">id</span>=2, student_inf=<span class="string">&#x27;20190102&#x27;</span>, name=<span class="string">&#x27;李四&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;女&#x27;</span>, age=18&#125;, Student_inf&#123;<span class="built_in">id</span>=3, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=4, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=5, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=6, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=7, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>使用以上方法，每次与数据库交互都要创建一个新连接，交互完就销毁释放资源，造成资源浪费</p>
<p>数据池解决这个问题，在缓冲区创建好多个连接对象，使用时由连接池分配数据库连接对象，不使用时就放回连接池。类似客服，有需求时打电话过去，没需求就挂掉电话，给下一个有需求的人接电话。避免了频繁销毁创建</p>
<p>目前<code>druid</code>和<code>hikari</code>是用的最多的俩个，前者是综合性，后者速度快</p>
<blockquote>
<p> 使用需要引入jar包</p>
</blockquote>
<p>步骤：</p>
<ol>
<li>创建连接池对象</li>
<li>配置连接池</li>
<li>由连接池对象创建连接对象</li>
<li>代码实现后回收连接对象</li>
</ol>
<p>配置分为俩种：代码配置以及配置文件配置</p>
<h2 id="主键回显"><a href="#主键回显" class="headerlink" title="主键回显"></a>主键回显</h2><ol>
<li>创建PreparedStatement对象时加入参数<code>PreparedStatement.RETURN_GENERATED_KEYS</code></li>
<li><code>pstmt.getGeneratedKeys();</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取数据库连接</span></span><br><span class="line">    conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 创建SQL插入语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student_inf (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 创建PreparedStatement对象，并指定返回生成的键</span></span><br><span class="line">    pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 设置参数</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, <span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, <span class="number">22</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 执行插入操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">affectedRows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6. 检查是否插入成功</span></span><br><span class="line">    <span class="keyword">if</span> (affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 7. 获取生成的键</span></span><br><span class="line">        rs = pstmt.getGeneratedKeys();</span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">generatedId</span> <span class="operator">=</span> rs.getLong(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Inserted record&#x27;s ID: &quot;</span> + generatedId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 8. 关闭资源</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) rs.close();</span><br><span class="line">        <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>同一用户有多个需求打电话给客服，只需要一个客服接听电话就可以了，不需要多个客服来解决需求。</p>
<p>这就是ThreadLocal的作用。</p>
<p>简单例子看<a href="https://www.bilibili.com/video/BV1Tx421S7HZ?p=31&amp;vd_source=ae1743069d1cb97d6b6a1d21340b6497">30高级篇-工具类封装V2.0_哔哩哔哩_bilibili</a></p>
<p>以下是gpt的示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalConnectionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; connectionThreadLocal = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to create a connection&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> connectionThreadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionThreadLocal.get();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connectionThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">            <span class="comment">// Perform database operations using conn</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: Got connection &quot;</span> + conn);</span><br><span class="line">            closeConnection();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread 1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>执行相似且数量大SQL的时候，例如插入数据，使用上述方法会很慢，这个时候批量操作就派上用场了</p>
<p>驱动 url设置<code>rewriteBatchedStatements=true</code></p>
<p>步骤：</p>
<ol>
<li>把每行数据添加进bacth <code>addbatch()</code></li>
<li>提交到数据库 <code>executeBatch()</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取数据库连接</span></span><br><span class="line">        conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 设置自动提交为 false</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 准备 SQL 语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student_inf (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">        pstmt = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 设置批量操作的参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Student &quot;</span> + i);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, <span class="number">20</span> + (i % <span class="number">10</span>));</span><br><span class="line">            </span><br><span class="line">            pstmt.addBatch();  <span class="comment">// 添加到批处理</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 5. 执行批处理，每100条记录提交一次</span></span><br><span class="line">                <span class="type">int</span>[] result = pstmt.executeBatch();</span><br><span class="line">                conn.commit();</span><br><span class="line">                System.out.println(<span class="string">&quot;Inserted batch of 100 records: &quot;</span> + result.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 执行剩余的批处理操作</span></span><br><span class="line">        <span class="type">int</span>[] result = pstmt.executeBatch();</span><br><span class="line">        conn.commit();</span><br><span class="line">        System.out.println(<span class="string">&quot;Inserted remaining records: &quot;</span> + result.length);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// 发生异常时回滚事务</span></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 7. 关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于把多条insert()</p>
<p>变为insert  values(),(),()</p>
</blockquote>
<p>删改类似，不多赘述</p>
<h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><p>数据访问对象（DAO，Data Access Object）模式是用于抽象和封装对数据源的访问逻辑的一种设计模式。通过使用 DAO 模式，可以将数据访问逻辑从业务逻辑中分离出来，使代码更具可维护性和可测试性。自此，逻辑层不用再管sql部分的代码，只需要调用函数，就可以返回结果。</p>
<p>dao一般由以下组成：</p>
<ul>
<li>工具/数据类</li>
<li>数据库操作接口</li>
<li>接口的具体实现逻辑</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Meavn入门</title>
    <url>/posts/be3f90b4.html</url>
    <content><![CDATA[<p>POM：(project boject model)项目对象模型</p>
<p>Maven 资源包管理器</p>
<ul>
<li>方便的依赖管理</li>
<li>统一的项目结构</li>
<li>跨平台标准的项目构建方式</li>
</ul>
<p>运行原理：</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  sequenceDiagram
	participant a as pom.xml
	participant b as POM
	participant c as 依赖管理模型
	participant d as 本地仓库
	participant e as 远程仓库(私服)
	participant f as 远程仓库(MAVEN官方中央仓库)
	a-&gt;&gt;b : 传入依赖的名字、版本  
	b-&gt;&gt;c : 请求
	c-&gt;&gt;b : 管理依赖
	c-&gt;&gt;d : 请求
	d-&gt;&gt;e : 如果前者没有，则请求
	e-&gt;&gt;d : 返回给本地仓库下载
     d-&gt;&gt;f : 如果前者没有，则请求
	f-&gt;&gt;d : 返回给本地仓库下载
  </pre></div>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>pom.XML中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!----&gt;</span>组织名</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>untitled2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> /* 项目名 */<span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   /* 版本号 */<span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  -SNAPSHOT  是指快照版本  不稳定尚在开发 的意思 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 有其他值  -RELEASE  是指发行版本  功能稳定  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   例如  1.1-RELEASE        也可以省略 1.1     ---&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式  有  pom  jar   war  选项--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--更多依赖添加--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--坐标信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt; 组织名&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;  结构名 &lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;版本号&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt; &lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  <span class="comment">&lt;!--项目基本信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>18<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span><span class="comment">&lt;!--jdk版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>18<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--项目构建信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在<a href="https://mvnrepository.com/">Maven Repository</a>中搜索meavn的坐标信息</p>
</blockquote>
<ul>
<li><p>组织名</p>
<p>执行打包操作会把整个项目打包根据组织名写入meavn仓库</p>
</li>
<li><p>版本号中</p>
<ul>
<li><code>-SNAPSHOT</code>  是指快照版本  不稳定尚在开发</li>
<li><code>-RELEASE</code>是发行版本，功能稳定</li>
<li>如果不指定 例如<code>&lt;version&gt;1.1&lt;/version&gt;</code>默认发行版，相当于<code>&lt;version&gt;1.1-RELEASE&lt;/version&gt;</code></li>
</ul>
</li>
<li><p>在仓库中meavn根据一定格式的目录格式来定义jar包的路径，提供下载和查找、打包</p>
<p>格式：<code>groupId+&quot;\&quot;+artifactId+&quot;\&quot;+version+&quot;\&quot;+artifactId+&quot;\&quot;+version+.jar</code>,其中groupId的<code>.</code>换为<code>\</code></p>
</li>
</ul>
<h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><ul>
<li><p>直接依赖</p>
<p>项目直接引入依赖</p>
</li>
<li><p>间接依赖。</p>
<p>通过依赖的项目中依赖的jar包进行依赖</p>
</li>
</ul>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  graph LR
	项目A--直接依赖--&gt;A.jar
	项目A--间接依赖--&gt;项目B
	项目B--&gt;B.jar
	项目B--&gt;项目C
	项目C--&gt;C.jar
  </pre></div>
<p>如图上所示，项目A可以同时拥有A.jar、B.jar、C.jar</p>
<p>引入项目依赖示例</p>
<p>在项目A引入依赖B</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!--组织名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-dependency<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>如果我想引入项目B的依赖，但是我又不想要项目B的某个依赖，该怎么办呢</p>
<p>在A项目的pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-dependency<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>excluded-library-C<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目B的pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>library-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时A没有依赖c，B有依赖c，依赖c被项目A排除了</p>
<h3 id="选择依赖"><a href="#选择依赖" class="headerlink" title="选择依赖"></a>选择依赖</h3><p>在项目B中选择依赖不让依赖传递 到 A ，B依旧可以使用依赖，但是依赖不会传递到A</p>
<p>在项目B中的pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>library-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目 A 并不会自动依赖于 library-c，除非在项目 A 的 POM 文件中显式声明。</p>
<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>在引入依赖的时候除了版本号、组织名和结构名外，还有一个<code>&lt;scope&gt;&lt;/scope&gt;</code>标签，他可以设定依赖的适用范围</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>值</th>
<th>主程序</th>
<th>测试程序</th>
<th>打包/运行</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile(默认)</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>log4j</td>
</tr>
<tr>
<td>test</td>
<td>-</td>
<td>√</td>
<td>-</td>
<td>junit</td>
</tr>
<tr>
<td>provided</td>
<td>√</td>
<td>√</td>
<td>-</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>-</td>
<td>√</td>
<td>√</td>
<td>jdbc驱动</td>
</tr>
<tr>
<td>system</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>meavn以外的本地库<br />例如同项目其他模块</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li><p>clean </p>
<p>清理</p>
</li>
<li><p>default</p>
<p>核心工作。编译，测试，打包，安装，部署。</p>
</li>
<li><p>site</p>
<p>生成报告、发布站点</p>
</li>
</ul>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240524220222327.webp" alt="image-20240524220222327"></p>
<blockquote>
<p>同一套生命周期中，按照顺序一步步进行，运行后面的生命周期会运行前面的生命周期</p>
</blockquote>
<p>生命周期均由插件完成</p>
<blockquote>
<p>插件不满足所需开发需求,可通过pom.xml 里<code>&lt;plugins&gt;&lt;/plugins&gt;</code>单独配置</p>
</blockquote>
<h2 id="分模块设计"><a href="#分模块设计" class="headerlink" title="分模块设计"></a>分模块设计</h2><p>项目按照功能分为若干模块，方便项目的管理维护、扩展，方便模块之间互相调用，资源共享</p>
<p>我们可以把项目从以下的形式变为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">|_项目</span><br><span class="line">|</span><br><span class="line">|___代码</span><br></pre></td></tr></table></figure>
<p>这一类的形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">|_项目</span><br><span class="line">|</span><br><span class="line">|____模块</span><br><span class="line">|	|</span><br><span class="line">|	|____代码</span><br><span class="line">|</span><br><span class="line">|____模块</span><br><span class="line">|	|</span><br><span class="line">|	|____代码</span><br></pre></td></tr></table></figure>
<p>拆分模块后，在开发的模块内引入<code>pom</code>想要引入的模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组织名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样做的话，在别的项目想使用该设计的方法就可以只引入一小部分代码而不是整个项目，例如Mybatis作为一个sql使用率广泛的框架只需要引入包就可以使用，而不是把原始的项目都引入进来。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当多个模块都使用同一个依赖时，可以设置额外全新的一个父模块，让父模块支持这个依赖，要使用这个依赖的多个模块继承父模块</p>
<p>也能做到依赖管理</p>
<p>例如新建SpringBoot工程就继承自父模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Meavn只能单继承，但是可以多重继承</p>
</blockquote>
<p>因为SpringBoot默认已经有了继承，所以我们需要把父模块继承<code>spring-boot-starter-parent</code>子模块再继承父模块</p>
<p>步骤：</p>
<ol>
<li><p>建立父模块，并设置打包方式为pom，继承<code>spring-boot-starter-parent</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!--打包方式--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>子模块设置继承没在<code>&lt;relativePath&gt; 填写父模块pom.xml路径&lt;/relativePath&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span> ../parent/pom.xml<span class="comment">&lt;!--相对路径--&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span>relativePath&gt; </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>父模块配置依赖</p>
<p>子模块会自动继承依赖</p>
</li>
</ol>
<blockquote>
<p>groupId会继承父模块的groupId</p>
<p><code>&lt;relativePath&gt;</code>不指定会从远程仓库和本地仓库查找</p>
<p>子模块配置了相同的依赖不同的版本，以子模块为准（重写）</p>
</blockquote>
<h2 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h2><p>  多个模块使用但是不是全部模块都使用的依赖，统一管理版本</p>
<p>步骤：</p>
<ol>
<li><p>父模块使用<code>&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;</code>，在这里面引入依赖以及版本号 </p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正常父模块依赖，被所有子模块继承--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子模块选择继承的模块，统一指定版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.23.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>子模块引入依赖，不需要指定版本号，没有引入依赖的不会引入父模块<code>&lt;dependencyManagement&gt;</code>里的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入依赖，不需要输入版本号，由父模块统一指定--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>在依赖足够多，一个一个滑动查看<code>&lt;dependency&gt;&lt;/dependency&gt;</code>去查找，修改版本号很繁琐，可以自定义属性在一个界面内快速修改版本号</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sptingBoot.version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">sptingBoot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.v</span>&gt;</span>1.18.32<span class="tag">&lt;/<span class="name">lombok.v</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--名字可自定义，但是需要规范，不然认不出来--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sptingBoot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.v&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>如果使用继承、分模块设计的话，在打包项目某个模块时需要在本地模块找到继承的父模块和依赖的模块，如果没有会打包失败</p>
<p>需要一个一个的安装好模块到本地仓库，十分繁琐</p>
<p>聚合：把多个模块构成一个整体，完成项目的构建</p>
<p>聚合工程：不具备业务功能的空工程，只有一个pom.xml</p>
<blockquote>
<p>打包方式为pom！！！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>所有项目想打包的相对的路径<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时这个聚合工程进行打包就完成了</p>
<h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  sequenceDiagram
	本地项目-&gt;&gt;本地仓库: install
	本地仓库-&gt;&gt;私服: deploy
    Note right of 私服: 仓库(central)--中央仓库下载
    Note right of 私服: 仓库(release)--发行版本仓库
    Note right of 私服: 仓库(snapshot)--快照版本仓库
    Note right of 私服: 打包vector如果是发行版本上传发行仓库，如果是快照版本就上传快照版本
    Note right of 本地仓库: 配置私服用户名&#x2F;密码
    Note right of 本地仓库: 配置私服地址（url）
    Note right of 本地项目: 配置上传资源的地址(url)
  </pre></div>
<ol>
<li><p>配置私服的访问用户名/密码</p>
<p>打开本地meavn的<code>setting.xml</code>（apache-maven-3.9.6\conf\settings.xml)，在<code>&lt;servers&gt;  &lt;/servers&gt;</code>写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>meavn-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>repouser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>repopwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>meaven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>repouser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>repopwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pom中配置上传地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>meaven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            id 名要与&lt;server&gt; &lt;/server&gt; id名一致 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>127.0.0.1/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>meavn-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>127.0.0.1/releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>设置私服依赖下载地址</p>
<p>设置仓库组，把snapshots和releases等等仓库一起当为一个仓库组</p>
</li>
</ol>
<blockquote>
<p>配置的阿里云镜像仓库也是一个私服，只是公开出来了而已，所以要把阿里的<code>&lt;mirror&gt;&lt;/mirror&gt;</code>注释</p>
<p>也可以是使用<code>&lt;blocked&gt;true&lt;/blocked&gt;</code>设置禁止使用，需要使用的时候在修改为false或者注释</p>
</blockquote>
<p><code>settings.xml</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>meavn-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   <span class="comment">&lt;!--仓库的名字  *代表全选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>给程序员辨识信息的标签<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>url/repository/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!--公共仓库地址--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--阿里云--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--默认--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;profiles&gt;&lt;/profiles&gt;</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span><span class="comment">&lt;!-- 注意没有s 在有s中间添加--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefalt</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefalt</span>&gt;</span><span class="comment">&lt;!---指定该 profile 是否在默认情况下激活如果没有其他 profile 被显式激活或匹配条件被满足，则该 profile 会自动激活。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>meavn-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>url/repository/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在meavn默认配置中有示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.4<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    指定 profile 的唯一标识符。Maven 使用该 ID 来引用这个 profile，便于管理多个 profile 配置。</span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span>         定义 profile 的激活条件。 有着 <span class="tag">&lt;<span class="name">os</span>&gt;</span><span class="tag">&lt;/<span class="name">os</span>&gt;</span><span class="tag">&lt;<span class="name">property</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="tag">&lt;<span class="name">file</span>&gt;</span><span class="tag">&lt;/<span class="name">file</span>&gt;</span>等等条件</span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>  指定该 profile 应在何种 JDK 版本下激活。</span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>指定该 profile 是否在默认情况下激活如果没有其他 profile 被显式激活或匹配条件被满足，则该 profile 会自动激活。</span><br><span class="line">            </span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk14<span class="tag">&lt;/<span class="name">id</span>&gt;</span>指定该仓库的唯一标识符。Maven 使用该 ID 来引用这个仓库，便于管理多个仓库配置。</span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Repository for JDK 1.4 builds<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  为仓库指定一个人类可读的名称。</span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.myhost.com/maven/jdk14<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  指定仓库的 URL。Maven 使用该 URL 来访问和下载依赖和插件。</span><br><span class="line">          <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span>            指定仓库的布局类型，通常为 default。定义仓库的存储结构，default 是最常用的布局。</span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshotPolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">snapshotPolicy</span>&gt;</span>          定义处理快照版本的策略。可以包括检查更新的频率、更新的模式等。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>env-dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>target-env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tomcatPath</span>&gt;</span>/path/to/tomcat/instance<span class="tag">&lt;/<span class="name">tomcatPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此外可以单独配置单个项目的仓库镜像</p>
</blockquote>
<h2 id="附录-常见指令"><a href="#附录-常见指令" class="headerlink" title="附录 常见指令"></a>附录 常见指令</h2><blockquote>
<p> 摘录<a href="https://www.jianshu.com/p/6f57c322e50e">30 个常用 Maven 命令 - 简书 (jianshu.com)</a></p>
</blockquote>
<p>maven 命令除了常用的几个，大部分经常记不住，整理一下，方便查询。</p>
<p>maven 命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下，</p>
<ul>
<li>D 指定参数，如 -Dmaven.test.skip=true 跳过单元测试；</li>
<li>P 指定 Profile 配置，可以用于区分环境；</li>
<li>e 显示maven运行出错的信息；</li>
<li>o 离线执行命令,即不去远程仓库更新包；</li>
<li>X 显示maven允许的debug信息；</li>
<li>U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。</li>
</ul>
<p>常用maven命令</p>
<ul>
<li>创建maven项目：mvn archetype:create<br>指定 group： -DgroupId=packageName<br>指定 artifact：-DartifactId=projectName<br>创建web项目：-DarchetypeArtifactId=maven-archetype-webapp</li>
<li>创建maven项目：mvn archetype:generate</li>
<li>验证项目是否正确：mvn validate</li>
<li>maven 打包：mvn package</li>
<li>只打jar包：mvn jar:jar</li>
<li>生成源码jar包：mvn source:jar</li>
<li>产生应用需要的任何额外的源代码：mvn generate-sources</li>
<li>编译源代码： mvn compile</li>
<li>编译测试代码：mvn test-compile</li>
<li>运行测试：mvn test</li>
<li>运行检查：mvn verify</li>
<li>清理maven项目：mvn clean</li>
<li>生成eclipse项目：mvn eclipse:eclipse</li>
<li>清理eclipse配置：mvn eclipse:clean</li>
<li>生成idea项目：mvn idea:idea</li>
<li>安装项目到本地仓库：mvn install</li>
<li>发布项目到远程仓库：mvn:deploy</li>
<li>在集成测试可以运行的环境中处理和发布包：mvn integration-test</li>
<li>显示maven依赖树：mvn dependency:tree</li>
<li>显示maven依赖列表：mvn dependency:list</li>
<li>下载依赖包的源码：mvn dependency:sources</li>
<li>安装本地jar到本地仓库：mvn install:install-file -DgroupId=packageName -DartifactId=projectName -Dversion=version -Dpackaging=jar -Dfile=path</li>
</ul>
<p>web项目相关命令</p>
<ul>
<li>启动tomcat：mvn tomcat:run</li>
<li>启动jetty：mvn jetty:run</li>
<li>运行打包部署：mvn tomcat:deploy</li>
<li>撤销部署：mvn tomcat:undeploy</li>
<li>启动web应用：mvn tomcat:start</li>
<li>停止web应用：mvn tomcat:stop</li>
<li>重新部署：mvn tomcat:redeploy</li>
<li>部署展开的war文件：mvn war:exploded tomcat:exploded</li>
</ul>
<blockquote>
<p>摘录<a href="https://blog.csdn.net/good_good_xiu/article/details/116740333">maven常用命令大全(附详细解释)_mvn命令详解-CSDN博客</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span>		-- 跳过单测打包</span><br><span class="line">mvn clean install -Dmaven.test.skip=<span class="literal">true</span>		-- 跳过单测打包，并把打好的包上传到本地仓库</span><br><span class="line">mvn clean deploy -Dmaven.test.skip=<span class="literal">true</span>			-- 跳过单测打包，并把打好的包上传到远程仓库</span><br><span class="line"></span><br><span class="line">mvn -v //查看版本 </span><br><span class="line">mvn archetype:create //创建 Maven 项目 </span><br><span class="line">mvn compile //编译源代码 </span><br><span class="line">mvn test-compile //编译测试代码 </span><br><span class="line">mvn <span class="built_in">test</span> //运行应用程序中的单元测试 </span><br><span class="line">mvn site //生成项目相关信息的网站 </span><br><span class="line">mvn package //依据项目生成 jar 文件 </span><br><span class="line">mvn install //在本地 Repository 中安装 jar </span><br><span class="line">mvn -Dmaven.test.skip=<span class="literal">true</span> //忽略测试文档编译 </span><br><span class="line">mvn clean //清除目标目录中的生成结果 </span><br><span class="line">mvn clean compile //将.java类编译为.class文件 </span><br><span class="line">mvn clean package //进行打包 </span><br><span class="line">mvn clean <span class="built_in">test</span> //执行单元测试 </span><br><span class="line">mvn clean deploy //部署到版本仓库 </span><br><span class="line">mvn clean install //使其他项目使用这个jar,会安装到maven本地仓库中 </span><br><span class="line">mvn archetype:generate //创建项目架构 </span><br><span class="line">mvn dependency:list //查看已解析依赖 </span><br><span class="line">mvn dependency:tree com.xx.xxx //看到依赖树 </span><br><span class="line">mvn dependency:analyze //查看依赖的工具 </span><br><span class="line">mvn <span class="built_in">help</span>:system //从中央仓库下载文件至本地仓库 </span><br><span class="line">mvn <span class="built_in">help</span>:active-profiles //查看当前激活的profiles </span><br><span class="line">mvn <span class="built_in">help</span>:all-profiles //查看所有profiles </span><br><span class="line">mvn <span class="built_in">help</span>:effective -pom //查看完整的pom信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>web</tag>
        <tag>Meavn</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot相关</title>
    <url>/posts/f7006e66.html</url>
    <content><![CDATA[<blockquote>
<p>很混乱的SpringBoot合集</p>
<p>想着整理但是没啥时间整理</p>
<p>往后整理也是到vitepress的那个站点整理了吧</p>
</blockquote>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><p>IOC : 控制反转。对象的创建由程序交给外部容器</p>
<p>DI：依赖注入。容器为应用程序运行时，所依赖的资源为依赖注入</p>
<p>Bean对象：IOC容器中创建管理的对象为Bean</p>
<p><code>@Component</code>：注解在类上，标志为Bean对象，使用IOC容器管理</p>
<p><code>@Component</code>为通用注解</p>
<p>衍生注解，标注作用，不属于以下三种则使用<code>@Component</code></p>
<ul>
<li><p><code>@Repository</code>持久层</p>
</li>
<li><p><code>@Controller</code> 控制层</p>
</li>
<li><code>@Service</code>服务层</li>
</ul>
<p>其中控制层<code>@RestController</code>=<code>@ResponseBody</code>+<code>@Controller</code>,使用<code>@RestController</code>就可以了</p>
<h3 id="Bean的名字："><a href="#Bean的名字：" class="headerlink" title="Bean的名字："></a>Bean的名字：</h3><p>默认类名首字母小写，如User的bean为user</p>
<p>设置<code>@Component(&quot;uuser&quot;)</code>、<code>@Component(value = &quot;uuser&quot;)</code></p>
<h3 id="Bean扫描"><a href="#Bean扫描" class="headerlink" title="Bean扫描"></a>Bean扫描</h3><p>SpringBoot 默认扫描启动类当前包以及子包</p>
<p>如果想要扫描其他包则使用</p>
<p>单个包：<code>@ComponentScan(&quot;com.kirari.dashijian.dao&quot;)</code></p>
<p>多个包：<code>@ComponentScan(&#123;&quot;com.kirari.dashijian.dao&quot;,&quot;com.kirari.dashijian&quot;&#125;)</code></p>
<h3 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h3><h4 id="自动配置的三种方法"><a href="#自动配置的三种方法" class="headerlink" title="自动配置的三种方法"></a>自动配置的三种方法</h4><blockquote>
<p>想要自动配置，类上一定要有被String容器标记为Bean的<code>@Component</code>及其子注解或配置类<code>@Configuration</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子中<code>LoginInterceptor</code>没有<code>@Component</code>注解，不是Bean，不可以使用自动配置</p>
</blockquote>
<h5 id="AUtowired"><a href="#AUtowired" class="headerlink" title="@AUtowired"></a><code>@AUtowired</code></h5><p>自动配置默认按照类型进行装配，默认的Bean的名字是Bean类名的首字母小写。</p>
<p>默认自动装配时，会按照与Bean名相同的变量名进行查找匹配</p>
<p>定义一个<code>Service</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tttest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现俩个Bean的实现类</p>
<p>t1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span> <span class="keyword">implements</span> <span class="title class_">Tttest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>t2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t2</span> <span class="keyword">implements</span> <span class="title class_">Tttest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService userService1;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Tttest t1;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Tttest t2;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(t1.name());</span><br><span class="line">    System.out.println(t1);</span><br><span class="line">    System.out.println(t2.name());</span><br><span class="line">    System.out.println(t2);</span><br><span class="line">    System.out.println(<span class="string">&quot;Service1&quot;</span>);</span><br><span class="line">    System.out.println(userService1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@531ed68e</span><br><span class="line">t2</span><br><span class="line">com.kirari.dashijian.service.impl.t2@551976c2</span><br><span class="line">Service1</span><br><span class="line">com.kirari.dashijian.service.UserService@72e5206</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以见到t1、t2虽然是同一个类型的Bean，因为变量名和Bean默认名称一样，所以能找到</p>
<hr>
<p>如果在有同个类型的多个Bean的情况命名不是默认Bean名称的话出异常,例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Tttest tt;</span><br></pre></td></tr></table></figure>
<p>显示无法自动装配。存在多个 ‘Tttest’ 类型的 Bean。Beans: <code>t1   (t1.java)</code>、<code>t2   (t2.java)</code>、<code>tttest   (Tttest.java)</code></p>
<p>通过<code>@Qualifier</code>指定name</p>
<p>在上面的代码测试类中加入这段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;t1&quot;)</span></span><br><span class="line">Tttest tt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(t1.name());</span><br><span class="line">    System.out.println(t1);</span><br><span class="line">    System.out.println(t2.name());</span><br><span class="line">    System.out.println(t2);</span><br><span class="line">    System.out.println(tt.name());</span><br><span class="line">    System.out.println(tt);</span><br><span class="line">    System.out.println(<span class="string">&quot;Service1&quot;</span>);</span><br><span class="line">    System.out.println(userService1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@30b0f674</span><br><span class="line">t2</span><br><span class="line">com.kirari.dashijian.service.impl.t2@62818ab0</span><br><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@30b0f674</span><br><span class="line">Service1</span><br><span class="line">com.kirari.dashijian.service.UserService@7fda84cf</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h5><p>与<code>Autowired</code>几乎一模一样，按照类型注入，以默认名称匹配，多个同类型Bean时</p>
<p>不同的是提供注解的依赖不同，提供名称的注解不同</p>
<p>引入依赖，但是我没引入也能运行，不知道是不是springboot自动引入了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类中修改为Inject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Inject</span></span><br><span class="line">   Tttest t1;</span><br><span class="line">   <span class="meta">@Inject</span></span><br><span class="line">   Tttest t2;</span><br><span class="line">   <span class="meta">@Inject</span></span><br><span class="line">   <span class="meta">@Named(&quot;t2&quot;)</span></span><br><span class="line">Tttest tt;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(t1.name());</span><br><span class="line">       System.out.println(t1);</span><br><span class="line">       System.out.println(t2.name());</span><br><span class="line">       System.out.println(t2);</span><br><span class="line">       System.out.println(tt.name());</span><br><span class="line">       System.out.println(tt);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@62818ab0</span><br><span class="line">t2</span><br><span class="line">com.kirari.dashijian.service.impl.t2@39f5eba4</span><br><span class="line">t2</span><br><span class="line">com.kirari.dashijian.service.impl.t2@39f5eba4</span><br></pre></td></tr></table></figure>
<p>使用<code>Named(&quot;name&quot;)</code>进行指定bean</p>
<hr>
<h5 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><code>@Resource</code></h5><p>与<code>Autowired</code>和<code>Inject</code>不同，<code>Resource</code>是根据名称装配bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">Tttest t1;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">Tttest t2;</span><br><span class="line"><span class="meta">@Resource(name = &quot;t1&quot;)</span></span><br><span class="line">Tttest tt;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(t1.name());</span><br><span class="line">    System.out.println(t1);</span><br><span class="line">    System.out.println(t2.name());</span><br><span class="line">    System.out.println(t2);</span><br><span class="line">    System.out.println(tt.name());</span><br><span class="line">    System.out.println(tt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@3c070ade</span><br><span class="line">t2</span><br><span class="line">com.kirari.dashijian.service.impl.t2<span class="meta">@bb3487c</span></span><br><span class="line">t1</span><br><span class="line">com.kirari.dashijian.service.impl.t1@3c070ade</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="通过IOC容器对象获取Bean"><a href="#通过IOC容器对象获取Bean" class="headerlink" title="通过IOC容器对象获取Bean"></a>通过IOC容器对象获取Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationContext context ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Tttest</span> <span class="variable">test1</span> <span class="operator">=</span> (Tttest) context.getBean(<span class="string">&quot;t1&quot;</span>);<span class="comment">//根据bean名</span></span><br><span class="line">    <span class="type">Tttest</span> <span class="variable">test2</span> <span class="operator">=</span> context.getBean(Tttest.class);<span class="comment">//根据类型</span></span><br><span class="line">    <span class="type">Tttest</span> <span class="variable">test3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;t1&quot;</span>,Tttest.class);<span class="comment">//俩者一起使用</span></span><br><span class="line"></span><br><span class="line">    System.out.println(test1);</span><br><span class="line">    System.out.println(test2);</span><br><span class="line">    System.out.println(test3);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>在多个同类型bean中，一三方法可以实现找到不同的bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Tttest</span> <span class="variable">test1</span> <span class="operator">=</span> (Tttest) context.getBean(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="type">Tttest</span> <span class="variable">test3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;t2&quot;</span>,Tttest.class);   </span><br><span class="line">System.out.println(test1);</span><br><span class="line">System.out.println(test3);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">com.kirari.dashijian.service.impl.t1@56e9126f</span><br><span class="line">com.kirari.dashijian.service.impl.t2@4e773b8a</span><br></pre></td></tr></table></figure>
<p>在多个同类型Bean的时候使用二方法会报错，不知道使用哪个bean</p>
<h3 id="Bean重复"><a href="#Bean重复" class="headerlink" title="Bean重复"></a>Bean重复</h3><p>由于<code>@Autowired</code>是默认按照类型自动装配</p>
<p>如果同类型bean存在多个</p>
<ul>
<li><p><code>@Primary</code>指定装配 的bean</p>
<p>例如我有几个bean是同类型</p>
<ol>
<li> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pppp</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">uuuu</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> </span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>​    此时使用<code>@Autowire</code>时,程序并不知道我使用哪个Bean，只要在需要使用的Bean上加上<code>@Primary</code>就会使用<code>@Primary</code>标记的Bean了</p>
<ul>
<li><p><code>@Qualifier</code>+<code>@Autowired</code>设置bean的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;uuuu&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Resource(name = &quot;&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;uuuu&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Inject</code>和<code>@Named(&quot;name&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Named(&quot;t1&quot;)</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Tttest tt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Resource和-Autowired、-Inject的区别"><a href="#Resource和-Autowired、-Inject的区别" class="headerlink" title="@Resource和@Autowired、@Inject的区别"></a><code>@Resource</code>和<code>@Autowired</code>、<code>@Inject</code>的区别</h4><ul>
<li><p>提供的依赖不同</p>
</li>
<li><p>自动获得的逻辑不同</p>
</li>
<li>….</li>
</ul>
<h3 id="Bean的作用域范围"><a href="#Bean的作用域范围" class="headerlink" title="Bean的作用域范围"></a>Bean的作用域范围</h3><div class="table-container">
<table>
<thead>
<tr>
<th>作用域</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>singleton</td>
<td>（默认）容器内的同名称bean只有一个实例</td>
</tr>
<tr>
<td>prototype</td>
<td>每次使用这个bean重新创建新的实例</td>
</tr>
<tr>
<td>request</td>
<td>每个请求范围内创建新的实例</td>
</tr>
<tr>
<td>session</td>
<td>每个会话范围创建新的实例</td>
</tr>
<tr>
<td>application</td>
<td>每个应用范围内会创建新的实例</td>
</tr>
</tbody>
</table>
</div>
<h4 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a><code>singleton</code></h4><p>使用默认的singleton,即不设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationContext context ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Tttest</span> <span class="variable">test3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;t2&quot;</span>, Tttest.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(i+<span class="string">&quot;&quot;</span>+test3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">1com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">2com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">3com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">4com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">5com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">6com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">7com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">8com.kirari.dashijian.service.impl.t1@fdfd984</span><br><span class="line">9com.kirari.dashijian.service.impl.t1@fdfd984</span><br></pre></td></tr></table></figure>
<p>发现所有的bean实例都是同一个</p>
<h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h4><p>设置每次使用创建新的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="comment">//@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t2</span> <span class="keyword">implements</span> <span class="title class_">Tttest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationContext context ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Tttest</span> <span class="variable">test3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;t2&quot;</span>, Tttest.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(i+<span class="string">&quot;&quot;</span>+test3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0com.kirari.dashijian.service.impl.t2@186149f9</span><br><span class="line">1com.kirari.dashijian.service.impl.t2@5d4042fc</span><br><span class="line">2com.kirari.dashijian.service.impl.t2@6b06da60</span><br><span class="line">3com.kirari.dashijian.service.impl.t2@1be62793</span><br><span class="line">4com.kirari.dashijian.service.impl.t2@9da8b97</span><br><span class="line">5com.kirari.dashijian.service.impl.t2@56527ff2</span><br><span class="line">6com.kirari.dashijian.service.impl.t2@b5a6a82</span><br><span class="line">7com.kirari.dashijian.service.impl.t2@21aa0ec5</span><br><span class="line">8com.kirari.dashijian.service.impl.t2@7cf1bf54</span><br><span class="line">9com.kirari.dashijian.service.impl.t2@3919e2d7</span><br></pre></td></tr></table></figure>
<p>每次都创建了新的实例</p>
<hr>
<blockquote>
<p>bean的创建实例默认是在启动类运行之后就开始了，使用<code>@Lazy</code>注解在Bean类上，可以延迟实例化，不在启动类运行的 时候实例化。</p>
<p>而是在bean被使用时实例化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="comment">//@Primary</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t2</span> <span class="keyword">implements</span> <span class="title class_">Tttest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Bean注册"><a href="#Bean注册" class="headerlink" title="Bean注册"></a>Bean注册</h3><h4 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a>@Bean</h4><p>定义在方法上，标记未Bean交给Spring IOC 容器进行管理</p>
<h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>引入需要被项目使用的Bean类</p>
<p>和Scan类似</p>
<h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><p>利用meavn的依赖传递实现</p>
<p>设置start包，导入了所需要的包…</p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><ol>
<li>类中设置<code>@Bean</code>为Bean</li>
<li>通过<code>AutoConfiguration</code>设置自动配置类，<code>@import</code>导入类</li>
<li></li>
</ol>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240531172217518.webp" alt="image-20240531172217518"></p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>TODO</p>
<ul>
<li>[ ] 待续…不过也不用续</li>
</ul>
<h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><ul>
<li>[ ] TODO待续</li>
</ul>
<h3 id="注册条件"><a href="#注册条件" class="headerlink" title="注册条件"></a>注册条件</h3><p><code>@Conditional</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>条件</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ConditionalOnClass</code></td>
<td>存在这个类才声明Bean</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingBean</code></td>
<td>不存在这个类型的Bean声明这个Bean</td>
</tr>
<tr>
<td><code>@ConditionalOnProperty</code></td>
<td>配置文件环境存在对应属性时声明Bean</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<p>定义在类、方法上，根据条件决定是否注册bean </p>
<p>指定类型使用<code>value</code>、指定名称使用<code>name</code>属性</p>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><code>@Component</code></h3><p>交给Ioc容器管理的对象</p>
<p>Spring 在扫描组件的时候会自动识别带有 <code>@Component</code> 及其派生注解的类，并将其实例化为 bean 并纳入 Spring 容器的管理。</p>
<p>常见的派生注解有 <code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>，它们都是基于 <code>@Component</code> 的扩展。</p>
<p> <code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>标注该类是控制层、服务层、DAO层。</p>
<h3 id="Bean和Component的区别"><a href="#Bean和Component的区别" class="headerlink" title="Bean和Component的区别"></a>Bean和Component的区别</h3><ol>
<li><code>@Bean</code></li>
</ol>
<p><code>@Bean</code> 注解用于方法级别，是在 <code>@Configuration</code> 注解的类中定义的。使用 <code>@Bean</code> 注解的方法将返回一个对象，该对象将被注册为 Spring 应用上下文中的 Bean。<code>@Bean</code> 注解通常用于配置和创建第三方库的 Bean 或者需要复杂初始化逻辑的 Bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRepository <span class="title function_">myRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyRepositoryImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>@Component</code></li>
</ol>
<p><code>@Component</code> 注解用于类级别，是 Spring 的通用组件扫描注解。<code>@Component</code> 注解的类将自动检测并注册为 Spring 应用上下文中的 Bean。<code>@Component</code> 注解通常用于开发人员自己编写的类（如服务、仓库、控制器等）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="comment">// 实现服务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接收请求"><a href="#接收请求" class="headerlink" title="接收请求"></a>接收请求</h2><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>原始web接收请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;httptest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testhttp</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pas</span>  <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> name+pas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/httptest?name=小明&amp;password=123456</code></p>
<p>响应：小明123456</p>
<p>SpringBoot中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController2</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spring&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> user <span class="title function_">returnUser3</span><span class="params">( String name,String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findIdUser(name,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/request/spring?name=小明&amp;id=1</code></p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>只需要保证请求参数和接受参数一致就行了</p>
<p>如果不一致可以使用：<code>@RequestParam</code>来修正</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController2</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> user <span class="title function_">returnUser2</span><span class="params">(<span class="meta">@RequestParam(name = &quot;Name&quot; ,defaultValue = &quot;小明&quot;)</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUser(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>defaultValue</code>指定默认值</p>
<p>请求：<code>http://localhost:8080/request/show?Name=小明</code> </p>
<p>不指定值会使用默认值：<code>http://localhost:8080/request/show</code>等价于上面那句</p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>@RequestParam</code>的<code>required</code>默认为true，代表必须传入该参数，否则报错，可改为<strong>fasle</strong></p>
</blockquote>
<hr>
<p>多个参数可能传入一到俩个重载：<code>@RequestParam(required = false)</code>来判断是否有值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;user&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String name,<span class="meta">@RequestParam(required = false)</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="literal">null</span>&amp;&amp;id!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">user</span> <span class="operator">=</span> userService.findIdUser(name,id);</span><br><span class="line">        <span class="keyword">return</span> List.of(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(name != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUser(name);</span><br><span class="line">        <span class="keyword">return</span> List.of(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(id != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findID(id);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAllUser();</span><br><span class="line">            <span class="comment">// 如果请求中有name参数，则返回特定用户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>http://localhost:8080/user</code></li>
</ul>
<ul>
<li><code>http://localhost:8080/user?name=小明</code></li>
<li><code>http://localhost:8080/user?id=1</code></li>
<li><code>http://localhost:8080/user?id=1&amp;name=小明</code></li>
</ul>
<h3 id="参数设为实体类"><a href="#参数设为实体类" class="headerlink" title="参数设为实体类"></a>参数设为实体类</h3><p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name,pass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user <span class="title function_">returnUser4</span><span class="params">( user user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findIdUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/user?name=小明&amp;id=1</code></p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Mapper的设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM user WHERE name = #&#123;user.name&#125; AND id = #&#123;user.id&#125; &quot;)</span></span><br><span class="line">user <span class="title function_">findIdUser2</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> user user)</span>;</span><br></pre></td></tr></table></figure>
<h4 id="复杂实体类"><a href="#复杂实体类" class="headerlink" title="复杂实体类"></a>复杂实体类</h4><p>第一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user2</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name,pass;</span><br><span class="line">    Info info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嵌套类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/class&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user2 <span class="title function_">getuser2</span><span class="params">(user2 user22)</span>&#123;</span><br><span class="line">    System.out.println(user22.toString());</span><br><span class="line">    <span class="keyword">return</span> user22;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/class?name=小明&amp;id=1&amp;info.address=上海&amp;info.age=18</code></p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/array&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String[] getArray(String[] Hobby)&#123;</span><br><span class="line">    <span class="keyword">return</span> Hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/array?Hobby=跳舞&amp;Hobby=唱歌&amp;Hobby=跑步</code></p>
<p>返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&quot;跳舞&quot;</span>,</span><br><span class="line">    <span class="string">&quot;唱歌&quot;</span>,</span><br><span class="line">    <span class="string">&quot;跑步&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h3><p>需要用到<code>@RequestParam</code>绑定数据 ,不加注解回默认绑定数组，但此时没有数据，就会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getList</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; Hobby)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/list?Hobby=跳舞&amp;Hobby=唱歌&amp;Hobby=跑步</code></p>
<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;跳舞&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;唱歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;跑步&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;date1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> LocalDateTime <span class="title function_">getDate1</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime localDateTime)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localDateTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;date2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> LocalDateTime <span class="title function_">getDate2</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy.MM.dd HH.mm.ss&quot;)</span>LocalDateTime localDateTime)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localDateTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/date3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> LocalDateTime <span class="title function_">getDate3</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd&quot;)</span> LocalDate localDate)</span> &#123;</span><br><span class="line">    <span class="comment">// 将 LocalDate 转换为 LocalDateTime，时间部分设为午夜</span></span><br><span class="line">    <span class="comment">//        return localDate.atTime(LocalTime.MIDNIGHT);</span></span><br><span class="line">    <span class="keyword">return</span> localDate.atStartOfDay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>请求：<code>http://localhost:8080/date1?localDateTime=2017-12-12 14:20:18</code></li>
</ul>
<p>返回：”2017-12-12T14:20:18”</p>
<ul>
<li>请求：<code>http://localhost:8080/date2?localDateTime=2017.12.12 14.20.18</code></li>
</ul>
<p>返回：”2017-12-12T14:20:18”</p>
<ul>
<li>请求：<code>http://localhost:8080/date3?localDate=2017/12/12</code></li>
</ul>
<p>返回：“2017-12-12T00:00:00”</p>
<h3 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h3><p>使用Post请求，放入请求体 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user <span class="title function_">returnUser3</span><span class="params">(<span class="meta">@RequestBody</span> user user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findUser(user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>json数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/request/show2</code></p>
<p>返回数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user <span class="title function_">returnUser</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findUser(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/request/小明</code></p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="多个路径参数"><a href="#多个路径参数" class="headerlink" title="多个路径参数"></a>多个路径参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user <span class="title function_">returnUser2</span><span class="params">(<span class="meta">@PathVariable</span> String name,<span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findIdUser(name,id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/request/小明/1</code></p>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/headers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;user&gt; <span class="title function_">getHeaders</span><span class="params">(<span class="meta">@RequestHeader(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">    System.out.println(userService.findID(id).toString());</span><br><span class="line">    <span class="keyword">return</span> userService.findID(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://localhost:8080/headers</code></p>
<p>请求头中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> <span class="attr">http</span>:<span class="comment">//localhost:8080/headers</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">13</span> ms</span><br><span class="line"><span class="title class_">Network</span></span><br><span class="line"><span class="title class_">Request</span> <span class="title class_">Headers</span></span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">PostmanRuntime</span>/<span class="number">7.39</span><span class="number">.0</span></span><br><span class="line"><span class="title class_">Accept</span>: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Postman-Token: 1ad4d756-3577-4094-846a-caaed58ebc34</span></span><br><span class="line"><span class="comment">Host: localhost:8080</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Content-Length: 26</span></span><br></pre></td></tr></table></figure>
<p>响应数据:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h3 id="为传参进行正则验证"><a href="#为传参进行正则验证" class="headerlink" title="为传参进行正则验证"></a>为传参进行正则验证</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参数前添加注解<code>@Pattern</code>,设置属性<code>regexp</code>进行正则表达式匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/re&quot;)</span></span><br><span class="line"><span class="keyword">public</span> user <span class="title function_">re</span><span class="params">(<span class="meta">@Pattern(regexp = &quot;^\\d&#123;1,5&#125;$&quot;)</span> String id, String name)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findIdUser(name, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当请求参数不匹配时会抛出异常</p>
<p>请求<code>http://127.0.0.1:8080/re?id=112321323&amp;name=来了</code>，此时id长度大于五位数</p>
<p>报错类型是NoResourceFoundException.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2024-06-08T18:37:42.955+00:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad Request&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/re&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用全局异常进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(NoResourceFoundException.class)</span><span class="comment">//捕获异常</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ex1</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;异常！&quot;</span>);</span><br><span class="line">    log.info(ex.getMessage());</span><br><span class="line">    log.info(ex.toString());</span><br><span class="line">    log.info(String.valueOf(ex.getClass()));</span><br><span class="line">    <span class="keyword">return</span> StringUtils.hasLength(ex.getMessage())?ex.toString():<span class="string">&quot;操作失败&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的返回结果报错结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">org.springframework.web.servlet.resource.NoResourceFoundException<span class="punctuation">:</span> No static resource re.</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>存储在客户端的一个小文件,由web服务器发送并存储，有大小限制4kb，Http协议自带</p>
<p>不能跨域使用，即不能在不同的域名ip、端口、协议使用。</p>
<p>现在有<code>HttpOnly</code>和<code>Secure</code>提高安全性，前置禁止JavaScript访问，后者仅通过Https协议传输</p>
<p>Spring中使用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/Cookie1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c2</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">    response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;Kirari&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/Cookie2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;String,Object&gt; <span class="title function_">c2</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">    HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    jakarta.servlet.http.Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie: cookies)&#123;</span><br><span class="line">        map.put(cookie.getName(),cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依次访问以下请求后</p>
<p><code>http://127.0.0.1:8080/Cookie1</code></p>
<p><code>http://127.0.0.1:8080/Cookie2</code></p>
<p>输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;JSESSIONID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;49749D53DEADB60241F6711DE9A044FC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kirari&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>“JSESSIONID” 存在的原因是我先使用session，客户端把SessionID存储在了Cookie，所以会有一个”JSESSIONID”</p>
</blockquote>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>存储在服务器，一个Session有一个特定的SessionID，用于识别不同的用户，SessionID对应的Session保存他们的信息，存储大小限制由服务器决定。</p>
<p>因为是由服务器存储，所以一般不会被篡改。</p>
<p>可以跨域实现访问请求，但是仅限在一个服务器上使用，如果部署在多个服务器实现负载均衡连接到其他的服务器的话会失败。</p>
<p>SessionID由Cookie或者URL传递。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/Session1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">s1</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;kirari&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>  session.getId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/Session2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;String,String&gt; <span class="title function_">s2</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kirari&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String,String&gt; response = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    response.put(<span class="string">&quot;sessionId&quot;</span>, session.getId());</span><br><span class="line">    response.put(<span class="string">&quot;user&quot;</span>, session.getAttribute(<span class="string">&quot;user&quot;</span>).toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别请求</p>
<p><code>http://127.0.0.1:8080/Session1</code></p>
<p><code>http://127.0.0.1:8080/Session2</code></p>
<p>结果是：</p>
<p><code>49749D53DEADB60241F6711DE9A044FC</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sessionId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;49749D53DEADB60241F6711DE9A044FC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kirari&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>令牌，用于验证身份，保存在cookie或session中</p>
<p>认证（Authentication）和授权（Authorization）</p>
<p>服务器通过token验证用户身份，确定用户是本人登录</p>
<p>用户通过认证后，服务器给用户授权访问数据资源</p>
<h5 id="JWT（Json-Web-Token"><a href="#JWT（Json-Web-Token" class="headerlink" title="JWT（Json Web Token)"></a>JWT（Json Web Token)</h5><p>Token的一种形式</p>
<p>由三部分组成的字符串：头部.有效载荷.签名| Header.Payload.Signature</p>
<ul>
<li>Header(头部)：记录令牌类型、签名算法</li>
<li>Payload（有效载荷）：携带一些自定义信息，默认信息，例如用户信息等等。</li>
<li>Signature（签名），防止Token被篡改、验证</li>
</ul>
<p>如名字的Json所写，JWT的数据载体是Jsons数据</p>
<p>例如：</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiS2lyYXJpIiwiaWF0Ijoia2lrbzI1NjgiLCJlbWlsIjoiMTI0NDExODQ0NUBxcS5jb20ifQ.1OUNtc4D_SKyDJp9NX2qpBNUPEvHsQT9PfY7C7cxmoc</code></p>
<p>是一串JWT字符串，包含三部分这三部分的内容是</p>
<p>HEADER:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>PAYLOAD:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kirari&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1683124800</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1714761600</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emil&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1244118445@qq.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Payload 用来存放实际需要传递的数据，JWT 规定的7个官方字段，供选用：</p>
<ol>
<li><ul>
<li>iss (Issuer)：签发者</li>
<li>sub (Subject)：主题</li>
<li>aud (Audience)：接收者</li>
<li>exp (Expiration time)：过期时间  || 格式 为时间戳</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
</li>
</ol>
<p>SIGNATURE:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">	hihihi</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中JWT编码中的a.b.c：a,b仅仅是由 base64编码转化，并不具备加密性，可以被解析。c，也就是签名部分，由a+b的base64编码加上一个自己定义的字符串为签名并使用特定的编码格式加密。</p>
<blockquote>
<p>base64 是 <code>A~Z</code>、<code>a~z</code>、<code>0~9</code>、<code>+  /</code>诸如此类64个可打印字符</p>
</blockquote>
<p>修改/删除/添加任何一个字符都会导致jwt编码验证失效，给定的签名不一致也会导致签名校验失败，并且jwt可以设置失效时间，一定程度上保障了安全性。</p>
<p>使用：</p>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>特别的依赖： <code>NoClassDefFoundError: javax/xml/bind/DatatypeConverter</code> 错误</p>
<p>使用 JWT 库时，找不到 <code>javax.xml.bind.DatatypeConverter</code> 类引起的。这个类在 Java 9 及以后版本中已经被移除。</p>
<p>添加依赖解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/JWT&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJWT</span><span class="params">()</span>&#123;</span><br><span class="line">        String jwt;</span><br><span class="line">        HashMap&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        data.put(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;Kirari&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;emil&quot;</span>,<span class="string">&quot;1244118445@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      使用生成的HMAC-SHA</span></span><br><span class="line"><span class="comment">//        Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        jwt= Jwts.builder()</span></span><br><span class="line"><span class="comment">//                .setClaims(data)//设置有效载荷</span></span><br><span class="line"><span class="comment">//                .signWith(SignatureAlgorithm.HS256,key)//签名算法</span></span><br><span class="line"><span class="comment">//                .setExpiration(new Date(System.currentTimeMillis()+24*60*60*7))//设置有效期</span></span><br><span class="line"><span class="comment">//                .compact();</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         使用key需要多添加的依赖</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;0.11.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;0.11.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;0.11.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">        jwt= Jwts.builder()</span><br><span class="line">                .setSubject(<span class="string">&quot;主题&quot;</span>)</span><br><span class="line">                .setIssuer(<span class="string">&quot;发布者&quot;</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//发行时间</span></span><br><span class="line">                .setClaims(data)<span class="comment">//设置有效载荷</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,<span class="string">&quot;kiko2568&quot;</span>)<span class="comment">//签名算法</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">7</span>*<span class="number">1000</span>))<span class="comment">//设置有效期 单位是毫秒</span></span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/parseJWT&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">parseJwt</span><span class="params">(String jwt)</span>&#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(<span class="string">&quot;kiko2568&quot;</span>)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种解析方法</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;kiko2568&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">parseToken</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jwt == <span class="literal">null</span> || jwt.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;JWT String argument cannot be null or empty.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转码</span></span><br><span class="line">        <span class="type">byte</span>[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(SECRET_KEY);</span><br><span class="line">        <span class="type">Key</span> <span class="variable">signingKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(apiKeySecretBytes, SignatureAlgorithm.HS256.getJcaName());</span><br><span class="line"></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(signingKey)</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请求：</p>
<p><code>http://127.0.0.1:8080/JWT</code></p>
<p>返回：</p>
<p><code>eyJhbGciOiJIUzI1NiJ9.eyJlbWlsIjoiMTI0NDExODQ0NUBxcS5jb20iLCJleHAiOjE3MTc2NjcwOTEsInVzZXIiOiJLaXJhcmkifQ.WysLyZkwdJdRlZafwTT61geaHbsqvpXY3240vYggBm4</code></p>
<p>请求：</p>
<p><code>http://127.0.0.1:8080/parseJWT?jwt=eyJhbGciOiJIUzI1NiJ9.eyJlbWlsIjoiMTI0NDExODQ0NUBxcS5jb20iLCJleHAiOjE3MTc2NjcwOTEsInVzZXIiOiJLaXJhcmkifQ.WysLyZkwdJdRlZafwTT61geaHbsqvpXY3240vYggBm4</code></p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;emil&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1244118445@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1717667091</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kirari&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>当请求的jwt令牌不一样时，或者密钥签名不一样时，会造成500错误</p>
<blockquote>
<p>推荐文章：</p>
<p><a href="https://blog.csdn.net/weixin_40598838/article/details/108575508">微服务下使用jjwt生成token签名signwith带来的问题_jwt signwith-CSDN博客</a></p>
</blockquote>
<hr>
<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p><code>@ResponseBody</code></p>
<ul>
<li>方法注解、类注解</li>
<li>位置Controlller方法、类上</li>
<li>将返回值直接响应，如果是对象、集合，自动转化为json格式</li>
<li><code>@RestController</code>=<code>@ResponseBody</code>+<code>@Controller</code></li>
</ul>
<hr>
<p>统一响应结果:返回给前端时给前端一个统一的格式</p>
<p>Result(code,message,data)    类</p>
<p>其中：code为状态码，200成功，404资源找不到之类</p>
<p>message，传递消息，传递成功失败这类</p>
<p>data，响应的数据</p>
<hr>
<h2 id="拦截器和过滤器"><a href="#拦截器和过滤器" class="headerlink" title="拦截器和过滤器"></a>拦截器和过滤器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Client</span><br><span class="line">    participant DispatcherServlet</span><br><span class="line">    participant HandlerInterceptor</span><br><span class="line">    participant Filter</span><br><span class="line">    Client -&gt;&gt; DispatcherServlet: 发起HTTP请求</span><br><span class="line">    DispatcherServlet -&gt;&gt; HandlerInterceptor: 执行拦截器预处理</span><br><span class="line">    HandlerInterceptor -&gt;&gt; Filter: 执行过滤器链的第一个过滤器</span><br><span class="line">    Filter -&gt;&gt; Filter: 执行过滤器链的其他过滤器</span><br><span class="line">    Filter --&gt;&gt; HandlerInterceptor: 过滤器链结束，返回控制器处理</span><br><span class="line">    HandlerInterceptor --&gt;&gt; DispatcherServlet: 拦截器预处理结束，继续处理请求</span><br><span class="line">    DispatcherServlet -&gt;&gt; DispatcherServlet: 执行控制器处理</span><br><span class="line">    DispatcherServlet --&gt;&gt; Filter: 返回控制器处理结果</span><br><span class="line">    Filter --&gt;&gt; Client: 返回HTTP响应</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote>
<p>引入的接口是<code>import jakarta.servlet.*;</code>下的Filter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置拦截的请求</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入的Filter是   import jakarta.servlet.*;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截到请求就调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//执行下面一句代码是放行操作，如果不执行就不会放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 和初始化一样只调用一次并且默认实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// ↓ 开启spring对javaweb servlet  过滤器的支持</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DashijianApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DashijianApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拦截规则</p>
<p><code>@WebFilter(urlPatterns = &quot;/*&quot;)</code></p>
<ul>
<li><p>/</p>
<p>所有请求，同<code>/*</code></p>
</li>
<li><p>/main</p>
<p>仅<code>&quot;/main&quot;</code>请求可以被拦截</p>
</li>
<li><p>/main/</p>
<p>只有<code>/main/</code>请求拦截</p>
</li>
<li><p>/main/*</p>
<p>/main、/main/、/main/ads、/main/asda/saddw/dasd，均能拦截</p>
</li>
</ul>
<p>过滤器链顺序</p>
<p>多个过滤器连成过滤器链的时候，以栈的形式，按照字典序顺序先进后出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Client</span><br><span class="line">    participant Afilter</span><br><span class="line">    participant Bfilter</span><br><span class="line">    participant 资源</span><br><span class="line">    Client-&gt;&gt;Afilter: 请求拦截</span><br><span class="line">    Afilter-&gt;&gt;Bfilter: A放行/请求被B拦截</span><br><span class="line">    Bfilter-&gt;&gt;资源: 放行</span><br><span class="line">    资源-&gt;&gt;Bfilter: 响应</span><br><span class="line">    Bfilter-&gt;&gt;Afilter: 响应</span><br><span class="line">    Afilter-&gt;&gt;Client: 响应</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>A拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;A拦截前&quot;</span>);</span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    log.info(<span class="string">&quot;A拦截后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>B拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;B拦截前&quot;</span>);</span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    log.info(<span class="string">&quot;B拦截后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-06T22:03:44.124+08:00  INFO 31996 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.Filter.AFilter      : A拦截前</span><br><span class="line">2024-06-06T22:03:44.124+08:00  INFO 31996 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.Filter.BFilter      : B拦截前</span><br><span class="line">2024-06-06T22:03:44.145+08:00  INFO 31996 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.Filter.BFilter      : B拦截后</span><br><span class="line">2024-06-06T22:03:44.146+08:00  INFO 31996 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.Filter.AFilter      : A拦截后</span><br></pre></td></tr></table></figure>
<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源方法前运行      return true 放行 false拦截</span></span><br><span class="line"><span class="comment">     * 如果被拦截器拦截，下面的其他俩个方法不会执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        return HandlerInterceptor.super.preHandle(request, response, handler);</span></span><br><span class="line">       log.info(<span class="string">&quot;111111111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 资源方法运行后运行,没有资源返回不会执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);</span></span><br><span class="line">        log.info(<span class="string">&quot;2222222222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图渲染后运行，最后运行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);</span></span><br><span class="line">        log.info(<span class="string">&quot;3333333333&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WebConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>  <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DemoInterceptor demoInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(demoInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**ude**&quot;</span>)<span class="comment">//配置拦截路径</span></span><br><span class="line">            .excludePathPatterns();<span class="comment">//配置排除路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>preHandle：请求到达接口之前执行，afterCompletion：请求（接口）结束后执行</p>
</blockquote>
<h4 id="拦截规则"><a href="#拦截规则" class="headerlink" title="拦截规则"></a>拦截规则</h4><ul>
<li><p><code>/</code></p>
<p>只拦截<code>localhost/</code>的请求</p>
</li>
<li><p><code>/*</code></p>
<p>拦截所有<code>localhost/dddd</code>请求，不包括<code>localhost/dddd/</code></p>
</li>
<li><p><code>/**</code></p>
<p>所有请求</p>
</li>
<li><p><code>/admin/</code></p>
<p>只有<code>/admin/</code></p>
</li>
<li><p><code>/admin/*</code></p>
<p>任意<code>/admin/xxx</code></p>
</li>
<li><p><code>/admin/**</code></p>
<p>任意<code>/admin</code>开头的路径，包括<code>/admin</code>、<code>/admin/</code></p>
</li>
<li><p><code>/admin**</code></p>
<p>任意<code>/admin</code>开头的路径，包括<code>/admin</code>，甚至是<code>/adminhello</code>,不包括<code>/admin/</code>等等，只是admin开头的当前路径</p>
</li>
<li><p><code>/admin*</code></p>
<p>同上</p>
</li>
<li><p><code>/**admin</code>、<code>/*admin</code></p>
<p>结尾是admin就被拦截</p>
</li>
<li><p><code>/*admin*</code>、<code>/**admin*</code>、<code>/*admin**</code>、<code>/**admin**</code></p>
<p>中间是admin被拦截</p>
</li>
</ul>
<p>核心👆</p>
<hr>
<p>衍变👇</p>
<ul>
<li><p><code>/admin**/</code></p>
<p>只有<code>/adminxxxxx/</code></p>
</li>
<li><p><code>/admin*/</code></p>
<p>同上</p>
</li>
<li><p><code>/admin*/*</code></p>
<p>只是<code>/adminxxxxxxx/xxxx</code>一级目录</p>
</li>
<li><p><code>/admin*/**</code></p>
<p>任意<code>/adminxxxxxxx/**</code>子目录</p>
</li>
<li><p><code>/admin**/*</code></p>
<p>同<code>/admin*/*</code></p>
</li>
<li><p><code>/admin**/**</code></p>
<p>同<code>/admin**/**</code></p>
</li>
<li><p><code>/*/admin</code>、<code>/**/admin</code></p>
<p>单级目录下的admin，任意一级目录下的admin</p>
</li>
<li><p><code>/**/admin/**</code></p>
<p>中间目录有admin就被拦截</p>
</li>
</ul>
<hr>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//捕获所有异常</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;异常！&quot;</span>);</span><br><span class="line">        log.info(ex.getMessage());</span><br><span class="line">        log.info(ex.toString());</span><br><span class="line">        log.info(String.valueOf(ex.getClass()));</span><br><span class="line">        <span class="keyword">return</span> ex.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@RestControllerAdvice</code>=<code>@ResponseBody</code>+<code>@ControllerAdvice</code></li>
</ul>
<p><code>@ResponseBody</code>是转化返回数据为String或Json数据</p>
<p><code>@ControllerAdvice</code>标记这个类为全局异常处理类</p>
<ul>
<li><p><code>@ExceptionHandler()</code>甚至接收异常的数据</p>
<ul>
<li><code>Exception.class</code>表示全部异常都接收</li>
</ul>
</li>
<li><p><code>@ResponseStatus()</code>服务器返回的状态码</p>
<ul>
<li><code>@ResponseStatus(HttpStatus.NOT_FOUND)</code>返回404</li>
<li><code>@ResponseStatus(HttpStatus.BAD_REQUEST)</code>返回400</li>
<li><code>@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</code>返回内部服务器错误500</li>
</ul>
</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在你想管理事务的方法、类、接口上加上<code>import org.springframework.transaction.annotation.Transactional;</code>的 <code>@Transactional</code>，SpringBoot就会自动帮你开启事务管理了</p>
<p>在方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(user user)</span> &#123;</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">    <span class="keyword">return</span> userMapper.update(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问该Sevice后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3440b721]</span><br><span class="line">JDBC Connection [HikariProxyConnection@1293827318 wrapping com.mysql.cj.jdbc.ConnectionImpl@32ab408e] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 来了(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3440b721]</span><br><span class="line">Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3440b721]</span><br><span class="line">Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3440b721]</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">	at com.kirari.dashijian.service.UserService.update(UserService.java:56)</span><br><span class="line">	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)</span><br><span class="line">	at java.base/java.lang.reflect.Method.invoke(Method.java:577)</span><br></pre></td></tr></table></figure>
<p>查看数据库并没有实现数据更新</p>
<p>在类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br></pre></td></tr></table></figure>
<p>类的所有方法都开启事务管理</p>
<h4 id="事务处理异常范围"><a href="#事务处理异常范围" class="headerlink" title="事务处理异常范围"></a>事务处理异常范围</h4><p>事务异常默认只实现RuntimeException，当其他异常发生时，并不会回滚异常</p>
<p>通过设置rollbackFor属性设置处理的异常范围</p>
<p>如下是处理全部异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure>
<h4 id="嵌套事务-传播行为"><a href="#嵌套事务-传播行为" class="headerlink" title="嵌套事务-传播行为"></a>嵌套事务-传播行为</h4><p>指一个事务中的方法中包含另外一个有事务的方法，这个被包含的事务该如何执行</p>
<p>设置<code>propagation</code>的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    B();    </span><br><span class="line">   	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class,propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p> 此时B的propagation属性值觉得了B在A中执行的事务管理级别</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUIRED</td>
<td>（默认）A有事务就加入，没有事务就创建新事务</td>
</tr>
<tr>
<td>REQUIRES_NEW</td>
<td>无论A有没有事务都创建新事务</td>
</tr>
<tr>
<td>SUPPORTS</td>
<td>A有事务就加入，无事务就在无事务的情况下运行，不创建新事务</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>不支持事务，在无事务状态下运行，<br />如果A有事务，A的事务就暂停挂起，运行完B方法再进行A的方法执行以及事务管理</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>A必须有 事务否则异常</td>
</tr>
<tr>
<td>NEVER</td>
<td>A必须无事务，否则异常</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>属性为REQUIRED时，A或者B发生异常了，整体回滚，因为他们是一个事务</li>
<li>属性为REQUIRES_NEW时，A或B发生异常了，互不影响，只回滚发生异常的方法。</li>
</ul>
<hr>
<h4 id="查看事务日志"><a href="#查看事务日志" class="headerlink" title="查看事务日志"></a>查看事务日志</h4><p>配置类</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<p>一般的，日志会有几个级别的输出，默认info</p>
<ul>
<li><p><strong>TRACE</strong>：</p>
<p>最详细的日志级别。记录非常细粒度的信息，主要用于开发和调试阶段</p>
<p>用于记录非常详细的系统信息。</p>
<p>示例：记录每个方法的进入和退出，详细的变量状态等。</p>
</li>
<li><p><strong>DEBUG</strong>：</p>
<p>用于调试信息。包含较详细的调试信息，便于开发人员了解应用的内部状态。</p>
<p>用于调试信息，帮助开发人员追踪应用的执行过程。</p>
<p>示例：记录SQL查询语句、请求和响应的详细信息等。</p>
</li>
<li><p><strong>INFO</strong>：</p>
<p>用于信息性消息。一般用于记录应用的正常运行状态，重要的事件和信息。</p>
<p>用于记录应用的主要事件和操作。</p>
<p>示例：应用启动和关闭、重要配置的加载、重要任务的完成等。</p>
</li>
<li><p><strong>WARN</strong>：</p>
<p>用于警告信息。表示潜在的问题，系统可以继续运行，但需要注意。</p>
<p>用于记录潜在的问题。</p>
<p>示例：配置项缺失但有默认值、不推荐的API使用等。</p>
</li>
<li><p><strong>ERROR</strong>：</p>
<p>用于错误信息。表示发生了错误，可能导致某些功能不能正常工作。</p>
<p>用于记录错误事件。</p>
<p>示例：捕获的异常、数据库连接失败等。</p>
</li>
<li><p><strong>FATAL</strong>：</p>
<p>表示非常严重的错误，可能导致应用程序终止。</p>
<p>用于记录导致系统崩溃的严重错误。</p>
<p>示例：应用程序无法启动、关键服务无法初始化等。</p>
</li>
</ul>
<blockquote>
<p>关于SpringBoot无需再设置<code>@EnableTransactionManagement</code>,</p>
<p><a href="https://blog.csdn.net/qq_40794973/article/details/106597952">Spring Boot中不需要加 @EnableTransactionManagement 来开启事务_@enabletransactionmanagement(proxytargetclass = tr-CSDN博客</a></p>
</blockquote>
<p>自动配置类中的事务配置类<code>TransactionAutoConfiguration.java</code>中有这个一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(&#123;TransactionManager.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;AbstractTransactionManagementConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableTransactionManagementConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnableTransactionManagementConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@EnableTransactionManagement(</span></span><br><span class="line"><span class="meta">        proxyTargetClass = true</span></span><br><span class="line"><span class="meta">    )</span></span><br></pre></td></tr></table></figure>
<p>暂时看不懂，只明白大概是说存在这个类<code>TransactionManager.class</code>，且不存在<code>AbstractTransactionManagementConfiguration.class</code>这类，才会创建和加载这个配置类。</p>
<p>大概是存在<code>@Transaction</code>，且没有自定义<code>AbstractTransactionManagementConfiguration</code>继承这个抽象类的时候自动配置。</p>
<h2 id="AOC-面向切片编程"><a href="#AOC-面向切片编程" class="headerlink" title="AOC-面向切片编程"></a>AOC-面向切片编程</h2><p>面向特定的方法进行编程，对特定的一个或多个原来方法的增强、修改等等</p>
<p>例子：</p>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot事务管理的原理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//标记AOP</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demoAop</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切入表达式</span></span><br><span class="line">    <span class="comment">//匹配的路径，代表哪个路径下的类方法执行被提取到这里来</span></span><br><span class="line">    <span class="comment">//代表下面的方法执行的时候会进行下面的操作</span></span><br><span class="line">        <span class="meta">@Around(&quot;execution(* com.kirari.dashijian.service.UserService.update())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Transaction</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//执行原来的方法</span></span><br><span class="line">             result = joinPoint.proceed();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">          log.info(<span class="string">&quot;出现错误,事务回滚&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">      log.info(<span class="string">&quot;事务提交&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为所有方法添加一个 查看执行时间的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//给IOC容器管理</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为AOP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.kirari.dashijian.*.*(..))&quot;)</span><span class="comment">//切入点表达式</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">time</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();<span class="comment">//原方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;耗时&quot;</span>+(end-begin));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AOC的核心概念"><a href="#AOC的核心概念" class="headerlink" title="AOC的核心概念"></a>AOC的核心概念</h3><ul>
<li>连接点：JoinPoint,被AOP控制的方法，即原方法</li>
<li>通知：Advice，可重复的逻辑，即AOP声明实现的 方法</li>
<li>切入点：PointCut，切面表达式匹配成功的方法</li>
<li>切面：Aspect，通知+切入点</li>
<li>目标对象：Target，原来方法所属的对象/类</li>
</ul>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240607162510136.webp" alt="AOP类"></p>
<p>其中@Aspect标记为切面类</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240607162711982.webp" alt="原方法"></p>
<h3 id="AOP实现原理"><a href="#AOP实现原理" class="headerlink" title="AOP实现原理"></a>AOP实现原理</h3><p>通过动态代理技术，使用代理对象实现AOP操作</p>
<p>假如我们有一个AOP类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.kirari.dashijian.service.UserService.update())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">time</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;耗时&quot;</span>+(end-begin));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个原方法类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(user user)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> userMapper.update(user);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在执行<code>UserService.updete(user)</code>方法的时候，底层生成一个代理对象，并且实现了原方法+AOP方法，即通知：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(user user)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> userMapper.update(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;耗时&quot;</span>+(end-begin));</span><br><span class="line"></span><br><span class="line"> 	   <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时在调用这方法的控制层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">( user user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>@Autowired</code>自动注入的UserService类就不是原来的目标对象了，而是代理对象UserServiceProxy，实现的方法此时就是修改后的方法。</p>
<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><h4 id="通知-Advice-类型"><a href="#通知-Advice-类型" class="headerlink" title="通知(Advice)类型"></a>通知(Advice)类型</h4><ul>
<li><strong>前置通知（Before ）</strong>：在目标方法执行之前运行。</li>
<li><strong>后置通知（After ）</strong>：在目标方法执行之后运行，无论方法是否成功执行。</li>
<li><strong>返回通知（After Returning ）</strong>：在目标方法成功执行并返回结果之后运行。</li>
<li><strong>异常通知（After Throwing ）</strong>：在目标方法抛出异常之后运行。</li>
<li><strong>环绕通知（Around ）</strong>：包围目标方法的执行，可以在方法执行前后自定义行为。</li>
</ul>
<p>测试顺序:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正常执行时顺序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-07T18:56:01.093+08:00  INFO 12312 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : 环绕前</span><br><span class="line">2024-06-07T18:56:01.093+08:00  INFO 12312 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3e70fe17]</span><br><span class="line">JDBC Connection [HikariProxyConnection@716877553 wrapping com.mysql.cj.jdbc.ConnectionImpl@7cfb8e98] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 啦啦(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3e70fe17]</span><br><span class="line">2024-06-07T18:56:01.144+08:00  INFO 12312 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : afterReturning</span><br><span class="line">2024-06-07T18:56:01.145+08:00  INFO 12312 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : after</span><br><span class="line">2024-06-07T18:56:01.145+08:00  INFO 12312 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : 环绕后</span><br></pre></td></tr></table></figure>
<p>出现异常时顺序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-07T18:59:34.678+08:00  INFO 25016 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : 环绕前</span><br><span class="line">2024-06-07T18:59:34.678+08:00  INFO 25016 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f3b557e]</span><br><span class="line">JDBC Connection [HikariProxyConnection@254878470 wrapping com.mysql.cj.jdbc.ConnectionImpl@3e6748ae] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 啦啦(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f3b557e]</span><br><span class="line">2024-06-07T18:59:34.710+08:00  INFO 25016 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : afterThrowing</span><br><span class="line">2024-06-07T18:59:34.710+08:00  INFO 25016 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : after</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p>返回通知在目标方法成功执行并返回结果之后运行，可以访问返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterReturningAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;execution(* com.example.service.*.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After returning advice executed, result: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异常通知在目标方法抛出异常之后运行，可以处理异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterThrowingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;execution(* com.example.service.*.*(..))&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">(Exception exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After throwing advice executed, exception: &quot;</span> + exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="多个通知时执行顺序"><a href="#多个通知时执行顺序" class="headerlink" title="多个通知时执行顺序"></a>多个通知时执行顺序</h4><h5 id="默认顺序"><a href="#默认顺序" class="headerlink" title="默认顺序"></a>默认顺序</h5><p><strong>默认按照字典序排序，按照栈的模式先进后出</strong></p>
<p>字典序前的先执行</p>
<hr>
<p>测试：我定义了、<code>AAAop</code>、<code>Order</code>、<code>ZZzAop</code>三个实现了不同通知类型但是切入点都一样的方法</p>
<p>具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AAA</code> 和<code>ZZZ</code>仅仅是修改参数，不贴代码出来了</p>
<p>这是结果:</p>
<p>正常运行时：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:环绕前</span><br><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:before</span><br><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕前</span><br><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:before</span><br><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕前</span><br><span class="line">2024-06-07T19:11:55.840+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@fb571f]</span><br><span class="line">JDBC Connection [HikariProxyConnection@2005302264 wrapping com.mysql.cj.jdbc.ConnectionImpl@44fd7ba4] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 来了(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@fb571f]</span><br><span class="line">2024-06-07T19:11:55.877+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:afterReturning</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:after</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕后</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:afterReturning</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:after</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕后</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:afterReturning</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:after</span><br><span class="line">2024-06-07T19:11:55.878+08:00  INFO 25660 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:环绕后</span><br></pre></td></tr></table></figure>
<p>异常时：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-07T19:10:21.132+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization <span class="keyword">in</span> 1 ms</span><br><span class="line">2024-06-07T19:10:21.180+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:环绕前</span><br><span class="line">2024-06-07T19:10:21.181+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:before</span><br><span class="line">2024-06-07T19:10:21.181+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕前</span><br><span class="line">2024-06-07T19:10:21.181+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:before</span><br><span class="line">2024-06-07T19:10:21.181+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕前</span><br><span class="line">2024-06-07T19:10:21.181+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@67fd0c2]</span><br><span class="line">JDBC Connection [HikariProxyConnection@1085675753 wrapping com.mysql.cj.jdbc.ConnectionImpl@69d103f0] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 来了(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@67fd0c2]</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:afterThrowing</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:after</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:afterThrowing</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:after</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:afterThrowing</span><br><span class="line">2024-06-07T19:10:21.221+08:00  INFO 18560 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:after</span><br></pre></td></tr></table></figure>
<p>与理论一致</p>
<hr>
<h5 id="自定义顺序"><a href="#自定义顺序" class="headerlink" title="自定义顺序"></a>自定义顺序</h5><p>使用<code>@Order(数字)</code>进行自定义顺序</p>
<p><strong>数字越小优先级越高</strong></p>
<hr>
<p>分别对三个类进行自定义排序</p>
<ul>
<li><p>```java<br>@Order(1)<br>public class OrderAop{}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Order(2)</span><br><span class="line">  public class ZZzAop&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>```java<br>@Order(3)<br>public class AAAop{}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"></span><br><span class="line">正常运行：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">2024-06-07T19:21:07.065+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.OrderAop        : Order:环绕前</span><br><span class="line">2024-06-07T19:21:07.065+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.OrderAop        : Order:before</span><br><span class="line">2024-06-07T19:21:07.065+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕前</span><br><span class="line">2024-06-07T19:21:07.065+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:before</span><br><span class="line">2024-06-07T19:21:07.066+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.AAAop           : AAAop:环绕前</span><br><span class="line">2024-06-07T19:21:07.066+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.AAAop           : AAAop:before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@78944385]</span><br><span class="line">JDBC Connection [HikariProxyConnection@1924583771 wrapping com.mysql.cj.jdbc.ConnectionImpl@74fb5b59] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user set name=?,pass=? where id= ?</span><br><span class="line">==&gt; Parameters: 来了(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@78944385]</span><br><span class="line">Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@78944385]</span><br><span class="line">Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@78944385]</span><br><span class="line">Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@78944385]</span><br><span class="line">2024-06-07T19:21:07.110+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.AAAop           : AAAop:afterReturning</span><br><span class="line">2024-06-07T19:21:07.110+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.AAAop           : AAAop:after</span><br><span class="line">2024-06-07T19:21:07.110+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.AAAop           : AAAop:环绕后</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:afterReturning</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:after</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕后</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.OrderAop        : Order:afterReturning</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.OrderAop        : Order:after</span><br><span class="line">2024-06-07T19:21:07.111+08:00  INFO 25560 --- [dashijian] [nio-8080-exec-2] com.kirari.dashijian.aop.OrderAop        : Order:环绕后</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>order是1所以最先运行</p>
<p>异常：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕前</span><br><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:before</span><br><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:环绕前</span><br><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:before</span><br><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:环绕前</span><br><span class="line">2024-06-07T19:22:43.442+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:before</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization <span class="keyword">for</span> SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@28dedd9a]</span><br><span class="line">JDBC Connection [HikariProxyConnection@1834732310 wrapping com.mysql.cj.jdbc.ConnectionImpl@74fb5b59] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update user <span class="built_in">set</span> name=?,pass=? <span class="built_in">where</span> <span class="built_in">id</span>= ?</span><br><span class="line">==&gt; Parameters: 来了(String), 123456(String), 7(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@28dedd9a]</span><br><span class="line">Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@28dedd9a]</span><br><span class="line">Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@28dedd9a]</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:afterThrowing</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.AAAop           : AAAop:after</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:afterThrowing</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.ZZzAop          : ZZzAop:after</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:afterThrowing</span><br><span class="line">2024-06-07T19:22:43.482+08:00  INFO 24416 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:after</span><br></pre></td></tr></table></figure>
<p>与理论一致</p>
<hr>
<h3 id="多个相同的切入点表达式抽取"><a href="#多个相同的切入点表达式抽取" class="headerlink" title="多个相同的切入点表达式抽取"></a>多个相同的切入点表达式抽取</h3><p><code>@PointCut</code></p>
<p>通过<code>@PointCut</code>注解可以把相同的地址提取出来取个别名，每次打的切入点表达式的时候就不需要全打出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kkk</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.kirari.dashijian.service.UserService.select(..))&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lll</span><span class="params">()</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>类名的修饰符，<code>private</code>代表只能在这个类中使用，其他类要使用要把修饰符改为<code>public</code></p>
<p>本体类中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAop</span> &#123;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他类中使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AAAop</span> &#123;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;com.kirari.dashijian.aop.OrderAop.kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;AAAop:afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kkk</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><p><code>execution(访问修饰符号 返回值 包名.类名.方法名(方法参数) throw 异常)</code></p>
<p>其中<strong>访问修饰符</strong>(public/private/protected)、<strong>包名.类名</strong>、<strong>throw 异常</strong>可以省略</p>
<p>完整版例子：<code>@Pointcut(&quot;execution(public int com.kirari.dashijian.service.UserService.update(int) throws Exception)&quot;)</code></p>
<blockquote>
<p>包名.类名不建议省略，会出现匹配不同类与包下的方法，导致不能得到想要的结果</p>
</blockquote>
<p>特殊符号/通配符：</p>
<ul>
<li><p><code>*</code></p>
<p>表示单个独立的任意一个包名/类名/方法名/参数的任意<strong>一个</strong>参数，也可以匹配包、类、方法名的一部分，和上面的拦截器是一致的</p>
</li>
<li><p><code>..</code></p>
<p>任意数目层级的包，任意类型个数的参数</p>
</li>
</ul>
<hr>
<p><code>&quot;execution( * com..UserService.findAllUser(..))&quot;</code></p>
<p>com任意层级下UserService.findAllUser任意参数的方法</p>
<hr>
<p>通配所有包名类名方法名任意参数</p>
<p><code>execution(* *(..))</code></p>
<hr>
<blockquote>
<p><code>@Pointcut(&quot;execution( * com.kirari.dashijian.service.UserService.update())&quot;)</code>参数里没有<code>..</code>或者<code>*</code>的话匹配的是无参数构造()</p>
<p>当参数里是<code>..</code>的话，无参构造也可以实现匹配，但是<code>*</code>必须匹配单个参数</p>
</blockquote>
<p>关于匹配包名/类名/方法名的某一段</p>
<p><code>&quot;execution( * com.kirari.dashijian.service.UserS*.findAllUser(..))&quot;</code></p>
<p>我们看见原来的<code>UserService</code>变成了<code>UserS*</code>，实现了原本的<code>com.kirari.dashijian.service.UserService.findAllUser()</code>方法后，出现了通知信息，所以是像拦截器一样包括匹配一段包名/类名/方法名的</p>
<p>修改为<code>*erS*</code>时也能匹配到，可见一段字符xxxxx，当<code>*</code>在前面匹配xxx为后缀的包名/类名/方法名，<code>*</code>在前面匹配前缀为xxx的包名/类名/方法名，当两头出现<code>*</code>则是匹配中间为xxx的路径</p>
<hr>
<h5 id="复杂判断"><a href="#复杂判断" class="headerlink" title="复杂判断"></a>复杂判断</h5><p>可以通过<code>||</code>、<code>&amp;&amp;</code>、<code>!</code>组合进行复杂判断</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution( * com..UserService.findAllUser(..) ) ||&quot; +</span></span><br><span class="line"><span class="meta">        &quot;execution(* com.kirari.dashijian.service.UserService.update(..))&quot;</span></span><br><span class="line"><span class="meta">         )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution( * com..UserService.findAllUser(..) ) &amp;&amp;&quot; +</span></span><br><span class="line"><span class="meta">          &quot;execution(* *(..))&quot;</span></span><br><span class="line"><span class="meta">         )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* *(..)) &amp;&amp;&quot;+</span></span><br><span class="line"><span class="meta">          &quot;!execution( * com..UserService.findAllUser(..) ) &quot;</span></span><br><span class="line"><span class="meta">         )</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="annotation-、-within"><a href="#annotation-、-within" class="headerlink" title="@annotation()、@within()"></a>@annotation()、@within()</h4><ul>
<li><p>@annotation() 使用注解来定位匹配方法</p>
</li>
<li><p>@within() 使用注解定位匹配接口、类</p>
</li>
</ul>
<p>首先先定义一个自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE ,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AopTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ElementType.METHOD</code>注解可以应用于方法</li>
<li><code>ElementType.TYPE</code>注解可以应用于类、接口（包括注解类型）或枚举声明</li>
</ul>
<p>Aop类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@within(AopTest)||&quot; +</span></span><br><span class="line"><span class="meta">        &quot;@annotation(AopTest)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kkk</span><span class="params">()</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>在类上使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AopTest</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line">        <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在方法上使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@AopTest</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;user&gt; <span class="title function_">findAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>想在想使用的方法/类上进行切片，就是用注解就可以控制到了</p>
<hr>
<h3 id="在aop中获取连接点信息"><a href="#在aop中获取连接点信息" class="headerlink" title="在aop中获取连接点信息"></a>在aop中获取连接点信息</h3><p>around可以使用ProceedingJoinPoint类的方法而其他的四个通知类只有使用JoinPoint这个方法</p>
<p>JoinPoint是ProceedingJoinPoint的父类</p>
<p>核心方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName(); <span class="comment">//获取类名</span></span><br><span class="line"><span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();					<span class="comment">//获取目标对象名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();			<span class="comment">//获取方法名</span></span><br><span class="line">Object[] args = joinPoint.getArgs();						<span class="comment">//获取参数</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;类名：&quot;</span>+className);</span><br><span class="line">System.out.println(<span class="string">&quot;方法名称: &quot;</span> + methodName);</span><br><span class="line">System.out.println(<span class="string">&quot;目标对象: &quot;</span> + signature);</span><br><span class="line">System.out.println(<span class="string">&quot;参数: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot; - &quot;</span> + arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@within(AopTest)||&quot; +</span></span><br><span class="line"><span class="meta">            &quot;@annotation(AopTest)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kkk</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterReturning&quot;</span>);</span><br><span class="line">        printJoinPoint(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:afterThrowing&quot;</span>);</span><br><span class="line">        printJoinPoint(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:after&quot;</span>);</span><br><span class="line">        printJoinPoint(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Order:before&quot;</span>);</span><br><span class="line">        printJoinPoint(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;kkk()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        printJoinPoint(joinPoint);</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;Order:环绕后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printJoinPoint</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;类名：&quot;</span>+className);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法名称: &quot;</span> + methodName);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标对象: &quot;</span> + signature);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; - &quot;</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2024-06-08T02:39:28.477+08:00  INFO 28640 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕前</span><br><span class="line">2024-06-08T02:39:28.477+08:00  INFO 28640 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:before</span><br><span class="line">类名：com.kirari.dashijian.service.StudentService</span><br><span class="line">方法名称: findStudentIdName</span><br><span class="line">目标对象: Student com.kirari.dashijian.service.StudentService.findStudentIdName(Integer,String)</span><br><span class="line">参数: </span><br><span class="line"> - 1</span><br><span class="line"> - 张三</span><br><span class="line">2024-06-08T02:39:28.536+08:00  INFO 28640 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:afterReturning</span><br><span class="line">类名：com.kirari.dashijian.service.StudentService</span><br><span class="line">方法名称: findStudentIdName</span><br><span class="line">目标对象: Student com.kirari.dashijian.service.StudentService.findStudentIdName(Integer,String)</span><br><span class="line">参数: </span><br><span class="line"> - 1</span><br><span class="line"> - 张三</span><br><span class="line">2024-06-08T02:39:28.537+08:00  INFO 28640 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:after</span><br><span class="line">类名：com.kirari.dashijian.service.StudentService</span><br><span class="line">方法名称: findStudentIdName</span><br><span class="line">目标对象: Student com.kirari.dashijian.service.StudentService.findStudentIdName(Integer,String)</span><br><span class="line">参数: </span><br><span class="line"> - 1</span><br><span class="line"> - 张三</span><br><span class="line"> </span><br><span class="line">类名：com.kirari.dashijian.service.StudentService</span><br><span class="line">方法名称: findStudentIdName</span><br><span class="line">目标对象: Student com.kirari.dashijian.service.StudentService.findStudentIdName(Integer,String)</span><br><span class="line">参数: </span><br><span class="line"> - 1</span><br><span class="line"> - 张三</span><br><span class="line">2024-06-08T02:39:28.537+08:00  INFO 28640 --- [dashijian] [nio-8080-exec-1] com.kirari.dashijian.aop.OrderAop        : Order:环绕后</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>都可以查询到目标对象的 信息</p>
<hr>
<h2 id="SpringDATA自动设置CRUD"><a href="#SpringDATA自动设置CRUD" class="headerlink" title="SpringDATA自动设置CRUD"></a>SpringDATA自动设置CRUD</h2><p>JPA</p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>springboot貌似集成了</p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>    <span class="comment">//设置实体类</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span>  <span class="comment">//主键</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span><span class="comment">//映射sql表列名</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name,pass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>持久层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Repository</span>已经不是必须引入了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;user, Long&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类似 mybatis-plus</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;user&gt; <span class="title function_">returnUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不在本包的时候,在启动类引入其他包 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;com.kirari.dashijian.dao&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="对于响应格式的统一"><a href="#对于响应格式的统一" class="headerlink" title="对于响应格式的统一"></a>对于响应格式的统一</h3><p>响应数据给前端，有时候是数组、字符串、int型数值，又或者是List型，混乱不堪的格式交杂，没有规范可言。</p>
<p>定义一种响应格式给前端，前端可以更好的接收数据</p>
<p>一个响应数据应该有响应码、响应信息和响应数据这三种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *	响应码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">//响应信息</span></span><br><span class="line">    String message;</span><br><span class="line">	<span class="comment">//数据data</span></span><br><span class="line">    Object data;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String message, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String message, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">success</span><span class="params">(<span class="type">int</span> code, String message, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><h4 id="配置文件不同方式、配置文件顺序"><a href="#配置文件不同方式、配置文件顺序" class="headerlink" title="配置文件不同方式、配置文件顺序"></a>配置文件不同方式、配置文件顺序</h4><p>优先级从低到高</p>
<ul>
<li>yaml</li>
<li>yml</li>
<li><p>properties</p>
</li>
<li><p>java系统属性/环境变量</p>
</li>
<li>命令行参数</li>
</ul>
<p>打包后可以在同目录下配置一个配置文件.yml进行配置信息，优先级大于jar源项目的.yml配置，小于环境变量和命令行参数</p>
<h4 id="多个环境部署"><a href="#多个环境部署" class="headerlink" title="多个环境部署"></a>多个环境部署</h4><p>同一个项目运行、测试、生产、部署的环境不一样，例如数据库等等，难道要把项目重新生成一份写下不同的配置页面吗？</p>
<p>单个文件中可以在配置<code>---</code>分隔不同的配置</p>
<h5 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h5><p><code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境所属</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果默认环境中已有配置，但是单独配置的配置会优先启用，覆盖掉默认配置，例如上面的 配置中默认配置了8080端口，但是优先启用了dev环境，访问8080的时候是无法获得界面，而访问8081才可以访问界面</p>
</blockquote>
<p>使用<code>---</code>分隔不同环境配置。</p>
<p>由以下属性值取名称</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">name</span></span><br></pre></td></tr></table></figure>
<p>在默认环境中使用名称来设置当前环境值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>这是运行后的提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2024-06-10T15:13:16.224+08:00  INFO 5196 --- [dashijian] [           main] c.kirari.dashijian.DashijianApplication  : The following 1 profile is active: &quot;dev&quot;</span><br><span class="line">2024-06-10T15:13:16.856+08:00  INFO 5196 --- [dashijian] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.</span><br><span class="line">2024-06-10T15:13:16.888+08:00  INFO 5196 --- [dashijian] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26 ms. Found 1 JPA repository interface.</span><br><span class="line">2024-06-10T15:13:17.435+08:00  INFO 5196 --- [dashijian] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8081 (http)</span><br></pre></td></tr></table></figure>
<p>默认环境中可以配置不同环境中共有的配置而不用单独每个都声明一遍,会在不同配置上生效</p>
<p>使用命令行指定激活的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用开发环境配置</span></span><br><span class="line">java -jar myapp.jar --spring.profiles.active=dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用测试环境配置</span></span><br><span class="line">java -jar myapp.jar --spring.profiles.active=test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用生产环境配置</span></span><br><span class="line">java -jar myapp.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>
<p>环境变量指定配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SPRING_PROFILES_ACTIVE=dev</span><br><span class="line">java -jar myapp.jar</span><br><span class="line"></span><br><span class="line">export SPRING_PROFILES_ACTIVE=test</span><br><span class="line">java -jar myapp.jar</span><br><span class="line"></span><br><span class="line">export SPRING_PROFILES_ACTIVE=prod</span><br><span class="line">java -jar myapp.jar</span><br></pre></td></tr></table></figure>
<h5 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h5><p>如果把所有的文件配置都写到同一个 文件下很臃肿</p>
<p>文件目录如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── main</span><br><span class="line">│   ├── java</span><br><span class="line">│   │   └── com</span><br><span class="line">│   │       └── example</span><br><span class="line">│   │           └── demo</span><br><span class="line">│   │               ├── DemoApplication.java</span><br><span class="line">│   └── resources</span><br><span class="line">│       ├── application.yml</span><br><span class="line">│       ├── application-dev.yml</span><br><span class="line">│       ├── application-test.yml</span><br><span class="line">│       └── application-prod.yml</span><br></pre></td></tr></table></figure>
<p> <code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p> <code>application-dev.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
<p><code>application-test.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-test.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  <code>application-prod.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-prod.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br></pre></td></tr></table></figure>
<p>通过这种方式可以配置你想使用的环境</p>
<h5 id="多文件且分组"><a href="#多文件且分组" class="headerlink" title="多文件且分组"></a>多文件且分组</h5><p>虽然是多文件设置不同环境的配置显得不臃肿了，但是当个文件里写满了所有配置还是不容易查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── main</span><br><span class="line">│   ├── java</span><br><span class="line">│   │   └── com</span><br><span class="line">│   │       └── example</span><br><span class="line">│   │           └── demo</span><br><span class="line">│   │               ├── config</span><br><span class="line">│   │               │   └── DataSourceConfig.java</span><br><span class="line">│   │               ├── service</span><br><span class="line">│   │               │   └── DataSourceService.java</span><br><span class="line">│   │               ├── DemoApplication.java</span><br><span class="line">│   └── resources</span><br><span class="line">│       ├── application.yml</span><br><span class="line">│       ├── application-devServer.yml</span><br><span class="line">│       ├── application-devServer.yml</span><br><span class="line">│       ├── application-devSelf.yml</span><br><span class="line">│       ├── application-test.yml</span><br><span class="line">│       └── application-prod.yml</span><br></pre></td></tr></table></figure>
<p>此时的 <code>application-devServer.yml</code>、<code>application-devDB.yml</code>、<code>application-devSelf.yml</code>，配置着不同类型的配置</p>
<p>在<code>application.yml</code>中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">devServer</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">devDb</span></span><br><span class="line">      <span class="attr">por:</span> <span class="string">pro,proDb</span></span><br></pre></td></tr></table></figure>
<p>俩种方式都可以实现分组功能</p>
<h3 id="自动实现Get、Set、ToString"><a href="#自动实现Get、Set、ToString" class="headerlink" title="自动实现Get、Set、ToString"></a>自动实现Get、Set、ToString</h3><ol>
<li><p><code>lombok</code>依赖</p>
</li>
<li><p>使用注解@Data</p>
</li>
<li>可选<code>@NoArgsConstructor</code>无参数构造方法、<code>@AllArgsConstructor</code>全参数构造方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id,age;</span><br><span class="line">    String studentId,name,password,sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><code>@Slf4j</code></p>
<p><code>lombok</code>依赖</p>
<p><a href="https://projectlombok.org/features/log">@Log (and friends) (projectlombok.org)</a></p>
<p>有几种选择：</p>
<ul>
<li><p><code>@CommonsLog</code></p>
<p>创建<code>private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</code></p>
</li>
<li><p><code>@Flogger</code></p>
<p>创建<code>private static final com.google.common.flogger.FluentLogger log = com.google.common.flogger.FluentLogger.forEnclosingClass();</code></p>
</li>
<li><p><code>@JBossLog</code></p>
<p>创建<code>private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p><code>@Log</code></p>
<p>创建<code>private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</code></p>
</li>
<li><p><code>@Log4j</code></p>
<p>创建<code>private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p><code>@Log4j2</code></p>
<p>创建<code>private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</code></p>
</li>
<li><p><code>@Slf4j</code></p>
<p>创建<code>private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</code></p>
</li>
<li><p><code>@XSlf4j</code></p>
<p>创建<code>private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</code></p>
</li>
<li><p><code>@CustomLog</code></p>
<p>创建<code>private static final *com.foo.your.Logger* log = *com.foo.your.LoggerFactory.createYourLogger*(LogExample.class);</code>此选项<em>要求</em>您向 <a href="https://projectlombok.org/features/configuration"><code>lombok.config</code></a> 文件添加配置以指定应执行的操作。<code>@CustomLog</code></p>
</li>
</ul>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  studentService.getStudent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudentId</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;这是查找学生&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span>  studentService.findStudentId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">file</span><span class="params">(MultipartFile image)</span>&#123;</span><br><span class="line"><span class="comment">//        取出文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line"><span class="comment">//        存入位置</span></span><br><span class="line">        image.transferTo(<span class="keyword">new</span>  <span class="title class_">File</span>(<span class="string">&quot;E:\\image\\&quot;</span>+fileName));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>避免文件名重复，按需使用UUID命名</p>
<p>常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">file</span> <span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    </span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件路径&quot;</span>));</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> file.getSize();<span class="comment">//文件大小</span></span><br><span class="line">    <span class="type">byte</span>[] bytes  = file.getBytes(); <span class="comment">//文件内容字节数组</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//原始名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();<span class="comment">//表单字段名</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();<span class="comment">//文件内容输入流</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h3><p>在类中使用的常量，或者多处使用但是值是一样的可以通过配置来统一管理</p>
<p><code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">2115080124</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kirari</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>User2类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user2</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;User.test.id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;User.test.name&#125;&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    Info info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(user2.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user2(<span class="built_in">id</span>=2115080124, name=kirari, info=null)</span><br></pre></td></tr></table></figure>
<hr>
<p>简略写法/复杂类实现</p>
<p>user2类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user2</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    Info info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>info 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">2115080124</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kirari</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">gx</span></span><br></pre></td></tr></table></figure>
<p>启动类需要配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(user2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DashijianApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DashijianApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">user2 user2 ;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(user2.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user2(<span class="built_in">id</span>=2115080124, name=kirari, info=Info(age=18, address=gx))</span><br></pre></td></tr></table></figure>
<p>未匹配到的配置会显示0或者null</p>
<p>修改后的user2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user2</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    Info info;</span><br><span class="line">    <span class="type">int</span> ss;</span><br><span class="line">    String test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user2(<span class="built_in">id</span>=2115080124, name=kirari, info=Info(age=18, address=gx), ss=0, <span class="built_in">test</span>=null)</span><br></pre></td></tr></table></figure>
<hr>
<p>数组赋值</p>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hobby: c++,java,python,php</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @Value(&quot;#&#123;&#x27;$&#123;hobby&#125;&#x27;&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;hobby&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String[] hobby;</span></span><br><span class="line"><span class="comment">//    private List&lt;String&gt; hobby;</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt;hobby;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(hobby.length);</span></span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(hobby));</span></span><br><span class="line">        System.out.println(hobby.toString());</span><br><span class="line">        <span class="keyword">for</span> (String h:hobby) &#123;</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>以上均可实现</p>
<p>还有更多方法：<a href="https://blog.csdn.net/qq_44761854/article/details/136369598">SpringBoot 中yml配置文件：定义list集合、数组及注意事项_springboot yml list-CSDN博客</a></p>
<p>偷个懒，不尝试了</p>
<hr>
<h3 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="JsonIgnore"></a>JsonIgnore</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    String  pass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>往前端传递回数值使用SpringMVC转化json模式的时候，如果不想要某个值传递回去就使用<code>com.fasterxml.jackson.annotation.JsonIgnore;</code>下 的<code>@JsonIgnore</code>忽略它，不随着其他属性一起转化到前端</p>
<h3 id="使用注解进行参数校验"><a href="#使用注解进行参数校验" class="headerlink" title="使用注解进行参数校验"></a>使用注解进行参数校验</h3><p>实体类中声明对象时加入注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PUserPUserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^\\S&#123;2,4&#125;$&quot;,message = &quot;请正确输入格式&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String pPass;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String pEmil;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@URL</span></span><br><span class="line">    <span class="keyword">private</span> String pUrl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解值分别为</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>NotNull</td>
<td>不能为null</td>
</tr>
<tr>
<td>NotEmpty</td>
<td>不能为null且置不为空</td>
</tr>
<tr>
<td>Pattern</td>
<td>正则表达式</td>
</tr>
<tr>
<td>Email</td>
<td>邮箱格式</td>
</tr>
<tr>
<td>URL</td>
<td>网址格式</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>其中message属性可以自定义报错信息</p>
</blockquote>
<p>在接收参数时加入</p>
<p><code>@Validated</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/allP&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PUserPUserEntity <span class="title function_">getAllId</span><span class="params">(<span class="meta">@Validated</span> PUserPUserEntity pUserPUserEntity)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  pUserService.getall(pUserPUserEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入的值不符合参数的会报出错误返回异常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">024-06-09T20:56:38.228+08:00  WARN 18192 --- [dashijian] [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed <span class="keyword">for</span> argument [0] <span class="keyword">in</span> public com.kirari.dashijian.poyo.PUserPUserEntity com.kirari.dashijian.controller.PUserController.getAllId(com.kirari.dashijian.poyo.PUserPUserEntity): [Field error <span class="keyword">in</span> object <span class="string">&#x27;PUserPUserEntity&#x27;</span> on field <span class="string">&#x27;pEmil&#x27;</span>: rejected value [1244118445qq.com]; codes [Email.PUserPUserEntity.pEmil,Email.pEmil,Email.java.lang.String,Email]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [PUserPUserEntity.pEmil,pEmil]; arguments []; default message [pEmil],[Ljakarta.validation.constraints.Pattern<span class="variable">$Flag</span>;@668a56ea,.*]; default message [不是一个合法的电子邮件地址]] ]</span><br><span class="line">2024-06-09T20:57:04.709+08:00  WARN 18192 --- [dashijian] [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed <span class="keyword">for</span> argument [0] <span class="keyword">in</span> public com.kirari.dashijian.poyo.PUserPUserEntity com.kirari.dashijian.controller.PUserController.getAllId(com.kirari.dashijian.poyo.PUserPUserEntity): [Field error <span class="keyword">in</span> object <span class="string">&#x27;PUserPUserEntity&#x27;</span> on field <span class="string">&#x27;pUrl&#x27;</span>: rejected value [htt]; codes [URL.PUserPUserEntity.pUrl,URL.pUrl,URL.java.lang.String,URL]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [PUserPUserEntity.pUrl,pUrl]; arguments []; default message [pUrl],[Ljakarta.validation.constraints.Pattern<span class="variable">$Flag</span>;@1cbf9fc2,,-1,,.*]; default message [需要是一个合法的URL]] ]</span><br><span class="line">2024-06-09T20:57:14.523+08:00  WARN 18192 --- [dashijian] [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed <span class="keyword">for</span> argument [0] <span class="keyword">in</span> public com.kirari.dashijian.poyo.PUserPUserEntity com.kirari.dashijian.controller.PUserController.getAllId(com.kirari.dashijian.poyo.PUserPUserEntity): [Field error <span class="keyword">in</span> object <span class="string">&#x27;PUserPUserEntity&#x27;</span> on field <span class="string">&#x27;pName&#x27;</span>: rejected value [dadddd]; codes [Pattern.PUserPUserEntity.pName,Pattern.pName,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [PUserPUserEntity.pName,pName]; arguments []; default message [pName],[Ljakarta.validation.constraints.Pattern<span class="variable">$Flag</span>;@36c19847,^\S&#123;2,4&#125;$]; default message [请正确输入格式]] ]</span><br><span class="line">2024-06-09T21:11:09.888+08:00  WARN 18192 --- [dashijian] [nio-8080-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed <span class="keyword">for</span> argument [0] <span class="keyword">in</span> public com.kirari.dashijian.poyo.PUserPUserEntity com.kirari.dashijian.controller.PUserController.getAllId(com.kirari.dashijian.poyo.PUserPUserEntity): [Field error <span class="keyword">in</span> object <span class="string">&#x27;PUserPUserEntity&#x27;</span> on field <span class="string">&#x27;pPass&#x27;</span>: rejected value [null]; codes [NotEmpty.PUserPUserEntity.pPass,NotEmpty.pPass,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [PUserPUserEntity.pPass,pPass]; arguments []; default message [pPass]]; default message [不能为空]] ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以在接收参数的时候使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/emil&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PUserPUserEntity <span class="title function_">getAllId</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@Email</span> String PEmil)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  pUserService.getEmil(PEmil);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>带不带@Validated 好像都行</p>
</blockquote>
<p>此时输入的格式不是邮箱格式就会请求错误返回异常</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-09</span>T21<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">33.150</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span>  INFO <span class="number">31052</span> --- <span class="punctuation">[</span>dashijian<span class="punctuation">]</span> <span class="punctuation">[</span>nio<span class="number">-8080</span>-exec<span class="number">-1</span><span class="punctuation">]</span> c.k.d.exception.GlobalExceptionHandler   <span class="punctuation">:</span> 异常！</span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-09</span>T21<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">33.151</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span>  INFO <span class="number">31052</span> --- <span class="punctuation">[</span>dashijian<span class="punctuation">]</span> <span class="punctuation">[</span>nio<span class="number">-8080</span>-exec<span class="number">-1</span><span class="punctuation">]</span> c.k.d.exception.GlobalExceptionHandler   <span class="punctuation">:</span> <span class="number">400</span> BAD_REQUEST <span class="string">&quot;Validation failure&quot;</span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-09</span>T21<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">33.151</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span>  INFO <span class="number">31052</span> --- <span class="punctuation">[</span>dashijian<span class="punctuation">]</span> <span class="punctuation">[</span>nio<span class="number">-8080</span>-exec<span class="number">-1</span><span class="punctuation">]</span> c.k.d.exception.GlobalExceptionHandler   <span class="punctuation">:</span> org.springframework.web.method.annotation.HandlerMethodValidationException<span class="punctuation">:</span> <span class="number">400</span> BAD_REQUEST <span class="string">&quot;Validation failure&quot;</span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-09</span>T21<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">33.151</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span>  INFO <span class="number">31052</span> --- <span class="punctuation">[</span>dashijian<span class="punctuation">]</span> <span class="punctuation">[</span>nio<span class="number">-8080</span>-exec<span class="number">-1</span><span class="punctuation">]</span> c.k.d.exception.GlobalExceptionHandler   <span class="punctuation">:</span> class org.springframework.web.method.annotation.HandlerMethodValidationException</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="同一个实体类对多个请求的适应"><a href="#同一个实体类对多个请求的适应" class="headerlink" title="同一个实体类对多个请求的适应"></a>同一个实体类对多个请求的适应</h3><h4 id="DTO、VO、PO"><a href="#DTO、VO、PO" class="headerlink" title="DTO、VO、PO"></a>DTO、VO、PO</h4><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>用途</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>DTO</td>
<td>Data Transfer Object (数据传输对象)</td>
<td>用于在不同系统或不同层之间传输数据。</td>
<td>- 通常是简单的 Java 类（POJO），只包含属性和 getter/setter 方法。<br> - 没有业务逻辑，只是用于传输数据。<br> - 可以进行序列化，方便网络传输。</td>
</tr>
<tr>
<td>VO</td>
<td>Value Object (值对象)</td>
<td>用于表示业务模型中的值，通常用于表示不可变的业务对象。<br> 在视图层与服务层之间传递数据，常用于展示层。</td>
<td>- 通常是不可变对象，一旦创建就不能修改其内部状态。<br> - 只包含数据，没有业务逻辑。</td>
</tr>
<tr>
<td>PO</td>
<td>Persistent Object (持久化对象)</td>
<td>对应数据库中的表，用于持久化数据。<br> 通常在数据访问层使用。</td>
<td>- 通常是简单的 Java 类（POJO），每个属性对应数据库表的一列。<br> - 包含业务实体的状态，与数据库表结构紧密对应。<br> - 可能包含简单的业务逻辑，但主要用于数据持久化。</td>
</tr>
</tbody>
</table>
</div>
<p>在请求时不同、响应数据、持久层数据库访问的时候，如果遇到与实体类poyo不一样的结构，可以定义这么一些dto、vo、po来扩充、缩小不同的需求类</p>
<p>例如user.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端传输数据却包含一个Emil</p>
<p>这时候就可以设置一个类</p>
<p>userDto.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userDto</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String Emil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果数据库想要存入修改时间，设置userPo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userPo</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String Date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据业务需求灵活定制，节约传输数据的流量，性能优化等等</p>
<blockquote>
<p><a href="https://blog.csdn.net/ma726518972/article/details/118757478">Spring项目中，为什么要区分PO对象，VO对象，DTO对象？有什么作用？_vo撖寡情-CSDN博客</a></p>
</blockquote>
<hr>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>建立太多的类不方便管理，在一个类中利用Validated 的groups属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PUserPUserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Dto.class,Po.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^\\S&#123;2,4&#125;$&quot;,message = &quot;请正确输入格式&quot;,groups = &#123;Dto.class,Po.class&#125;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(groups = Dto.class)</span></span><br><span class="line">    <span class="keyword">private</span> String pPass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(groups = Po.class)</span></span><br><span class="line">    <span class="keyword">private</span> String pEmil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@URL</span></span><br><span class="line">    <span class="keyword">private</span> String pUrl;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//设置分组名</span></span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dto</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Po</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用PUserPUserEntity.java实体类的时候加上注解<code>@Validated(PUserPUserEntity.分组名.class)</code>，例如<code>@Validated(PUserPUserEntity.Dto.class)</code></p>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/allP&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PUserPUserEntity <span class="title function_">getAllId</span><span class="params">(<span class="meta">@Validated(PUserPUserEntity.Dto.class)</span> PUserPUserEntity pUserPUserEntity)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  pUserService.getall(pUserPUserEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就置使用注解中包含Dto.class的属性了</p>
<p>实体类中所有字段默认是<code>Default</code>分组的，如果所有的分组中均有这个字段，可以省略设置，让分组继承Default这个分组，这个新的分组就拥有了默认的分组字段，不需要单独设置所有分组都有的字段了</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PUserPUserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^\\S&#123;2,4&#125;$&quot;,message = &quot;请正确输入格式&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty(groups = Dto.class)</span></span><br><span class="line">    <span class="keyword">private</span> String pPass;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email(groups = Po.class)</span></span><br><span class="line">    <span class="keyword">private</span> String pEmil;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@URL</span></span><br><span class="line">    <span class="keyword">private</span> String pUrl;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置分组名</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dto</span> <span class="keyword">extends</span> <span class="title class_">Default</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Po</span> <span class="keyword">extends</span>  <span class="title class_">Default</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意Default引入的包是<code>import jakarta.validation.groups.Default;</code></p>
</blockquote>
<p>没有设置分组的默认为Default分组，各个分组又继承了Default，所以各个分组拥有未设置分组的字段。</p>
<p>并且通过分组设置，让这个实体类实现不同层的数据流通</p>
<hr>
<h3 id="注解进行参数校验的原理以及自定义校验"><a href="#注解进行参数校验的原理以及自定义校验" class="headerlink" title="注解进行参数校验的原理以及自定义校验"></a>注解进行参数校验的原理以及自定义校验</h3><p>我们点开Validated 包下的任意一个注解，例如<code>NotEmpty</code>，以下是他的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span><span class="comment">//javadoc</span></span><br><span class="line"><span class="meta">@Constraint( //指定提供校验规则的类</span></span><br><span class="line"><span class="meta">    validatedBy = &#123;&#125;</span></span><br><span class="line"><span class="meta">)</span>  </span><br><span class="line"><span class="comment">//注解生效的区域</span></span><br><span class="line"><span class="comment">//其中ElementType.FIELD是变量</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="comment">//在运行是运行</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(List.class)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotEmpty &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提示信息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;jakarta.validation.constraints.NotEmpty.message&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> List &#123;</span><br><span class="line">        NotEmpty[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>找了好久找到了判断逻辑的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotNullValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;NotNull, Object&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotNullValidator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Object object, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> object != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看到引入了接口<code>ConstraintValidator</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConstraintValidator</span>&lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>, T&gt; &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(A constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(T var1, ConstraintValidatorContext var2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><p><code>A extends Annotation</code>是指给哪个注解校验规则</p>
</li>
<li><p>T，校验的数据类型</p>
</li>
</ul>
<p>如果<code>isValid</code>函数返回true则校验通过，如果返回false则校验失败输出message。</p>
<p>这个就是注解去实现参数校验的原理</p>
<h4 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h4><p>自定义注解Phone</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.FIELD&#125;)</span> <span class="comment">// 可以用于字段和方法参数</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;PhoneValidation.class&#125; ////指定提供校验规则的类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Phone &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;手机号码需要11位数字&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置验证规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneValidation</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Phone,String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Phone constraintAnnotation)</span> &#123;</span><br><span class="line">        ConstraintValidator.<span class="built_in">super</span>.initialize(constraintAnnotation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s != <span class="literal">null</span> &amp;&amp; s.matches( <span class="string">&quot;^\\d&#123;11&#125;$&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/phone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">phone</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@Phone</span> String p)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求：<code>http://127.0.0.1:8083/phone?p=1234567891</code>报错</p>
<p>请求：<code>http://127.0.0.1:8083/phone?p=12345678910</code>返回12345678910</p>
<p>报错的时候没有提示<code>&quot;&#123;手机号码需要11位数字&#125;&quot;;</code>我指定的message，不明白怎么回事…</p>
<hr>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>在登陆了以后同一个用户占用同一个线程的情况下可以使用ThreadLocal来简化开发，不用每次都传递用户基本信息进来了</p>
<ul>
<li><p>ThreadLocal.set(T)</p>
<p>存放信息</p>
</li>
<li><p>ThreadLocal.get()</p>
<p>取出信息</p>
</li>
<li><p>ThreadLocal.remove()</p>
<p>释放ThreadLoca</p>
</li>
</ul>
<p>可以通过拦截器来实现设置存放信息、释放ThreadLocal</p>
<p>工具类声明静态变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kirari.dashijian.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreaddLocalUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">ThreadLocal</span> <span class="variable">THREAD_LOCAL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        THREAD_LOCAL.set(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拦截器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">     	登录判断逻辑</span></span><br><span class="line"><span class="comment">          */</span>  </span><br><span class="line">            </span><br><span class="line">     	<span class="type">HashMap</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        user.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;krari&quot;</span>);</span><br><span class="line">        user.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        THREAD_LOCAL.set(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 资源方法运行后运行,没有资源返回不会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);</span></span><br><span class="line">        log.info(<span class="string">&quot;2222222222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图渲染后运行，最后运行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">        log.info(<span class="string">&quot;3333333333&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在程序中想使用用户信息的时候就可以使用ThreadLocal.get()就能获取到用户的信息了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; user = (HashMap&lt;String, Object&gt;) THREAD_LOCAL.get();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) user.get(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Json数据格式化与映射"><a href="#Json数据格式化与映射" class="headerlink" title="Json数据格式化与映射"></a>Json数据格式化与映射</h3><p>使用Json转化数据格式为普通类的属性时需要数据转化或映射的时候的注解 </p>
<h4 id="格式化-JsonFormat"><a href="#格式化-JsonFormat" class="headerlink" title="格式化@JsonFormat"></a>格式化<code>@JsonFormat</code></h4><h5 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date eventDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转化格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;eventDate\&quot;:\&quot;2024/06/09 21:45:00\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> objectMapper.readValue(json, Event.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(event.getEventDate()); <span class="comment">// 输出 2024-06-09 21:45:00 对应的 Date 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>JsonFormat</code>的其他属性：</p>
<ul>
<li><p><code>shape</code>: 指定数据的形状，如 <code>JsonFormat.Shape.STRING</code> 表示将数据序列化为字符串。</p>
</li>
<li><p><code>pattern</code>: 定义日期时间的格式模式，如 <code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code>。</p>
</li>
<li><p><code>timezone</code>: 指定时区，如 <code>&quot;GMT+8&quot;</code> 或 <code>&quot;UTC&quot;</code>。</p>
</li>
<li><p><code>locale</code>: 指定语言环境，如 <code>&quot;en_US&quot;</code>。</p>
</li>
</ul>
<p>除了常用的格式化时间以外，还有其他特殊的用法</p>
<h5 id="格式化数字"><a href="#格式化数字" class="headerlink" title="格式化数字"></a>格式化数字</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;###,###.##&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作用是格式为千分位分隔俩位小数的保留方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">1234567.89</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(product);</span><br><span class="line"></span><br><span class="line">        System.out.println(json); <span class="comment">// 输出 &#123;&quot;price&quot;:&quot;1,234,567.89&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="格式化布尔值"><a href="#格式化布尔值" class="headerlink" title="格式化布尔值"></a>格式化布尔值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonFormat(shape = JsonFormat.Shape.NUMBER)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> active;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">boolean</span> active)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.active = active;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">true</span>); <span class="comment">// 将 active 设置为 true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(json); <span class="comment">// 输出 &#123;&quot;active&quot;:1&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反向序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;active\&quot;:1&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectMapper.readValue(json, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.isActive()); <span class="comment">// 输出 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Json与类属性的映射"><a href="#Json与类属性的映射" class="headerlink" title="Json与类属性的映射"></a>Json与类属性的映射</h4><p><code>@JsonProperty</code> 是 Jackson 库中的一个注解，用于在序列化和反序列化 JSON 时为 Java 对象的属性指定映射的 JSON 字段名称。</p>
<p>用法</p>
<p>user.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;user_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;user_age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>userName</code> 属性会映射到 JSON 的 <code>user_name</code> 字段，而 <code>userAge</code> 属性会映射到 JSON 的 <code>user_age</code> 字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        user.setUserAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(json); <span class="comment">// 输出 &#123;&quot;user_name&quot;:&quot;John&quot;,&quot;user_age&quot;:30&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;user_name\&quot;:\&quot;John\&quot;,\&quot;user_age\&quot;:30&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectMapper.readValue(json, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.getUserName()); <span class="comment">// 输出 John</span></span><br><span class="line">        System.out.println(user.getUserAge()); <span class="comment">// 输出 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多</p>
<p><strong>添加默认值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;user_name&quot;, defaultValue = &quot;unknown&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;user_age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userAge;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>忽略 JSON 中不存在的字段</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;user_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;user_age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userAge;</span><br><span class="line">	<span class="keyword">private</span> String date;</span><br><span class="line">    ....</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringDoc-生成API文档"><a href="#SpringDoc-生成API文档" class="headerlink" title="SpringDoc 生成API文档"></a>SpringDoc 生成API文档</h3><p>pom.xml中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>声明配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;public&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Info <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                .title(<span class="string">&quot;接口测试&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;这是测试一下啊&quot;</span>)</span><br><span class="line">                .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入<code>localhost:端口号/swagger-ui/index.html</code>访问api文档</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240615142713906.webp" alt="SpringDoc的API"></p>
<h3 id="Swagger-生成API文档"><a href="#Swagger-生成API文档" class="headerlink" title="Swagger 生成API文档"></a>Swagger 生成API文档</h3><p>Spring整合swagger</p>
<p>借用knife4j工具进行生成</p>
<p>meavn引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用这个源码成功了，自己配置 的时候失败了….</p>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Api</td>
<td>用在类上，例如Controller</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>用在方法上Controller的某个方法标注是什么方法</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>用在实体类的属性上</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>用在实体类上</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;员工管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;这个是登录接口&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;EmployeeLoginVO&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeLoginDTO employeeLoginDTO)</span> </span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240615154342042.webp" alt="image-20240615154342042"></p>
<p>实体类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;员工登录时传递的数据模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeLoginDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240615154442397.webp" alt="image-20240615154442397"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>速通html</title>
    <url>/posts/928b078b.html</url>
    <content><![CDATA[<h1 id="从零开始的前端"><a href="#从零开始的前端" class="headerlink" title="从零开始的前端"></a>从零开始的前端</h1><blockquote>
<p>对于上次学习前端知识已经过去很久了，所有从零开始做一个笔记温故而知新。</p>
</blockquote>
<p><code>HTML(HyperText Markup Language)(超文本标记语言)</code></p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>这是一个html的文件的基本结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  //给浏览器告知是什么协议</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>	//使用什么语言</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  //编码</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span> //移动端</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>//标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    网站主题</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>虽然h1-h6等等排版标签拥有先置样式，但是可以随意修改，虽然全部标签可以使用div来完成显示需求，但是不推荐，标签拥有语义化的时候能被浏览器所认识，利于SEO搜索引擎检索，方便设备解析。</p>
<p>比如p标签是文章标签</p>
</blockquote>
<h3 id="标签类型"><a href="#标签类型" class="headerlink" title="标签类型"></a>标签类型</h3><ul>
<li>块级标签                           —&gt;独占一行</li>
<li>行内标签                           —&gt;不独占一行</li>
</ul>
<blockquote>
<p>块元素可以写块元素行内标签</p>
<p>行内只能写行内</p>
<p>h1~h6不能嵌套</p>
<p>p中不写块元素</p>
</blockquote>
<h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签名</th>
<th>语义</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>斜体（着重内容</td>
</tr>
<tr>
<td>strong</td>
<td>加粗（重要&gt;em</td>
</tr>
<tr>
<td>span</td>
<td>无语义</td>
</tr>
<tr>
<td>cite</td>
<td>作品名</td>
</tr>
<tr>
<td>dfn</td>
<td>特殊用语</td>
</tr>
<tr>
<td>del</td>
<td>删除文本 删除线</td>
</tr>
<tr>
<td>ins</td>
<td>下划线  插入文本</td>
</tr>
<tr>
<td>sub /sup</td>
<td>下标和上标</td>
</tr>
<tr>
<td>code</td>
<td>代码</td>
</tr>
<tr>
<td>samp</td>
<td>提取内容，表示设备输出</td>
</tr>
<tr>
<td>kbd</td>
<td>键盘输入</td>
</tr>
<tr>
<td>abbr</td>
<td>缩写，鼠标触碰会有title显示</td>
</tr>
<tr>
<td>bdo</td>
<td>反向标签，dir属性取值<code>ltr</code>和<code>rtl</code>即从左到右和从右到左</td>
</tr>
<tr>
<td>var</td>
<td>标记变量，code中嵌套var标记</td>
</tr>
<tr>
<td>small</td>
<td>附属细则，版权之类法律的细则</td>
</tr>
<tr>
<td>b</td>
<td>摘要中关键字</td>
</tr>
<tr>
<td>i</td>
<td>本体人物思想活动，现 图标</td>
</tr>
<tr>
<td>u</td>
<td>与正文反差，错字不合适 的描述等等</td>
</tr>
<tr>
<td>q</td>
<td>短引用</td>
</tr>
<tr>
<td>blockquote</td>
<td>长引用</td>
</tr>
<tr>
<td>address</td>
<td>地址信息</td>
</tr>
</tbody>
</table>
</div>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>img</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>地址</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>alt</td>
<td>图片描述/<br />加载不出图片所显示的文本</td>
</tr>
<tr>
<td>width</td>
<td>宽度px，vw,em等等</td>
</tr>
<tr>
<td>height</td>
<td>高度</td>
</tr>
</tbody>
</table>
</div>
<h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><p>两种方式</p>
<ol>
<li><p>网站根目录放置``</p>
</li>
<li><p>link</p>
</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a&gt;&lt;/a&gt;</code>中间可以放任何数据（图片/文字）点击则跳转页面,可跳转文件，锚点<code>#name的值</code>、<code>#id选择器</code>、甚至是js代码、应用也可以，比如邮件和电话等等</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>target</td>
<td>跳转方式<br /><code>_self</code>本页面跳转/默认<br /><code>_blank</code>新页面跳转</td>
</tr>
<tr>
<td>href</td>
<td>跳转的地址</td>
</tr>
<tr>
<td>download</td>
<td>无值，启动文件下载模式，可取值默认文件名</td>
</tr>
<tr>
<td>name</td>
<td>设置锚点给人跳转</td>
</tr>
</tbody>
</table>
</div>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
    <li>11111</li>
     <li>2222</li>
     <li>333</li>
     <li>444</li>
</ol>
嵌套

<ol>
    <li>11111</li>
    <li>
        <ol>222
        <li>22.11</li>
        <li>222.22</li>
        <li>22.333</li>
        <li>22.4444</li>
        </ol>
    </li>
     <li>333</li>
     <li>333</li>
</ol>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">嵌套</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span>222</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222.22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>
    <li>11111</li>
     <li>222</li>
     <li>333</li>
     <li>444</li>
</ul>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">11111</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">333</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">444</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><dl>
    <dt>这是标语，类似 1.</dt>
        <dd>这是内容</dd>
     <dt>哈哈哈</dt>
        <dd>这是内容</dd>
     <dt>11111</dt>
        <dd>这是内容</dd>
</dl>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>这是标语，类似 1.<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px solid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表格头部--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>钓鱼<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span>//垂直位置  可选bottom/middle</span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>翁达<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>上课<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>桐崎千棘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>17<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>一条乐<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;green&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>制表人：Kirari<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- rowspan=&quot;2&quot;一列两行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1px solid">
        <caption>表格标题</caption>
        <thead>
            <!--表格头部-->
            <tr>
                <th>姓名</th>
                <th>年龄</th>
                <th>性别</th>
                <th>爱好</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>小明</td>
                <td>13</td>
                <td>男</td>
                <td>钓鱼</td>
            </tr>
            <!-- 表格内容 -->
            <tr  valign="top">
                <td>翁达</td>
                <td>22</td>
                <td  valign="top">女</td>
                <td>上课</td>
            </tr>
            <tr>
                <td>桐崎千棘</td>
                <td>17</td>
                <td>女</td>
                <td>一条乐</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
               <td align="right" bgcolor="green" colspan="4">制表人：Kirari</td>
               <!-- rowspan="2"一列两行 -->
            </tr>
            <!-- 表格脚注 -->
        </tfoot>
    </table>


<p>简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>ggg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1">
  <tr>
    <td rowspan="2">aaa</td>
    <td>bbb</td>
    <td>ccc</td>
  </tr>
  <tr>
    <td>ddd</td>
 <td>eee</td>
  </tr>
  <tr>    <td>fff</td>
   <td colspan="2">ggg</td>
</tr>
</table>

<p>table的属性</p>
<ul>
<li><p>border</p>
<p>边框</p>
</li>
<li><p>width</p>
<p>宽度</p>
</li>
<li><p>height</p>
<p>只在body调整高度</p>
</li>
<li><p>cellspacing</p>
<p>单元格间隙，0为无间隙</p>
</li>
</ul>
<h3 id="换行-分割线-按照原来效果显示"><a href="#换行-分割线-按照原来效果显示" class="headerlink" title="换行/分割线/按照原来效果显示"></a>换行/分割线/按照原来效果显示</h3><p><code>&lt;br&gt;</code></p>
<p><code>&lt;hr&gt;</code></p>
<p><code>&lt;pre&gt;&lt;/pre&gt;</code></p>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>基本构成:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./11.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- target=&quot;_blank&quot; 是新标签页打开 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- mothod get  post --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- action  是地址 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h5><div class="table-container">
<table>
<thead>
<tr>
<th>特性</th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>目的</strong></td>
<td>从服务器检索数据</td>
<td>向服务器提交数据进行处理</td>
</tr>
<tr>
<td><strong>数据传输</strong></td>
<td>数据作为查询参数附加到 URL 中发送</td>
<td>数据在请求体中发送</td>
</tr>
<tr>
<td><strong>可见性</strong></td>
<td>数据在 URL 中可见</td>
<td>数据不在 URL 中可见</td>
</tr>
<tr>
<td><strong>缓存</strong></td>
<td>可以被浏览器和中间服务器缓存</td>
<td>通常不被浏览器或中间服务器缓存</td>
</tr>
<tr>
<td><strong>书签</strong></td>
<td>可以被书签</td>
<td>不能被书签</td>
</tr>
<tr>
<td><strong>大小限制</strong></td>
<td>通常限制在 2048 个字符左右</td>
<td>数据大小限制较大</td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td>数据在URL中暴露，不适合传输敏感数据</td>
<td>数据在请求体中，不容易被窥视，较为安全</td>
</tr>
<tr>
<td><strong>幂等性</strong></td>
<td>请求应为幂等的</td>
<td>请求可能产生副作用</td>
</tr>
<tr>
<td><strong>使用场景</strong></td>
<td>获取数据（如搜索查询、检索用户信息）</td>
<td>提交表单（如登录表单、注册表单）、上传文件，修改数据</td>
</tr>
</tbody>
</table>
</div>
<h4 id="文本框和密码框"><a href="#文本框和密码框" class="headerlink" title="文本框和密码框"></a>文本框和密码框</h4><form action="https://kiko2568.top" method="get" target="_blank">
        账号<input type="text" name="user" value="初始值" maxlength="10">
<br>
        <!--maxlength 最大长度 -->
      密码  <input type="password" name="pwd" value="csz" maxlength="10">
        <br>
        <input type="submit" value="commit">
        <br>
        <button>提交</button>
    </form>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">       账号 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--maxlength 最大长度 --&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h4><form action="https://kiko2568.top"  target="_blank">
性别<input type="radio" value="男" name="sex">男
<input type="radio" value="女" name="sex" checked>女<br>
爱好<input type="checkbox" value="跑步" name="habit" checked>跑步
<input type="checkbox" value="唱歌" name="habit">唱歌
<input type="checkbox" value="阅读" name="habit">阅读
<input type="checkbox" value="跳舞" name="habit">跳舞<br>
<input type="submit" value="commit"><br>
<button>提交</button>
</form>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跑步&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span> <span class="attr">checked</span>&gt;</span>跑步</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>唱歌</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阅读&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>阅读</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳舞&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>跳舞<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>checked</code>默认勾选</p>
<h4 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h4><form action="https://kiko2568.top"  target="_blank">
        看不见的input
        <input name="hiden" value="hello" type="hidden">
        <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        看不见的input</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;hiden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="提交和重置按钮"><a href="#提交和重置按钮" class="headerlink" title="提交和重置按钮"></a>提交和重置按钮</h4><form action="https://kiko2568.top"  target="_blank">
        <input type="submit" value="commit"><br>
        <input type="reset" value="重置111">
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置111&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><form action="https://kiko2568.top"  target="_blank">
        <input type="button" value="普通按钮">
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文本域和下拉框"><a href="#文本域和下拉框" class="headerlink" title="文本域和下拉框"></a>文本域和下拉框</h4><form action="https://kiko2568.top"  target="_blank">
        文本<textarea name="textarea1" id="" cols="30" rows="10">123默认值</textarea>
        <br>
        家乡<select name="place" id="">
            <option value="sc">四川</option>
            <option value="cq">重庆</option>
            <option value="gx" selected>广西</option>
            <!-- selected 默认值 -->
            <option value="hebei">河北</option>
            <!-- 如果没value则取标签内的字 -->
        </select>
        <input type="submit" value="commit"><br> 
        <input type="reset" value="重置">
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        文本<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>123默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        家乡<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;place&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sc&quot;</span>&gt;</span>四川<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cq&quot;</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gx&quot;</span> <span class="attr">selected</span>&gt;</span>广西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- selected 默认值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hebei&quot;</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果没value则取标签内的字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文件控件"><a href="#文件控件" class="headerlink" title="文件控件"></a>文件控件</h4><form action="https://kiko2568.top" target="_blank" method="post" enctype="multipart/form-data">
    提交文件: <input type="file" name="file_sumit">
    <input type="submit" value="提交">
</form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--enctype是文件的编码，如果使用默认会只上传名字，更换编码后文件内容和文件数据一起s，同时请求的模式改为post 因为get数据少--&gt;</span></span><br><span class="line">    提交文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file_sumit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="禁用控件"><a href="#禁用控件" class="headerlink" title="禁用控件"></a>禁用控件</h4><p>在控件中添加<code>disabled</code>,例如：</p>
  <form action="https://kiko2568.top"  target="_blank">
        性别<input disabled type="radio" value="男" name="sex">男
        <input type="radio" value="女" name="sex" checked>女<br>
        <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>发现男这个单选不可选中</p>
<p>通过<code>disabled</code>和<code>checked</code>可以设置默认值不可修改</p>
<h4 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h4><p>文本关联控件</p>
<form action="https://kiko2568.top"  target="_blank">
        <label for="zhanghu">账号</label>
         <input id="zhanghu" type="text" name="user" value="初始值" maxlength="10"><br>
        <label > 密码 <input type="password" name="pwd" value="csz" maxlength="10"></label>
      <br>
        性别
        <label for="nan"></label>
        <input id="nan" type="radio" value="男" name="sex">男
        <label ><input type="radio" value="女" name="sex" checked>女</label>
            <br>
            <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;zhanghu&quot;</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;zhanghu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">            密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span>性别</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击文本相当于点击控件！</p>
<h4 id="fieldset与legend-作为分组使用"><a href="#fieldset与legend-作为分组使用" class="headerlink" title="fieldset与legend 作为分组使用"></a>fieldset与legend 作为分组使用</h4><form action="https://kiko2568.top"  target="_blank">
    <fieldset>
        <legend>分组一</legend>
            <label for="zhanghu">账号</label>
            <input id="zhanghu" type="text" name="user" value="初始值" maxlength="10"><br>
            <label > 密码 <input type="password" name="pwd" value="csz" maxlength="10"></label>
            <br>
    </fieldset>
    <fieldset>
        <legend>分组2</legend>
            性别
            <label for="nan"></label>
            <input id="nan" type="radio" value="男" name="sex">男
            <label ><input type="radio" value="女" name="sex" checked>女</label>
    </fieldset>
        <br>
        <input type="submit" value="commit"><br>
    <button>提交</button>
</form>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>分组一<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;zhanghu&quot;</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;zhanghu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> &gt;</span> 密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>分组2<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            性别</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> &gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p><code>ifame</code></p>
<p>嵌入网站/图片/视频等等的框架</p>
<iframe src="https://kiko2568.top" frameborder="0" width="400px" height="300px"></iframe><br>
<a href="https://blog.kiko2568.top/" target="wz">个人博客</a>
    <a href="https://life.kiko2568.top/" target="wz">生活博客</a>

    <form action="https://moments.kiko2568.top/" target="wz"><input type="submit" value="朋友圈"></form>
    <iframe src="https://kiko2568.top" name="wz" frameborder="0" width="400px" height="300px"></iframe>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span>个人博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://life.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span>生活博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://moments.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;朋友圈&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与a链接或表单搭配首先切换</p>
<h3 id="特殊字符-字符实体"><a href="#特殊字符-字符实体" class="headerlink" title="特殊字符/字符实体"></a>特殊字符/字符实体</h3><p><code>&amp;nbsp;</code>空格</p>
<blockquote>
<p><a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">字符表大全</a></p>
</blockquote>
<h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>元信息—-页面基本信息</p>
<p>详细请参考</p>
<p><a href="mozilla.org">元数据元素 - HTML（超文本标记语言） | MDN</a></p>
<h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><ul>
<li>title 给元素加上提示信息，鼠标放上去有提示</li>
</ul>
<h2 id="html-5新特性"><a href="#html-5新特性" class="headerlink" title="html 5新特性"></a>html 5新特性</h2><h3 id="1-新增语义标签"><a href="#1-新增语义标签" class="headerlink" title="1. 新增语义标签"></a>1. 新增语义标签</h3><ul>
<li><p><code>header</code>整个界面/区域头部</p>
</li>
<li><p><code>footer</code>整个界面/区域尾部 —-多用于页脚</p>
</li>
<li><p><code>nav</code>导航//栏</p>
</li>
<li><p><code>aside</code>侧边栏</p>
</li>
</ul>
<hr>
<p>用上面的就行</p>
<ul>
<li><p><code>article</code>文章帖子杂志评论</p>
</li>
<li><p><code>section</code>页面中某段文字，一个段落，通常包含标题</p>
<p>article里面会有多个section，section强调分块分段</p>
</li>
<li><p><code>main</code>文档主要内容，几乎不用</p>
</li>
<li><p><code>hgroup</code>连续的标题</p>
</li>
</ul>
<h3 id="2-新增状态标签"><a href="#2-新增状态标签" class="headerlink" title="2.  新增状态标签"></a>2.  新增状态标签</h3><p><code>meter</code>类似进度条</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>high</td>
<td>区间最高值</td>
</tr>
<tr>
<td>low</td>
<td>区间最低</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>optimum</td>
<td>状态最好的值</td>
</tr>
<tr>
<td>value</td>
<td>当前值</td>
</tr>
</tbody>
</table>
</div>
<p><meter max="100" min="0" high="80" low="60" value="70"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="50"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="70" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="95" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="40" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="80" optimum="90"></meter><br></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;70&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;70&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;95&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>progress</code>进度条</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>max</td>
<td>数字</td>
<td>规定最大值</td>
</tr>
<tr>
<td>value</td>
<td>数字</td>
<td>规定当前值</td>
</tr>
</tbody>
</table>
</div>
<p><progress max="100" value="30" > <br><br></progress><br></p>
<p><progress max="100" value="60" > <br></progress><br></p>
<p><progress max="100" value="90" > <br></progress><br></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;90&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-新增列表标签"><a href="#3-新增列表标签" class="headerlink" title="3. 新增列表标签"></a>3. 新增列表标签</h3><ul>
<li><code>datelist</code></li>
<li><code>details</code></li>
</ul>
<form action="">
    <input type="text" list="date">
    <input type="submit" value="搜索">
</form>
<datalist id="date">
    <option value="12">12</option>
    <option value="23">23</option>
    <option value="34">34</option>
    <option value="14">14</option>
</datalist>
<details><summary>标题</summary>
    你好
</details>


示例

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;34&quot;</span>&gt;</span>34<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;14&quot;</span>&gt;</span>14<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;<span class="name">summary</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    你好</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>


### 4. 新增文本标签

- `ruby`拼音标签？

- `mark`高亮

<ruby>你好，我是一个程序员<rt>ni hao , wo shi yi ge cheng xu yuan</rt></ruby>

<ruby>你好<rt>ni hao </rt>，我是一个程序员</ruby>

<mark>你好</mark>，我是<mark>kirari</mark>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>你好，我是一个程序员<span class="tag">&lt;<span class="name">rt</span>&gt;</span>ni hao , wo shi yi ge cheng xu yuan<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>你好<span class="tag">&lt;<span class="name">rt</span>&gt;</span>ni hao <span class="tag">&lt;/<span class="name">rt</span>&gt;</span>，我是一个程序员<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>，我是<span class="tag">&lt;<span class="name">mark</span>&gt;</span>kirari<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>



### 5. 新的表单控件



#### 5. 1 属性




 <table>
        <thead>
            <tr>
                <th>名字</th>
                <th>效果</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>required</td>
                <td>必填入信息，否则不能通过，会出现提示文字不可留空之类<br />文本框不能为空<br />单选框必须选一个<br />多选框是必须选设置的选项<br />可规避不正确输入以及同意协议</td>
            </tr>
            <tr>
                <td>autocomplete</td>
                <td>属性值on开启off关闭<br />会有历史记录，提交后再次获取焦点可以获得历史输入<br />密码框和多行文本域不可使用<br />需要浏览器开启地址信息才生效</td>
            </tr>
            <tr>
                <td>autofocus</td>
                <td>自动获取焦点，多个autofocus只生效最开始的那个</td>
            </tr>
            <tr>
                <td>placeholder</td>
                <td>提示文字</td>
            </tr>
            <tr>
                <td>pattern</td>
                <td>正则表达式，必须有required才能使用</td>
            </tr>
        </tbody>
    </table>






<form action="">
        账号<input type="text" name="" id="" required autofocus autocomplete="on" placeholder="提示"><br>
        密码<input type="password" name="" id="" placeholder="输入密码" required pattern="\b\d{6,12}\b"><br>
        <input type="radio" name="sex" value="nan">男
        <input type="radio" required name="sex">女<br>
        <input type="checkbox"  name="aa">多选1
        <input type="checkbox" required name="aa">多选2
        <input type="checkbox" name="aa">多选3
        <input type="checkbox" name="aa">多选4<br>
        <input type="submit" name="" id="" value="提交">
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        账号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">autofocus</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;提示&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入密码&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;\b\d&#123;6,12&#125;\b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选1</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选2</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选3</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选4<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-2-新的控件，即type新属性值"><a href="#5-2-新的控件，即type新属性值" class="headerlink" title="5.2 新的控件，即type新属性值"></a>5.2 新的控件，即type新属性值</h4><form action="">
网址<input type="url"></input><br>
邮箱<input type="email"></input><br>
搜索<input type="search"></input><br>
数值<input type="number" step="2" max="100" min="0"></input>max是最大值，min最小值。step是间距<br>
电话<input type="tel"></input><br>
进度条<input type="range" max="100" min="0" value="80"></input><br>
颜色<input type="color"></input><br>
日期<input type="date"></input><br>
月<input type="month"></input><br>
周<input type="week"></input><br>
时间<input type="time"></input><br>
日期+时间<input type="datetime-local"></input><br>
<input type="submit" value="提交"></input>
 </form>




<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">网址<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">搜索<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">数值<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span>max是最大值，min最小值。step是间距<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">电话<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">进度条<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">颜色<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">日期<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">月<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">周<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">时间<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">日期+时间<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>视频标签</p>
<p>媒体参与度，本来需要静音才能自动播放，媒体参与度高的网站可以开声音自动播放</p>
<p><code>chrome://media-engagement/</code></p>
<p><code>edge://media-engagement/</code></p>
<h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>音频标签</p>
<h3 id="全局属性新增"><a href="#全局属性新增" class="headerlink" title="全局属性新增"></a>全局属性新增</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>初学redis对于微信步数排行榜的想法</title>
    <url>/posts/1d03dcdc.html</url>
    <content><![CDATA[<p>这段时间学了一些redis五种常用类型基本操作，看见好多人说有序集合比较适合实现各种各样的排行榜功能，我就想到了微信步数排行榜，想到了我是不是可以通过有序集合来实现这个功能呢。</p>
<p>那就来试试看吧！ （想法可能不成熟，勿喷！！）</p>
<h2 id="微信步数排行榜的基本功能"><a href="#微信步数排行榜的基本功能" class="headerlink" title="微信步数排行榜的基本功能"></a>微信步数排行榜的基本功能</h2><p>要实现微信步数排行榜先看看微信步数排行榜都有什么功能</p>
<ol>
<li><p>最基本的功能，查看排行信息 、点赞</p>
 <image title="微信步数排行榜" src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog13f2f49c624f9d7347dae013b60ad0d.webp"  width="25%"/>
</li>
<li><p>凌晨刷新步数，全部清除为0</p>
</li>
<li><p>已占领N个朋友的封面</p>
 <image  titile="占领朋友封面" src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog350fd59d209baa08282c005ced383aa.webp" width="25%"/>
</li>
<li><p>加入、退出 排行榜</p>
<p>消息可以使用spring的Task定时每天十点半发送消息，不是redis的功能</p>
<image title="排行榜功能启用与暂停" src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogfba819cd8737f7d7b54a70b1df5b456.webp" width="25%">
</li>
<li><p>不与他排行</p>
<p>不让这个人参与我的排行榜</p>
</li>
<li><p>停用</p>
<p>与退出排行榜差不多</p>
<image title="微信运动设置界面" src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogfe86b2f038385c75ace38860eaad394.webp" width="25%"/>

</li>
</ol>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>首先假定微信运动用户为以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd rankall 0 aaaa 0 bbbb 0 cccc 0 dddd 0 eeee 0 ffff 0 gggg 0 hhhh 0 iiii 0 jjjj 0 kkkk 0  xiaoming  0 libai 0 zhangsan 0 lisi  0 wangwu 0 xiongda 0 kirari</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE rankall 0 -1</span><br><span class="line"> 1) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;dddd&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;eeee&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;ffff&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;gggg&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;hhhh&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;iiii&quot;</span></span><br><span class="line">10) <span class="string">&quot;jjjj&quot;</span></span><br><span class="line">11) <span class="string">&quot;kirari&quot;</span></span><br><span class="line">12) <span class="string">&quot;kkkk&quot;</span></span><br><span class="line">13) <span class="string">&quot;libai&quot;</span></span><br><span class="line">14) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">15) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">16) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">17) <span class="string">&quot;xiongda&quot;</span></span><br><span class="line">18) <span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>
<p>用户Kirari的好友们有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd kirariRank 0 aaaa 0 bbbb 0  cccc 0 libai 0 lisi 0 xiaoming 0 kirari</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE kirariRank 0 -1</span><br><span class="line">1) <span class="string">&quot;libai&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;cccc&quot;</span></span><br><span class="line">5) <span class="string">&quot;kirari&quot;</span></span><br><span class="line">6) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line">7) <span class="string">&quot;bbbb&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="排行榜的实现"><a href="#排行榜的实现" class="headerlink" title="排行榜的实现"></a>排行榜的实现</h3><p>默默造数据中…..不会写shell脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINCRBY rankall 9999 kirari</span><br><span class="line"><span class="string">&quot;9999&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY rankall 10000 aaaa</span><br><span class="line"><span class="string">&quot;10000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY rankall 3691 lisi</span><br><span class="line"><span class="string">&quot;3691&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY rankall 5963 cccc</span><br><span class="line"><span class="string">&quot;5963&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY rankall 20000 bbbb</span><br><span class="line"><span class="string">&quot;20000&quot;</span></span><br></pre></td></tr></table></figure>
<p>微信运动在数据来源（用户的手机、手表）收集到了运动数据后现在总排行榜进行设置运动步数</p>
<p>当用户发动请求查看运动排行榜时使用并集把数据赋值给赋值给用户就完成了排行榜的实现：</p>
<p><code>ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINTERSTORE kirariRank 2 kirariRank rankall aggregate max</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE kirariRank 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;20000&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;10000&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;kirari&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;9999&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;5963&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">10) <span class="string">&quot;3691&quot;</span></span><br><span class="line">11) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">12) <span class="string">&quot;0&quot;</span></span><br><span class="line">13) <span class="string">&quot;libai&quot;</span></span><br><span class="line">14) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意进行交集运算的时候是要rankall总排行榜与用户的交集而不是把rankall整个复制（踩坑了…）</p>
<p>并且设置模式为最大值替换，因为你的好友可能会在运动！</p>
</blockquote>
<p>排行榜做好了，发现bbbb用户是运动步数最多的人，并且按照步数从大到小进行排名！</p>
<h3 id="整点运动步数清零"><a href="#整点运动步数清零" class="headerlink" title="整点运动步数清零"></a>整点运动步数清零</h3><p>我想到的方法是再创建一个有序集合，这个有序集合中的所有score均为0</p>
<p>每当一天过去的零点整点发送命令：</p>
<p><code>ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</code></p>
<p>来实现零点运动步数清零（这里使用交集和并集合似乎都可以，但是为了后面的停用功能使用交集）</p>
<p>测试：</p>
<p>现在的情况只有kirari是有步数（懒得造数据….只要被清零效果都一样）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE rankall 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;kirari&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;11&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;0&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;xiongda&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;0&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;0&quot;</span></span><br><span class="line"> ....</span><br></pre></td></tr></table></figure>
<p>到了零点发送命令：<code>ZINTERSTORE rankall 1 zero aggregate min</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINTERSTORE rankall 2 zero rankall aggregate min</span><br><span class="line">(<span class="built_in">integer</span>) 18</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE rankall 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;0&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;0&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;0&quot;</span></span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>
<p>发现所有步数数据已经清零</p>
<h3 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h3><p>使用集合来实现</p>
<p>用户aaaa、bbbb、cccc点赞给kirari点赞，查看点赞的人是谁，随后bbbb又取消点赞的实现：</p>
<ol>
<li>用户aaaa、bbbb、cccc惊叹我的运动步数来给我点赞<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd kirariGood aaaa bbbb cccc</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure></li>
<li>我查看有谁给我点赞了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS kirariGood</span><br><span class="line">1) <span class="string">&quot;cccc&quot;</span></span><br><span class="line">2) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line">3) <span class="string">&quot;aaaa&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>看看点赞的人数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCARD kirariGood</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure></li>
<li>bbbb不知道是嫉妒我的运动步数，还是喜欢我害羞了不敢看我的运动步数取消了点赞<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SREM kirariGood bbbb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></li>
<li>我这个时候查看给我点赞的人发现bbbb不见了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS kirariGood</span><br><span class="line">1) <span class="string">&quot;cccc&quot;</span></span><br><span class="line">2) <span class="string">&quot;aaaa&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>点赞人数也变成了2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCARD kirariGood</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure></li>
<li>第二天到了清除所有的点赞数据<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del kirariGood</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SCARD kirariGood</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="占领N个朋友的封面"><a href="#占领N个朋友的封面" class="headerlink" title="占领N个朋友的封面"></a>占领N个朋友的封面</h3><p>我的想法只有遍历所有开通微信运动的好友中遍历一边，看自己的排名是第几名</p>
<p>是第一就加一，不是则遍历到最后</p>
<p>先看一下排行榜：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE kirariRank 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;20000&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;10000&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;kirari&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;9999&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;5963&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">10) <span class="string">&quot;3691&quot;</span></span><br><span class="line">11) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">12) <span class="string">&quot;0&quot;</span></span><br><span class="line">13) <span class="string">&quot;libai&quot;</span></span><br><span class="line">14) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看排名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK kirariRank kirari</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意此时的索引是从0开始的，所以排名要在索引加上1</p>
<p>即此时我的排名在我的排行榜里是第三名</p>
</blockquote>
<h3 id="不让他参与我的排名"><a href="#不让他参与我的排名" class="headerlink" title="不让他参与我的排名"></a>不让他参与我的排名</h3><p>类似删除好友，把这个用户从我的好友中移除</p>
<p>我们先看一下排行榜</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINTERSTORE kirariRank 2 kirariRank rankall aggregate max</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE kirariRank 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;bbbb&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;20000&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;10000&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;kirari&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;9999&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;5963&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">10) <span class="string">&quot;3691&quot;</span></span><br><span class="line">11) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">12) <span class="string">&quot;0&quot;</span></span><br><span class="line">13) <span class="string">&quot;libai&quot;</span></span><br><span class="line">14) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<p>可恶！！bbbb居然比我多这么多步，我不想见到他！</p>
<p>不想见到他</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem kirariRank bbbb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p>再看一下排行榜</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE kirariRank 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;10000&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;kirari&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;9999&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;5963&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;3691&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">10) <span class="string">&quot;0&quot;</span></span><br><span class="line">11) <span class="string">&quot;libai&quot;</span></span><br><span class="line">12) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<p>发现bbbb从我的排行榜消失了</p>
<h3 id="不加入排行榜"><a href="#不加入排行榜" class="headerlink" title="不加入排行榜"></a>不加入排行榜</h3><p>把我从我自己的表中删除，且从rankall集合中删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem kirariRank kirari</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrem rankall kirari</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE kirariRank 0 -1 withscores</span><br><span class="line"> 1) <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;10000&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;cccc&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;5963&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;3691&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;0&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;libai&quot;</span></span><br><span class="line">10) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>
<p>我就从排行榜消失了</p>
<h3 id="停用微信运动"><a href="#停用微信运动" class="headerlink" title="停用微信运动"></a>停用微信运动</h3><p>从排行榜集合和整点清零集合中移除，且删除用户 的排行榜集合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem kirariRank kirari</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrem zero kirari</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; del kirariRank</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>想法</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次笔试</title>
    <url>/posts/c179e74e.html</url>
    <content><![CDATA[<p>最近找实习中，选择的是java方向的后端开发。</p>
<p>找的时间有些晚了，七月才开始投暑期实习，很多公司三四月就开始招了，找了好多实习都是已读不回，今年的市场和经济真是不容乐观啊！</p>
<p>只能寄希望于秋招了吧。</p>
<p>接下来说一下理我的第一次的笔试题吧</p>
<h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>可能是校招的原因，笔试题并不是很难。</p>
<p>但是他使用的代码笔试平台不给你检测样例的功能，导致你只能自己构造样例或脑测，有些麻烦</p>
<p>也可能是我不明白这些测评平台的测评方法</p>
<h3 id="第一题，二叉树的遍历打印"><a href="#第一题，二叉树的遍历打印" class="headerlink" title="第一题，二叉树的遍历打印"></a>第一题，二叉树的遍历打印</h3><p>很简单的二叉树遍历，但是要求是顺序相反</p>
<p>也就是说先从左到右遍历</p>
<p>再从右到左遍历，如此循环</p>
<p>因为面的是java后端，所以使用的是java写程序，因为学算法和写算法都是用的C/C++,对于java 的库函数不是很熟悉，有些像是被削弱实力三分的感觉（虽然本来就不太强是了</p>
<p>解决方案：用数组模拟二叉树，每个节点N的子结点是<code>2*N+1</code>或者<code>2*N+2</code>，设置空节点为-1，如果是空节点 则跳过</p>
<p>根据层数%2来判断是先左还是先右。</p>
<p>先左则<code>2*N+1</code>再<code>2*N+2</code>,先右打印则相反</p>
<p>值得一提，原本是想使用队列来实现，但是发现队列完全没有到…</p>
<h3 id="第二题，缓存"><a href="#第二题，缓存" class="headerlink" title="第二题，缓存"></a>第二题，缓存</h3><p>题目是缓存的提取和存储，超过指定长度则删除替换使用频率最少的缓存</p>
<p>要求O(1)的时间复杂度，提示用新的第三个字段存储使用频率</p>
<p>我的想法是用空间换时间，既然是O(1)复杂度那我就定义两个足够长的数组</p>
<p>一个是value[key]存储value，一个是number[key]存储number，这样就可以O（1）的复杂度实现提取信息和存储信息了</p>
<blockquote>
<p>写文时仔细想了一想，hashMap的Value是一个Object就可以实现这个效果了，这个Object是value和使用次数组合就好了…</p>
</blockquote>
<h3 id="第三题，sql"><a href="#第三题，sql" class="headerlink" title="第三题，sql"></a>第三题，sql</h3><p>商品表、订单表（用户、总价格、时间）、详细订单信息表（有详细的商品件数等等）</p>
<p>是否还有其他表我我忘记了</p>
<p>要求：六月用户首单平均价，获客代价平均值</p>
<p>获客代价=商品单价*件数-最终价格</p>
<p>很痛苦，没有调试的程序，随便写了</p>
<h3 id="第四题，情景题"><a href="#第四题，情景题" class="headerlink" title="第四题，情景题"></a>第四题，情景题</h3><p>登录时，十分钟内登陆失败三次账号锁定三十分钟</p>
<p>使用markdown格式答题</p>
<p>要求考虑高并发、高可用、高稳定等等</p>
<p>我的想法就是redis了，设置过期时间，高可用高并发就集群</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>欠缺很多，沉淀俩个月找秋招</p>
<p>附一张最近喜欢的月落西山图</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407130607814.webp" alt=""></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407130601725.webp" alt=""></p>
]]></content>
      <categories>
        <category>找工作</category>
      </categories>
      <tags>
        <tag>笔试</tag>
        <tag>找工作</tag>
      </tags>
  </entry>
  <entry>
    <title>利用请求标头Referer实现一些有趣功能</title>
    <url>/posts/54e16799.html</url>
    <content><![CDATA[<blockquote>
<p>思路来源：<a href="https://digu.plus/post/87af0182c9ab4aa6adcd3c009c2360f0/">嘀咕虫洞 - 评论是否来自虫洞的另一端？ - 嘀咕 (digu.plus)</a></p>
</blockquote>
<p>当我们打开一个网站，在请求报头中的<code>Referer</code>属性会显示出请求当前网站的路径</p>
<p>例如我们在百度中使用搜索这个功能，跳转到其他页面后使用F12的网页检查器，找出跳转界面请求响应的信息，就可以在<code>Referer</code>找到请求现在网站原来的网址</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240527183348480.webp" alt="百度的请求报头"></p>
<p>利用这个信息可以做到什么呢，像<a href="https://digu.plus/post/87af0182c9ab4aa6adcd3c009c2360f0/">嘀咕虫洞 - 评论是否来自虫洞的另一端？</a>一样。做一个标记访客来源地址，给他们一个标志，实现一些特殊的样式。</p>
<p>也可以使用这个禁止某些来源网站的跳转</p>
<p>也可以使用<code>Referer</code>给访客来源进行统计，计算有哪些途径来源来优化网站，或者制成图表进行展示</p>
<p>更多作用等你探索…</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>博客圈学习</tag>
        <tag>请求报头</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本初体验</title>
    <url>/posts/2022a644.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从上了大学以后，无论是刷课还是找资料，亦或者是找资源，油猴脚本总能发挥出非同凡响的作用，帮了我可多的忙。</p>
<p>怀着因为他人为我撑过伞，我也想为了他人撑一把伞的想法，一直都很想写一个脚本，但是实力不足和不知道写什么一直阻碍着我行动…哈哈</p>
<p>不过我终于找到一个好想法了：b站强制使用的新版UI把旧版存在的当前时间在线观看人数排行榜给删掉了，但是功能还在，每次想找都得去找链接，很是麻烦。</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528154231879.webp" alt="在线观看人数排行榜"></p>
<p>所以我的想法是写一个显示入口的脚本点击跳转。</p>
<p>说干就干！</p>
<h2 id="油猴脚本编写"><a href="#油猴脚本编写" class="headerlink" title="油猴脚本编写"></a>油猴脚本编写</h2><p>最简单的方式，在你想添加脚本的地方打开油猴程序会显示添加新脚本的提示点击进去就进入到了脚本编辑器</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528154759913.webp" alt="添加新脚本"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528154428156.webp" alt="添加新脚本"></p>
<p>脚本编辑器中会出现一堆提前写好的，由注释以及<code>==UserSceript==</code>包裹起来的信息：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528155056099.webp" alt="样例"></p>
<p>他们都是什么意思呢？</p>
<ul>
<li><p><code>@name</code>：脚本的名称。</p>
</li>
<li><p><code>@namespace</code>：脚本的命名空间，用于避免与其他脚本冲突。</p>
</li>
<li><p><code>@version</code>：脚本的版本号。</p>
</li>
<li><p><code>@description</code>：脚本的描述。</p>
</li>
<li><p><code>@author</code>：脚本的作者。</p>
</li>
<li><p><code>@match</code>：匹配的 URL 模式，指定脚本在哪些页面上运行。支持通配符 <code>*</code>。</p>
<p>可以通过多个<code>@match</code>写入要插入你所书写的脚本运行的网址，可以使用通配符来匹配多个网址</p>
<p>我写的脚本只包含bilibiili主页所以只有一个网址</p>
</li>
<li><p><code>@include</code>：包括的 URL 模式，功能类似于 <code>@match</code>。</p>
</li>
<li><p><code>@exclude</code>：排除的 URL 模式，指定脚本不在这些页面上运行。</p>
</li>
<li><p><code>@grant</code>：请求特定的权限，如使用 GM_* API。</p>
</li>
<li><p><code>@icon</code>：脚本的图标 URL。</p>
</li>
<li><p><code>@run-at</code>：指定脚本的运行时机。可选值包括 <code>document-start</code>、<code>document-end</code>、<code>document-idle</code> 等。</p>
<p>三个选项为页面加载前，页面加载完成但是图片样式未加载时（不填写时默认），页面完全加载后（类似window.onload）</p>
</li>
<li><p><code>@updateURL</code>：脚本更新的 URL。</p>
</li>
<li><p><code>@downloadURL</code>：脚本下载的 URL。</p>
</li>
<li><p><code>@require</code>：外部脚本文件的 URL，在用户脚本之前加载。</p>
</li>
<li><p><code>@resource</code>：外部资源的 URL，可以通过 GM_getResourceText 和 GM_getResourceURL 访问。</p>
</li>
<li><p><code>@license</code>: 开源协议 </p>
</li>
</ul>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528161036750.webp" alt="对比信息"></p>
<p>填写完这些(不是全部都要写，在下面空白区域就可以写你的脚本了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>只要是javaScript语言的代码都可以写进来，甚至你可以引入jquery的js文件之后写入js代码。vue等等根据理论应该也可以</p>
<p>例如：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528161124920.webp" alt="例子"></p>
<h2 id="发布到GreasyFork"><a href="#发布到GreasyFork" class="headerlink" title="发布到GreasyFork"></a>发布到GreasyFork</h2><p>用过脚本的时候肯定对这个界面不陌生，我们使用脚本但不知道该用什么的时候，油猴给我们这个页面跳转，在这个界面搜索想要的脚本并下载使用。</p>
<p>如果你想要你编写的脚本在网上发布，就可以使用<code>greasyfork</code>发布</p>
<p>首先先进入<a href="https://greasyfork.org/zh-CN/">Greasy Fork - 安全、实用的用户脚本大全</a>—&gt;右上角登录—&gt;点击用户名进入个人主页—&gt;发布你编写的脚本</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240528162135646.webp" alt="GreasyFork"></p>
<p>展示一下我完成的 脚本内容：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog%7BD95B5F6B-F8E4-4ae6-A20A-309A4A75C4F7%7D.webp" alt="完成效果"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘之天气预测</title>
    <url>/posts/817b12ec.html</url>
    <content><![CDATA[<h2 id="背景与目标"><a href="#背景与目标" class="headerlink" title="背景与目标"></a>背景与目标</h2><p>每天变化多端的天气让我们的生活从满了未知的可能，极大的影响了我们的生活<br>天气预测在许多领域中发挥着至关重要的作用，从农业到交通运输再到灾害管理，准确的天气预报能够帮助各行业提前应对可能的天气变化，减少损失，优化资源分配。随着数据科学和机器学习技术的发展，基于历史天气数据的预测模型已经成为现代天气预报的重要工具。通过利用大量的历史气象数据，构建和训练机器学习模型，可以更精确地预测未来的天气情况。</p>
<p>本项目的目标是构建和评估多种机器学习模型，以预测某些地点是否会在第二天降雨（RainTomorrow）。我们使用了一系列气象特征数据，例如最高气温、最低气温、降雨量、风速、湿度、气压等，通过不同的机器学习算法进行训练和测试。具体目标包括：</p>
<ol>
<li>数据预处理与标准化：清洗和规范化气象数据，以确保模型训练的有效性。</li>
<li>模型构建与训练：使用多种机器学习算法，包括决策树、随机森林、逻辑回归、K近邻、支持向量机和神经网络，构建预测模型。</li>
<li>模型评估与比较：通过多种评估指标（如准确率、精确率、召回率、F1值和AUC值）评估各模型的性能，找出最优的预测模型。</li>
<li>结果可视化：使用图表展示各地点的模型性能，以便直观地比较不同模型在不同地点的预测效果。</li>
<li>进一步优化与改进：根据评估结果，对模型进行优化，以提高预测的准确性和可靠性。<br>通过实现上述目标，我们希望能够构建出一个高效、可靠的天气预测系统，为相关领域提供有价值的参考。</li>
</ol>
<h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><div class="table-container">
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Date</td>
<td>日期</td>
</tr>
<tr>
<td>Location</td>
<td>地点</td>
</tr>
<tr>
<td>MinTemp</td>
<td>最低气温（摄氏度）</td>
</tr>
<tr>
<td>MaxTemp</td>
<td>最高气温（摄氏度）</td>
</tr>
<tr>
<td>Rainfall</td>
<td>降雨量（毫米）</td>
</tr>
<tr>
<td>Evaporation</td>
<td>蒸发量（毫米）</td>
</tr>
<tr>
<td>Sunshine</td>
<td>日照时数（小时）</td>
</tr>
<tr>
<td>WindGustDir</td>
<td>最大阵风的风向</td>
</tr>
<tr>
<td>WindGustSpeed</td>
<td>最大阵风的风速（公里/小时）</td>
</tr>
<tr>
<td>WindDir9am</td>
<td>上午9点的风向</td>
</tr>
<tr>
<td>WindDir3pm</td>
<td>下午3点的风向</td>
</tr>
<tr>
<td>WindSpeed9am</td>
<td>上午9点的风速（公里/小时）</td>
</tr>
<tr>
<td>WindSpeed3pm</td>
<td>下午3点的风速（公里/小时）</td>
</tr>
<tr>
<td>Humidity9am</td>
<td>上午9点的湿度（百分比）</td>
</tr>
<tr>
<td>Humidity3pm</td>
<td>下午3点的湿度（百分比）</td>
</tr>
<tr>
<td>Pressure9am</td>
<td>上午9点的气压（百帕）</td>
</tr>
<tr>
<td>Pressure3pm</td>
<td>下午3点的气压（百帕）</td>
</tr>
<tr>
<td>Cloud9am</td>
<td>上午9点的云量（八分制）</td>
</tr>
<tr>
<td>Cloud3pm</td>
<td>下午3点的云量（八分制）</td>
</tr>
<tr>
<td>Temp9am</td>
<td>上午9点的温度（摄氏度）</td>
</tr>
<tr>
<td>Temp3pm</td>
<td>下午3点的温度（摄氏度）</td>
</tr>
<tr>
<td>RainToday</td>
<td>是否在今天下雨（是/否）</td>
</tr>
<tr>
<td>RISK_MM</td>
<td>明天降雨的风险量（毫米）</td>
</tr>
<tr>
<td>RainTomorrow</td>
<td>是否在明天下雨（是/否）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>首先我们对数据进行读取以及预处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller, acf, pacf</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima.model <span class="keyword">import</span> ARIMA</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf, plot_pacf</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;weatherAUS.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按日期排序</span></span><br><span class="line"><span class="comment"># df = df.sort_values(by=&#x27;Date&#x27;)</span></span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"><span class="comment"># 设置日期为索引</span></span><br><span class="line">df.set_index(<span class="string">&#x27;Date&#x27;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>显而易见的，我要预测一个数据的最高温度的数据，以及地点，因为每个地点对应的时间是唯一的 ，如果不分类地点的话<br>就会出现一个时间有很多数据最高温度的 情况<br>之前没分类  就走错了很多弯路  导致步骤对了反而没有成功的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只保留需要的列</span></span><br><span class="line">df = df[[<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;MaxTemp&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除缺失值</span></span><br><span class="line">df = df.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个地点进行分析，比如 &quot;Albury&quot;</span></span><br><span class="line">location = <span class="string">&#x27;Albury&#x27;</span></span><br><span class="line">location_data = df[df[<span class="string">&#x27;Location&#x27;</span>] == location][<span class="string">&#x27;MaxTemp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保时间序列数据具有频率</span></span><br><span class="line">location_data = location_data.asfreq(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用插值法填补缺失值</span></span><br><span class="line">location_data = location_data.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除依然存在的缺失值</span></span><br><span class="line">location_data = location_data.dropna()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制时间序列图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(location_data)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度时间序列&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311413018.webp" alt="png"></p>
<p>显示最高温度的时间序列，我们发现时间序列图中对于这个时间序列跨度很大，，序列是按照以年份来周期循环<br>很平稳且有规律进行周期在一定的范围内稳定的波动，并不是在某个常量值附近波动，根据时序图检验平稳性的原理来判断，该序列属于非平稳的随机序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ADF平稳性检验</span></span><br><span class="line">adf_result = adfuller(location_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ADF 检验结果:&#x27;</span>, adf_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解时间序列，指定周期，比如一年365天</span></span><br><span class="line">decomposition = sm.tsa.seasonal_decompose(location_data, model=<span class="string">&#x27;additive&#x27;</span>, period=<span class="number">365</span>)</span><br><span class="line">fig = decomposition.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<pre><code>ADF 检验结果: (-3.3666814947988617, 0.012148512496123455, 12, 3116, &#123;&#39;1%&#39;: -3.432450351481275, &#39;5%&#39;: -2.862468004787272, &#39;10%&#39;: -2.567263999190068&#125;, 15487.167404620237)
</code></pre><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311414880.webp" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ADF平稳性检验</span></span><br><span class="line">adf_result = adfuller(location_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ADF 检验结果:&#x27;</span>, adf_result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ADF统计量: <span class="subst">&#123;adf_result[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p值: <span class="subst">&#123;adf_result[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;使用的滞后数: <span class="subst">&#123;adf_result[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;样本量: <span class="subst">&#123;adf_result[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;临界值:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> adf_result[<span class="number">4</span>].items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;    <span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> adf_result[<span class="number">1</span>] &lt; <span class="number">0.05</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;时间序列是平稳的&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;时间序列不是平稳的&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制自相关函数（ACF）图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plot_acf(location_data, lags=<span class="number">50</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的自相关函数（ACF）&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADF 检验结果: (-3.3666814947988617, 0.012148512496123455, 12, 3116, &#123;&#x27;1%&#x27;: -3.432450351481275, &#x27;5%&#x27;: -2.862468004787272, &#x27;10%&#x27;: -2.567263999190068&#125;, 15487.167404620237)</span><br><span class="line">ADF统计量: -3.3666814947988617</span><br><span class="line">p值: 0.012148512496123455</span><br><span class="line">使用的滞后数: 12</span><br><span class="line">样本量: 3116</span><br><span class="line">临界值:</span><br><span class="line">    1%: -3.432450351481275</span><br><span class="line">    5%: -2.862468004787272</span><br><span class="line">    10%: -2.567263999190068</span><br><span class="line">时间序列是平稳的</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311414807.webp" alt="png"></p>
<p>从自相关图看出，自相关系数在X轴 的上方 ，并不是在x轴上下波动，是单调趋势序列的典型特征，具有持久的正自相关性，且数值基本无变化，意味着时间序列中存在某种周期性或趋势。</p>
<p>这个序列是有规律的以年为周期进行波动</p>
<p>根据ADF检验结果，p值为0.0121，小于0.05，因此时间序列是平稳的。即使ACF图显示自相关系数从1.0慢慢降低到0.6，这也可能表示该时间序列中存在一些长期依赖性或季节性。</p>
<p>尽管ADF检验表明时间序列是平稳的，但是ACF图的结果可以提供更多信息。ACF图显示自相关系数从1.0逐渐降低到0.6，表明存在一些长期依赖性，这可能是由于季节性或其他长期趋势引起的。</p>
<p>解释与处理建议<br>长期依赖性：ACF图显示的长期依赖性表明时间序列中存在长期趋势或周期性成分。即使时间序列整体上是平稳的，但这些成分可能需要进一步的处理或建模。</p>
<p>季节性：如果时间序列中存在季节性成分，可以考虑使用季节性差分来去除季节性。例如，对于月度数据，可以进行12期差分。</p>
<p>模型选择：在进行时间序列建模时，可以考虑使用带有季节性成分的模型，如SARIMA模型。</p>
<p>所以我们要进行差分来处理数据，由于数据是一年循环波动，那么属于季节周期性<br>所以使用季节差分，以一年365为参数进行降维</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行季节性差分</span></span><br><span class="line">seasonal_diff = location_data.diff(<span class="number">365</span>).dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制差分后的时间序列图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(seasonal_diff)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分时间序列&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制差分后的自相关函数（ACF）图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">10</span>))</span><br><span class="line">plot_acf(seasonal_diff, lags=<span class="number">50</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分自相关函数（ACF）&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制差分后的偏自相关函数（PACF）图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plot_pacf(seasonal_diff, lags=<span class="number">50</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分偏自相关函数（PACF）&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311414522.webp" alt="png"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311414771.webp" alt="png"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311415632.webp" alt="png">    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 季节性差分后的ADF检验</span></span><br><span class="line">result = adfuller(seasonal_diff.dropna())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ADF Statistic: %f&#x27;</span> % result[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p-value: %f&#x27;</span> % result[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Critical Values:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> result[<span class="number">4</span>].items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t%s: %.3f&#x27;</span> % (key, value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果解读</span></span><br><span class="line"><span class="keyword">if</span> result[<span class="number">1</span>] &gt; <span class="number">0.05</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;季节性差分后的数据仍然是非平稳的&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;季节性差分后的数据是平稳的&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADF Statistic: -11.476252</span><br><span class="line">p-value: 0.000000</span><br><span class="line">Critical Values:</span><br><span class="line">	1%: -3.433</span><br><span class="line">	5%: -2.863</span><br><span class="line">	10%: -2.567</span><br><span class="line">季节性差分后的数据是平稳的</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.stats.diagnostic <span class="keyword">import</span> acorr_ljungbox</span><br><span class="line"><span class="comment"># 去除NaN值</span></span><br><span class="line">max_temp_diff = seasonal_diff.dropna()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 白噪声检验</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;差分序列的白噪声检验结果：\n&quot;</span> , acorr_ljungbox(max_temp_diff, lags=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分序列的白噪声检验结果：</span><br><span class="line">        lb_stat      lb_pvalue</span><br><span class="line">1  1056.822391  8.006870e-232</span><br></pre></td></tr></table></figure>
<h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><p>找出最佳参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择ARIMA模型参数</span></span><br><span class="line"><span class="comment"># max_temp_diff = location_data.dropna()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_temp_diff  = seasonal_diff.dropna()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order_select = sm.tsa.arma_order_select_ic(max_temp_diff, ic=[<span class="string">&#x27;bic&#x27;</span>], trend=<span class="string">&#x27;n&#x27;</span>, max_ar=<span class="number">5</span>, max_ma=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;BIC选择的最佳参数:&#x27;</span>, order_select.bic_min_order)</span><br></pre></td></tr></table></figure>
<pre><code>BIC选择的最佳参数: (1, 4)
</code></pre><p>BIC选择的最佳参数: (1, 4)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拟合ARIMA模型</span></span><br><span class="line">model = ARIMA(df[<span class="string">&#x27;MaxTemp&#x27;</span>], order=(order_select.bic_min_order[<span class="number">0</span>], <span class="number">0</span>, order_select.bic_min_order[<span class="number">1</span>]))</span><br><span class="line">model_fit = model.fit()</span><br><span class="line"><span class="built_in">print</span>(model_fit.summary())</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                               SARIMAX Results                                </span><br><span class="line">==============================================================================</span><br><span class="line">Dep. Variable:                MaxTemp   No. Observations:               141871</span><br><span class="line">Model:                 ARIMA(1, 0, 4)   Log Likelihood             -366137.686</span><br><span class="line">Date:                Tue, 02 Jul 2024   AIC                         732289.372</span><br><span class="line">Time:                        04:42:15   BIC                         732358.411</span><br><span class="line">Sample:                             0   HQIC                        732310.000</span><br><span class="line">                             - 141871                                         </span><br><span class="line">Covariance Type:                  opg                                         </span><br><span class="line">==============================================================================</span><br><span class="line">                 coef    std err          z      P&gt;|z|      [0.025      0.975]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">const         23.2269      0.377     61.576      0.000      22.488      23.966</span><br><span class="line">ar.L1          0.9950      0.000   3094.406      0.000       0.994       0.996</span><br><span class="line">ma.L1         -0.3711      0.002   -178.084      0.000      -0.375      -0.367</span><br><span class="line">ma.L2         -0.3006      0.002   -127.512      0.000      -0.305      -0.296</span><br><span class="line">ma.L3         -0.1166      0.002    -48.575      0.000      -0.121      -0.112</span><br><span class="line">ma.L4         -0.0158      0.002     -7.138      0.000      -0.020      -0.011</span><br><span class="line">sigma2        10.2129      0.028    369.185      0.000      10.159      10.267</span><br><span class="line">===================================================================================</span><br><span class="line">Ljung-Box (L1) (Q):                   0.03   Jarque-Bera (JB):             30952.95</span><br><span class="line">Prob(Q):                              0.87   Prob(JB):                         0.00</span><br><span class="line">Heteroskedasticity (H):               1.04   Skew:                            -0.15</span><br><span class="line">Prob(H) (two-sided):                  0.00   Kurtosis:                         5.27</span><br><span class="line">===================================================================================</span><br><span class="line"></span><br><span class="line">Warnings:</span><br><span class="line">[1] Covariance matrix calculated using the outer product of gradients (complex-step).</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拆分训练集和测试集</span></span><br><span class="line">train_data = seasonal_diff[:-<span class="number">365</span>]</span><br><span class="line">test_data = seasonal_diff[-<span class="number">365</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练ARIMA模型</span></span><br><span class="line">model = ARIMA(train_data, order=(<span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">model_fit = model.fit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">forecast_result = model_fit.get_forecast(steps=<span class="built_in">len</span>(test_data))</span><br><span class="line">forecast = forecast_result.predicted_mean</span><br><span class="line">conf_int = forecast_result.conf_int()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印预测结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;预测未来30天的最高温度: <span class="subst">&#123;forecast&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;预测的置信区间: <span class="subst">&#123;conf_int&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制预测结果</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(train_data.index, train_data, label=<span class="string">&#x27;训练数据&#x27;</span>)</span><br><span class="line">plt.plot(test_data.index, test_data, label=<span class="string">&#x27;实际值&#x27;</span>)</span><br><span class="line">plt.plot(test_data.index, forecast, label=<span class="string">&#x27;预测值&#x27;</span>)</span><br><span class="line">plt.fill_between(test_data.index, conf_int.iloc[:, <span class="number">0</span>], conf_int.iloc[:, <span class="number">1</span>], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">预测未来30天的最高温度: 2016-06-26   -1.574331</span><br><span class="line">2016-06-27   -0.481513</span><br><span class="line">2016-06-28    0.067825</span><br><span class="line">2016-06-29    0.390562</span><br><span class="line">2016-06-30    0.363980</span><br><span class="line">                ...   </span><br><span class="line">2017-06-21    0.144490</span><br><span class="line">2017-06-22    0.144482</span><br><span class="line">2017-06-23    0.144474</span><br><span class="line">2017-06-24    0.144466</span><br><span class="line">2017-06-25    0.144458</span><br><span class="line">Freq: D, Name: predicted_mean, Length: 365, dtype: float64</span><br><span class="line">预测的置信区间:             lower MaxTemp  upper MaxTemp</span><br><span class="line">2016-06-26      -9.334773       6.186111</span><br><span class="line">2016-06-27      -9.752366       8.789340</span><br><span class="line">2016-06-28      -9.567745       9.703394</span><br><span class="line">2016-06-29      -9.345149      10.126273</span><br><span class="line">2016-06-30      -9.393319      10.121280</span><br><span class="line">...                   ...            ...</span><br><span class="line">2017-06-21      -9.795905      10.084886</span><br><span class="line">2017-06-22      -9.795913      10.084877</span><br><span class="line">2017-06-23      -9.795922      10.084869</span><br><span class="line">2017-06-24      -9.795930      10.084861</span><br><span class="line">2017-06-25      -9.795938      10.084853</span><br><span class="line"></span><br><span class="line">[365 rows x 2 columns]</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311415016.webp" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只显示最后90天的数据</span></span><br><span class="line">last_360_days = seasonal_diff[-<span class="number">700</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制预测结果</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(last_360_days.index, last_360_days, label=<span class="string">&#x27;实际值&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.plot(test_data.index, forecast, label=<span class="string">&#x27;预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.fill_between(test_data.index, conf_int.iloc[:, <span class="number">0</span>], conf_int.iloc[:, <span class="number">1</span>], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度预测 (最后360天)&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311416207.webp" alt="png"></p>
<p>返回原本的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取原始的最高温度数据</span></span><br><span class="line">original_data = df[df[<span class="string">&#x27;Location&#x27;</span>] == location][<span class="string">&#x27;MaxTemp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保时间序列数据具有频率</span></span><br><span class="line">original_data = original_data.asfreq(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用插值法填补缺失值</span></span><br><span class="line">original_data = original_data.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除依然存在的缺失值</span></span><br><span class="line">original_data = original_data.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取季节性差分的基础值</span></span><br><span class="line">seasonal_base = original_data.shift(<span class="number">365</span>).dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将差分后的预测值还原为原始的时间序列数据</span></span><br><span class="line">restored_forecast = forecast + seasonal_base[-<span class="built_in">len</span>(forecast):]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原始数据和还原后的预测值的对比图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.plot(original_data.index, original_data, label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.plot(restored_forecast.index, restored_forecast, label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.fill_between(test_data.index, conf_int.iloc[:, <span class="number">0</span>] + seasonal_base[-<span class="built_in">len</span>(forecast):],</span><br><span class="line">                 conf_int.iloc[:, <span class="number">1</span>] + seasonal_base[-<span class="built_in">len</span>(forecast):], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印还原后的预测值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;还原后的预测值: <span class="subst">&#123;restored_forecast&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;预测的置信区间: <span class="subst">&#123;conf_int&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311416649.webp" alt="png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还原后的预测值: 2016-06-26    11.625669</span><br><span class="line">2016-06-27    11.918487</span><br><span class="line">2016-06-28    15.067825</span><br><span class="line">2016-06-29     8.990562</span><br><span class="line">2016-06-30    10.963980</span><br><span class="line">                ...    </span><br><span class="line">2017-06-21    11.744490</span><br><span class="line">2017-06-22    13.844482</span><br><span class="line">2017-06-23    13.344474</span><br><span class="line">2017-06-24     8.344466</span><br><span class="line">2017-06-25    10.644458</span><br><span class="line">Freq: D, Length: 365, dtype: float64</span><br><span class="line">预测的置信区间:             lower MaxTemp  upper MaxTemp</span><br><span class="line">2016-06-26      -9.334773       6.186111</span><br><span class="line">2016-06-27      -9.752366       8.789340</span><br><span class="line">2016-06-28      -9.567745       9.703394</span><br><span class="line">2016-06-29      -9.345149      10.126273</span><br><span class="line">2016-06-30      -9.393319      10.121280</span><br><span class="line">...                   ...            ...</span><br><span class="line">2017-06-21      -9.795905      10.084886</span><br><span class="line">2017-06-22      -9.795913      10.084877</span><br><span class="line">2017-06-23      -9.795922      10.084869</span><br><span class="line">2017-06-24      -9.795930      10.084861</span><br><span class="line">2017-06-25      -9.795938      10.084853</span><br><span class="line"></span><br><span class="line">[365 rows x 2 columns]</span><br></pre></td></tr></table></figure>
<p>发现测试结果和 实际结果相差不大</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取原始的最高温度数据</span></span><br><span class="line">original_data = df[df[<span class="string">&#x27;Location&#x27;</span>] == location][<span class="string">&#x27;MaxTemp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保时间序列数据具有频率</span></span><br><span class="line">original_data = original_data.asfreq(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用插值法填补缺失值</span></span><br><span class="line">original_data = original_data.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除依然存在的缺失值</span></span><br><span class="line">original_data = original_data.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取季节性差分的基础值</span></span><br><span class="line">seasonal_base = original_data.shift(<span class="number">365</span>).dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将差分后的预测值还原为原始的时间序列数据</span></span><br><span class="line">restored_forecast = forecast + seasonal_base[-<span class="built_in">len</span>(forecast):]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时间范围，显示测试集的最后一段时间</span></span><br><span class="line">last_days = <span class="number">365</span> <span class="comment"># 可以根据需要调整</span></span><br><span class="line">time_range = original_data.index[-last_days:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原始数据和还原后的预测值的详细对比图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line">plt.plot(original_data[time_range], label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">plt.plot(restored_forecast[time_range], label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">plt.fill_between(time_range, conf_int.iloc[:, <span class="number">0</span>][time_range] + seasonal_base[-<span class="built_in">len</span>(forecast):][time_range],</span><br><span class="line">                 conf_int.iloc[:, <span class="number">1</span>][time_range] + seasonal_base[-<span class="built_in">len</span>(forecast):][time_range], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比 (详细)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印还原后的预测值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;还原后的预测值: <span class="subst">&#123;restored_forecast&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;预测的置信区间: <span class="subst">&#123;conf_int&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311416396.webp" alt="png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还原后的预测值: 2016-06-26    11.625669</span><br><span class="line">2016-06-27    11.918487</span><br><span class="line">2016-06-28    15.067825</span><br><span class="line">2016-06-29     8.990562</span><br><span class="line">2016-06-30    10.963980</span><br><span class="line">                ...    </span><br><span class="line">2017-06-21    11.744490</span><br><span class="line">2017-06-22    13.844482</span><br><span class="line">2017-06-23    13.344474</span><br><span class="line">2017-06-24     8.344466</span><br><span class="line">2017-06-25    10.644458</span><br><span class="line">Freq: D, Length: 365, dtype: float64</span><br><span class="line">预测的置信区间:             lower MaxTemp  upper MaxTemp</span><br><span class="line">2016-06-26      -9.334773       6.186111</span><br><span class="line">2016-06-27      -9.752366       8.789340</span><br><span class="line">2016-06-28      -9.567745       9.703394</span><br><span class="line">2016-06-29      -9.345149      10.126273</span><br><span class="line">2016-06-30      -9.393319      10.121280</span><br><span class="line">...                   ...            ...</span><br><span class="line">2017-06-21      -9.795905      10.084886</span><br><span class="line">2017-06-22      -9.795913      10.084877</span><br><span class="line">2017-06-23      -9.795922      10.084869</span><br><span class="line">2017-06-24      -9.795930      10.084861</span><br><span class="line">2017-06-25      -9.795938      10.084853</span><br><span class="line"></span><br><span class="line">[365 rows x 2 columns]</span><br></pre></td></tr></table></figure>
<p>查看更详细的图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取原始的最高温度数据</span></span><br><span class="line">original_data = df[df[<span class="string">&#x27;Location&#x27;</span>] == location][<span class="string">&#x27;MaxTemp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保时间序列数据具有频率</span></span><br><span class="line">original_data = original_data.asfreq(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用插值法填补缺失值</span></span><br><span class="line">original_data = original_data.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除依然存在的缺失值</span></span><br><span class="line">original_data = original_data.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取季节性差分的基础值</span></span><br><span class="line">seasonal_base = original_data.shift(<span class="number">365</span>).dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将差分后的预测值还原为原始的时间序列数据</span></span><br><span class="line">restored_forecast = forecast + seasonal_base[-<span class="built_in">len</span>(forecast):]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时间范围，显示测试集的最后一段时间</span></span><br><span class="line">last_days = <span class="number">30</span> <span class="comment"># 可以根据需要调整</span></span><br><span class="line">time_range = original_data.index[-last_days:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原始数据和还原后的预测值的详细对比图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line">plt.plot(original_data[time_range], label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">plt.plot(restored_forecast[time_range], label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">plt.fill_between(time_range, conf_int.iloc[:, <span class="number">0</span>][time_range] + seasonal_base[-<span class="built_in">len</span>(forecast):][time_range],</span><br><span class="line">                 conf_int.iloc[:, <span class="number">1</span>][time_range] + seasonal_base[-<span class="built_in">len</span>(forecast):][time_range], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比 (详细)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印还原后的预测值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;还原后的预测值: <span class="subst">&#123;restored_forecast&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;预测的置信区间: <span class="subst">&#123;conf_int&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202407311416060.webp" alt="png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还原后的预测值: 2016-06-26    11.625669</span><br><span class="line">2016-06-27    11.918487</span><br><span class="line">2016-06-28    15.067825</span><br><span class="line">2016-06-29     8.990562</span><br><span class="line">2016-06-30    10.963980</span><br><span class="line">                ...    </span><br><span class="line">2017-06-21    11.744490</span><br><span class="line">2017-06-22    13.844482</span><br><span class="line">2017-06-23    13.344474</span><br><span class="line">2017-06-24     8.344466</span><br><span class="line">2017-06-25    10.644458</span><br><span class="line">Freq: D, Length: 365, dtype: float64</span><br><span class="line">预测的置信区间:             lower MaxTemp  upper MaxTemp</span><br><span class="line">2016-06-26      -9.334773       6.186111</span><br><span class="line">2016-06-27      -9.752366       8.789340</span><br><span class="line">2016-06-28      -9.567745       9.703394</span><br><span class="line">2016-06-29      -9.345149      10.126273</span><br><span class="line">2016-06-30      -9.393319      10.121280</span><br><span class="line">...                   ...            ...</span><br><span class="line">2017-06-21      -9.795905      10.084886</span><br><span class="line">2017-06-22      -9.795913      10.084877</span><br><span class="line">2017-06-23      -9.795922      10.084869</span><br><span class="line">2017-06-24      -9.795930      10.084861</span><br><span class="line">2017-06-25      -9.795938      10.084853</span><br><span class="line"></span><br><span class="line">[365 rows x 2 columns]</span><br></pre></td></tr></table></figure>
<h2 id="2所有地区"><a href="#2所有地区" class="headerlink" title="2所有地区"></a>2所有地区</h2><h3 id="全部模型预测-amp-详细信息"><a href="#全部模型预测-amp-详细信息" class="headerlink" title="全部模型预测&amp;详细信息"></a>全部模型预测&amp;详细信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller, acf, pacf</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima.model <span class="keyword">import</span> ARIMA</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf, plot_pacf</span><br><span class="line"><span class="keyword">from</span> statsmodels.stats.diagnostic <span class="keyword">import</span> acorr_ljungbox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;weatherAUS.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按日期排序</span></span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line">df.set_index(<span class="string">&#x27;Date&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除缺失值</span></span><br><span class="line">df = df.dropna(subset=[<span class="string">&#x27;MaxTemp&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有地点的列表</span></span><br><span class="line">locations = df[<span class="string">&#x27;Location&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典来存储预测结果</span></span><br><span class="line">forecasts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个地点</span></span><br><span class="line"><span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在处理地点: <span class="subst">&#123;location&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取特定地点的数据</span></span><br><span class="line">    location_data = df[df[<span class="string">&#x27;Location&#x27;</span>] == location][<span class="string">&#x27;MaxTemp&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确保时间序列数据具有频率</span></span><br><span class="line">    location_data = location_data.asfreq(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用插值法填补缺失值</span></span><br><span class="line">    location_data = location_data.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除依然存在的缺失值</span></span><br><span class="line">    location_data = location_data.dropna()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制时间序列图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">    plt.plot(location_data)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度时间序列&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ADF平稳性检验</span></span><br><span class="line">    adf_result = adfuller(location_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ADF 检验结果:&#x27;</span>, adf_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ADF统计量: <span class="subst">&#123;adf_result[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p值: <span class="subst">&#123;adf_result[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;使用的滞后数: <span class="subst">&#123;adf_result[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;样本量: <span class="subst">&#123;adf_result[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;临界值:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> adf_result[<span class="number">4</span>].items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;    <span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> adf_result[<span class="number">1</span>] &lt; <span class="number">0.05</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;时间序列是平稳的&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;时间序列不是平稳的&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分解时间序列，指定周期，比如一年365天</span></span><br><span class="line">    decomposition = sm.tsa.seasonal_decompose(location_data, model=<span class="string">&#x27;additive&#x27;</span>, period=<span class="number">365</span>)</span><br><span class="line">    fig = decomposition.plot()</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制自相关函数（ACF）图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">    plot_acf(location_data, lags=<span class="number">50</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的自相关函数（ACF）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;滞后数&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;自相关&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行季节性差分</span></span><br><span class="line">    seasonal_diff = location_data.diff(<span class="number">365</span>).dropna()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制差分后的时间序列图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">    plt.plot(seasonal_diff)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分时间序列&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;差分后的最高温度&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制差分后的自相关函数（ACF）图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">    plot_acf(seasonal_diff, lags=<span class="number">50</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分自相关函数（ACF）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;滞后数&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;自相关&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制差分后的偏自相关函数（PACF）图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">    plot_pacf(seasonal_diff, lags=<span class="number">50</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度季节性差分偏自相关函数（PACF）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;滞后数&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;偏自相关&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 季节性差分后的ADF检验</span></span><br><span class="line">    result = adfuller(seasonal_diff.dropna())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ADF Statistic: %f&#x27;</span> % result[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p-value: %f&#x27;</span> % result[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Critical Values:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> result[<span class="number">4</span>].items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\t%s: %.3f&#x27;</span> % (key, value))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 结果解读</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="number">1</span>] &gt; <span class="number">0.05</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;季节性差分后的数据仍然是非平稳的&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;季节性差分后的数据是平稳的&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 白噪声检验</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;差分序列的白噪声检验结果：\n&quot;</span>, acorr_ljungbox(seasonal_diff.dropna(), lags=<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择ARIMA模型参数</span></span><br><span class="line">    order_select = sm.tsa.arma_order_select_ic(seasonal_diff.dropna(), ic=[<span class="string">&#x27;bic&#x27;</span>], trend=<span class="string">&#x27;n&#x27;</span>, max_ar=<span class="number">5</span>, max_ma=<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;BIC选择的最佳参数:&#x27;</span>, order_select.bic_min_order)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 拆分训练集和测试集</span></span><br><span class="line">    train_data = seasonal_diff[:-<span class="number">365</span>]</span><br><span class="line">    test_data = seasonal_diff[-<span class="number">365</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练ARIMA模型</span></span><br><span class="line">    model = ARIMA(train_data, order=(order_select.bic_min_order[<span class="number">0</span>], <span class="number">0</span>, order_select.bic_min_order[<span class="number">1</span>]))</span><br><span class="line">    model_fit = model.fit()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    forecast_result = model_fit.get_forecast(steps=<span class="built_in">len</span>(test_data))</span><br><span class="line">    forecast = forecast_result.predicted_mean</span><br><span class="line">    conf_int = forecast_result.conf_int()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取季节性差分的基础值</span></span><br><span class="line">    seasonal_base = location_data.shift(<span class="number">365</span>).dropna()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将差分后的预测值还原为原始的时间序列数据</span></span><br><span class="line">    restored_forecast = forecast + seasonal_base[-<span class="built_in">len</span>(forecast):]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 存储预测结果</span></span><br><span class="line">    forecasts[location] = &#123;</span><br><span class="line">        <span class="string">&#x27;forecast&#x27;</span>: restored_forecast,</span><br><span class="line">        <span class="string">&#x27;conf_int&#x27;</span>: conf_int,</span><br><span class="line">        <span class="string">&#x27;train_data&#x27;</span>: train_data,</span><br><span class="line">        <span class="string">&#x27;test_data&#x27;</span>: test_data,</span><br><span class="line">        <span class="string">&#x27;original_data&#x27;</span>: location_data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制原始数据和还原后的预测值的对比图（所有数据）</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line">    plt.plot(location_data.index, location_data, label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.plot(restored_forecast.index, restored_forecast, label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.fill_between(test_data.index, conf_int.iloc[:, <span class="number">0</span>] + seasonal_base[-<span class="built_in">len</span>(forecast):],</span><br><span class="line">                     conf_int.iloc[:, <span class="number">1</span>] + seasonal_base[-<span class="built_in">len</span>(forecast):], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比（所有数据）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制原始数据和还原后的预测值的对比图（最后700天的数据）</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line">    plt.plot(location_data.index[-<span class="number">700</span>:], location_data[-<span class="number">700</span>:], label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.plot(restored_forecast.index[-<span class="number">365</span>:], restored_forecast, label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.fill_between(test_data.index[-<span class="number">365</span>:], conf_int.iloc[:, <span class="number">0</span>] + seasonal_base[-<span class="number">365</span>:],</span><br><span class="line">                     conf_int.iloc[:, <span class="number">1</span>] + seasonal_base[-<span class="number">365</span>:], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比（最后700天）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line">    plt.plot(location_data.index[-<span class="number">30</span>:], location_data[-<span class="number">30</span>:], label=<span class="string">&#x27;原始数据&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.plot(restored_forecast.index[-<span class="number">30</span>:], restored_forecast[-<span class="number">30</span>:], label=<span class="string">&#x27;还原后的预测值&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, markersize=<span class="number">3</span>)</span><br><span class="line">    plt.fill_between(test_data.index[-<span class="number">30</span>:], conf_int.iloc[:, <span class="number">0</span>].iloc[-<span class="number">30</span>:] + seasonal_base.iloc[-<span class="number">30</span>:],</span><br><span class="line">                     conf_int.iloc[:, <span class="number">1</span>].iloc[-<span class="number">30</span>:] + seasonal_base.iloc[-<span class="number">30</span>:], color=<span class="string">&#x27;pink&#x27;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;<span class="subst">&#123;location&#125;</span> 的最高温度原始数据与还原后的预测值对比（最后30天）&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;最高温度&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印还原后的预测值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;还原后的预测值: <span class="subst">&#123;restored_forecast&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;预测的置信区间: <span class="subst">&#123;conf_int&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有地点的预测结果</span></span><br><span class="line"><span class="keyword">for</span> location, result <span class="keyword">in</span> forecasts.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;地点: <span class="subst">&#123;location&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;还原后的预测值: <span class="subst">&#123;result[<span class="string">&#x27;forecast&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;预测的置信区间: <span class="subst">&#123;result[<span class="string">&#x27;conf_int&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>全部地区图片太多不舍得流量钱和COS存储详细请看github</p>
</blockquote>
<p>​<br>​    </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据挖掘</tag>
        <tag>天气预测</tag>
      </tags>
  </entry>
  <entry>
    <title>C盘爆满！！！一不小心删掉了前端模块缓存！</title>
    <url>/posts/8d08ed55.html</url>
    <content><![CDATA[<p>昨夜C盘爆满，操作清浊清理缓存没有注意选项一股脑全删了，今天用npm的时候发现前端的那些包管理器通通失效！！</p>
<p>:sob:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Blog_Butterfly&gt;hexo n 清除缓存把npm给清理了</span><br><span class="line">node:internal/modules/cjs/loader:1222</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;E:\nodejs\node_global\node_modules\hexo-cli\bin\hexo&#x27;</span><br><span class="line">    at Module._resolveFilename (node:internal/modules/cjs/loader:1219:15)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:1045:27)</span><br><span class="line">    at TracingChannel.traceSync (node:diagnostics_channel:315:14)</span><br><span class="line">    at wrapModuleLoad (node:internal/modules/cjs/loader:215:24)</span><br><span class="line">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:5)</span><br><span class="line">    at node:internal/main/run_main_module:30:49 &#123;</span><br><span class="line">  code: &#x27;MODULE_NOT_FOUND&#x27;,</span><br><span class="line">  requireStack: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v22.4.0</span><br><span class="line"></span><br><span class="line">E:\Blog_Butterfly&gt;cnpm -v</span><br><span class="line">node:internal/modules/cjs/loader:1222</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;E:\nodejs\node_global\node_modules\cnpm\bin\cnpm.js&#x27;</span><br><span class="line">    at Module._resolveFilename (node:internal/modules/cjs/loader:1219:15)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:1045:27)</span><br><span class="line">    at TracingChannel.traceSync (node:diagnostics_channel:315:14)</span><br><span class="line">    at wrapModuleLoad (node:internal/modules/cjs/loader:215:24)</span><br><span class="line">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:5)</span><br><span class="line">    at node:internal/main/run_main_module:30:49 &#123;</span><br><span class="line">  code: &#x27;MODULE_NOT_FOUND&#x27;,</span><br><span class="line">  requireStack: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v22.4.0</span><br></pre></td></tr></table></figure>
<p>解决办法很简答，把目录下的文件全给删了</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240703010529504.webp" alt="image-20240703010529504"></p>
<p>再把项目的中的依赖也删了就能重新使用了，比如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo</span><br><span class="line">ERROR Cannot find module <span class="string">&#x27;hexo&#x27;</span> from <span class="string">&#x27;E:\Blog_Butterfly&#x27;</span></span><br><span class="line">ERROR Local hexo loading failed <span class="keyword">in</span> E:\Blog_Butterfly</span><br><span class="line">ERROR Try running: <span class="string">&#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>删除模块并重新安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 /e/Blog_Butterfly</span><br><span class="line">$ <span class="built_in">rm</span> -rf node_modules</span><br><span class="line">npm install --force</span><br><span class="line">npm warn using --force Recommended protections disabled.</span><br><span class="line">npm warn deprecated cuid@2.1.8: Cuid and other k-sortable and non-cryptographic ids (Ulid, ObjectId, KSUID, all UUIDs) are all insecure. Use @paralleldrive/cuid2 instead.</span><br><span class="line">npm warn deprecated highlight.js@9.18.5: Support has ended <span class="keyword">for</span> 9.x series. Upgrade to @latest</span><br><span class="line"></span><br><span class="line">added 270 packages <span class="keyword">in</span> 5s</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 /e/Blog_Butterfly</span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">changed 53 packages <span class="keyword">in</span> 3s</span><br><span class="line"></span><br><span class="line">14 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 /e/Blog_Butterfly</span><br><span class="line">$ hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO</span><br><span class="line">  ===================================================================</span><br><span class="line">      <span class="comment">#####  #    # ##### ##### ###### #####  ###### #      #   #</span></span><br><span class="line">      <span class="comment">#    # #    #   #     #   #      #    # #      #       # #</span></span><br><span class="line">      <span class="comment">#####  #    #   #     #   #####  #    # #####  #        #</span></span><br><span class="line">      <span class="comment">#    # #    #   #     #   #      #####  #      #        #</span></span><br><span class="line">      <span class="comment">#    # #    #   #     #   #      #   #  #      #        #</span></span><br><span class="line">      <span class="comment">#####   ####    #     #   ###### #    # #      ######   #</span></span><br><span class="line">                            4.11.0</span><br><span class="line">  ===================================================================</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>好多个模块一个一个安装…好繁琐的程序啊</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Blogtimeline</title>
    <url>/Blogtimeline/index.html</url>
    <content><![CDATA[<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">2024</button><button type="button" class="tab " data-href="-2">2023</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="timeline  orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>3月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>15日</p>
</div></div><div class='timeline-item-content'><p> 使用静态网页做了一个音乐播放页面(很垃圾很丑陋)</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>30日</p>
</div></div><div class='timeline-item-content'><p>使用github的next-chatgpt镜像了自己的一个chatgpt</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>31日</p>
</div></div><div class='timeline-item-content'><p>使用cloudflare的免费cdn加速</p>
</div></div></div>

<div class="timeline  orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>4月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3日</p>
</div></div><div class='timeline-item-content'><p>又开始折腾了….看见京东云卖的云主机配置2h2g3M等等等等只要50一年，于是乎我就心动了，没有试过服务器建站的我决定尝试一下</p>
<p>于是我把github上的项目托管到了Vercel上，用子域名重定向到了Vercel上的项目地址  <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">本来有点想再买一个域名，现在手头不太宽绰</span>&lt;/span&gt; </p>
<p>有宝塔这玩意，用起来很是方便，不用多少步骤就一键安装好了LMNP四件套    <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">（虽然中间出了很多小插曲，买服务器的时候选择了镜像宝塔界面，没想到京东云的宝塔镜像有问题：不能下载东西无论怎么点都点不了，软件商店也是一片空白，在那干瞪眼了好久，还以为是便宜没有好货被骗了，后面更新了一下宝塔才可以使用）</span>&lt;/span&gt; ，再用WordPress这个使用人数最多的一键式建站   <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">（写是不可能自己写的）</span>&lt;/span&gt; </p>
<p>  主域名现在在等着备案，看来这几天可以好好地选择一下主题了。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5日</p>
</div></div><div class='timeline-item-content'><p>利用 hexo-abbrlink 生成随机永久链接</p>
<p>利用 <a href="https://twikoo.js.org/">Twikoo</a> 作为评论系统</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11日</p>
</div></div><div class='timeline-item-content'><p>修改字体为<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai / 霞鹜文楷</a></p>
<p>修改代码字体为<a href="https://github.com/githubnext/monaspace">monaspace</a></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>18日</p>
</div></div><div class='timeline-item-content'><p>备案成功啦！</p>
<p>给博客加上了主页<a href="https://kiko2568.top">Kirari</a>,与<a href="https://life.kiko2568.top">生活博客</a>，并且全站使用https！</p>
<p>生活博客使用<a href="https://typecho.org/">Typecho</a>和<a href="https://github.com/liaocp666/Jasmine">Jasmine:typecho 主题</a>再加上自己的一些修改，完成了我之前的设想，一个主页两个博客（生活+学习向）</p>
</div></div></div></div><div class="tab-item-content" id="-2"><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>12月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-14</p>
</div></div><div class='timeline-item-content'><p>看见博客主题推荐,想起<mark class="hl-label orange">github</mark> 上部署着几个<mark class="hl-label green">html</mark> 文件好几年了,当初就是想搞一个博客网站才有的那几个<mark class="hl-label green">html</mark> 文件,又看见了<mark class="hl-label bluelabel">hexo</mark> 部署网站可以使用<mark class="hl-label purple">markdown</mark> 语法,感觉实属方便。便开始了折腾</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-15</p>
</div></div><div class='timeline-item-content'><p>部署好<mark class="hl-label blue">hexo</mark> ,并且上传到了<mark class="hl-label orange">github</mark> ，接下来就是极其折磨的选择主题</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 12-17</p>
</div></div><div class='timeline-item-content'><p>选了butterfly作为主题(因为有一堆外挂标签太好用了)，做好了大部分的使用文档的调整</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-18</p>
</div></div><div class='timeline-item-content'><p>看到一篇可以迁移其他主题的外挂标签，我馋<mark class="hl-label red">volantis</mark> 的一些标签外挂,可惜这段时间课设多有些忙,有时间一定迁移过来！！！</p>
</div></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
]]></content>
  </entry>
  <entry>
    <title>相册</title>
    <url>/Gallery/index.html</url>
    <content><![CDATA[<hr>
<h1 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h1><div class="gallery-group-main">
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755412321.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">桐棘千崎</div>
  <p>关于桐棘千崎那些事</p>
  <a href='/Gallery/tjqq'></a>
  </figcaption>
  </figure>
  
</div>

<hr>
<h1 id="风景"><a href="#风景" class="headerlink" title="风景"></a>风景</h1><hr>
]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>桐崎千棘</title>
    <url>/Gallery/tjqq.html</url>
    <content><![CDATA[<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown784dfc78fb028d882f2aba68f2d498fad896511f.jpg_400x300.jpg","alt":"784dfc78fb028d882f2aba68f2d498fad896511f.jpg_400x300"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown5569afebd3e716184e57c307100667c8.jpg","alt":"5569afebd3e716184e57c307100667c8"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown9610997eca8065381191964080dda144ad348268.jpg","alt":"9610997eca8065381191964080dda144ad348268"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownb59c72d26b54dedeff3d93e6e5e0acbb.jpg","alt":"b59c72d26b54dedeff3d93e6e5e0acbb"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownd8mto5x-49b1dcea-09b0-4ccf-a783-8166e8c0f4ef.png","alt":"d8mto5x-49b1dcea-09b0-4ccf-a783-8166e8c0f4ef"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownec7a9d7236daad223f89f1cd3cc27d29.png","alt":"ec7a9d7236daad223f89f1cd3cc27d29"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownillust_57883693_20200606_100354.png","alt":"illust_57883693_20200606_100354"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownR-C.png","alt":"R-C"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdowntqqh.png","alt":"tqqh"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown4d72382ae8a09b6185800cd8764fce4d.jpg","alt":"4d72382ae8a09b6185800cd8764fce4d"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown562ad9eb819bf542e1d18e30dc166e2a.jpg","alt":"562ad9eb819bf542e1d18e30dc166e2a"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755426550.png","alt":"Image_1702755426550"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755412321.png","alt":"Image_1702755412321"}]</div>
      <div class="gallery-items">
      </div>
    </div>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/article_all_index.css</url>
    <content><![CDATA[#article_all  .category-list,#article_all .tag-cloud-list,#article_all #archive{

	margin:10px;
	padding:10px;
	border: solid 1px black;
	border-radius: 20px;

}


#recent-posts > .recent-post-item,.card-widget,.article_all,#post,#page{

background: linear-gradient(-45deg,rgba(255,255,255,.7),rgba(255,255,255,.8),rgba(255,255,255,.8),rgba(255,255,255,.7)) !important;
}



//.card-widget:hover , .recent-post-item:hover{	border: 5px solid white;}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/fontFamily.css</url>
    <content><![CDATA[/* @font-face {
  font-family: 'LXGWWenKaiMonoScreen';
  font-display: swap;
  src: url('https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/files/lxgwwenkaiscreen-subset-77.woff2') format("woff2");
} 
已经用cdn替代



*/
@font-face {
  font-family: 'SFMono-Regular';
  font-display: swap;
  src: url('../font/SFMono-Regular.otf') format("truetype");
}

/* @font-face {
  font-family: 'MonaspaceRadonVarVF';
  font-display: swap;
  src: url('../font/MonaspaceRadonVarVF.ttf') format("truetype");
} */

@font-face {
  font-family: 'MonaspaceRadonVarVF';
  font-display: swap;
  src: url('../font/MonaspaceRadonVarVF.woff2') format("woff2");
}

#article-container>p{
	font-size : 18px;
}


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/widget_poem.css</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/bg.json</url>
    <content><![CDATA[{"color":[{"c1":" #ff6e7f","c2":" -webkit-linear-gradient(to left, #bfe9ff, #ff6e7f)","c3":" linear-gradient(to left, #bfe9ff, #ff6e7f)"},{"c1":" #77A1D3","c2":" -webkit-linear-gradient(to left, #E684AE, #79CBCA, #77A1D3)","c3":" linear-gradient(to left, #E684AE, #79CBCA, #77A1D3)"},{"c1":" #314755","c2":" -webkit-linear-gradient(to left, #26a0da, #314755)","c3":" linear-gradient(to left, #26a0da, #314755)"},{"c1":" #e65c00","c2":" -webkit-linear-gradient(to left, #F9D423, #e65c00)","c3":" linear-gradient(to left, #F9D423, #e65c00)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to left, #6dd5ed, #2193b0)","c3":" linear-gradient(to left, #6dd5ed, #2193b0)"},{"c1":" #cc2b5e","c2":" -webkit-linear-gradient(to left, #753a88, #cc2b5e)","c3":" linear-gradient(to left, #753a88, #cc2b5e)"},{"c1":" #ec008c","c2":" -webkit-linear-gradient(to left, #fc6767, #ec008c)","c3":" linear-gradient(to left, #fc6767, #ec008c)"},{"c1":" #00467F","c2":" -webkit-linear-gradient(to left, #A5CC82, #00467F)","c3":" linear-gradient(to left, #A5CC82, #00467F)"},{"c1":" #00467F","c2":" -webkit-linear-gradient(to right, #A5CC82, #00467F)","c3":" linear-gradient(to right, #A5CC82, #00467F)"},{"c1":" #076585","c2":" -webkit-linear-gradient(to left, #fff, #076585)","c3":" linear-gradient(to left, #fff, #076585)"},{"c1":" #076585","c2":" -webkit-linear-gradient(to right, #fff, #076585)","c3":" linear-gradient(to right, #fff, #076585)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to right, #536976, #BBD2C5)","c3":" linear-gradient(to right, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to bottom, #536976, #BBD2C5)","c3":" linear-gradient(to bottom, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to right, #536976, #BBD2C5)","c3":" linear-gradient(to right, #536976, #BBD2C5)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to right, #fbc7d4, #9796f0)","c3":" linear-gradient(to right, #fbc7d4, #9796f0)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to bottom, #fbc7d4, #9796f0)","c3":" linear-gradient(to bottom, #fbc7d4, #9796f0)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to left, #fbc7d4, #9796f0)","c3":" linear-gradient(to left, #fbc7d4, #9796f0)"},{"c1":" #B79891","c2":" -webkit-linear-gradient(to top, #94716B, #B79891)","c3":" linear-gradient(to top, #94716B, #B79891)"},{"c1":" #B79891","c2":" -webkit-linear-gradient(to right, #94716B, #B79891)","c3":" linear-gradient(to right, #94716B, #B79891)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to bottom, #292E49, #536976, #BBD2C5)","c3":" linear-gradient(to bottom, #292E49, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to left, #292E49, #536976, #BBD2C5)","c3":" linear-gradient(to left, #292E49, #536976, #BBD2C5)"},{"c1":" #acb6e5","c2":" -webkit-linear-gradient(to top, #86fde8, #acb6e5)","c3":" linear-gradient(to top, #86fde8, #acb6e5)"},{"c1":" #acb6e5","c2":" -webkit-linear-gradient(to right, #86fde8, #acb6e5)","c3":" linear-gradient(to right, #86fde8, #acb6e5)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to left, #799F0C, #FFE000)","c3":" linear-gradient(to left, #799F0C, #FFE000)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to top, #799F0C, #FFE000)","c3":" linear-gradient(to top, #799F0C, #FFE000)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #E4E5E6, #00416A)","c3":" linear-gradient(to right, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to bottom, #E4E5E6, #00416A)","c3":" linear-gradient(to bottom, #E4E5E6, #00416A)"},{"c1":" #ffe259","c2":" -webkit-linear-gradient(to bottom, #ffa751, #ffe259)","c3":" linear-gradient(to bottom, #ffa751, #ffe259)"},{"c1":" #ffe259","c2":" -webkit-linear-gradient(to left, #ffa751, #ffe259)","c3":" linear-gradient(to left, #ffa751, #ffe259)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to right, #ACBB78, #799F0C)","c3":" linear-gradient(to right, #ACBB78, #799F0C)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to bottom, #ACBB78, #799F0C)","c3":" linear-gradient(to bottom, #ACBB78, #799F0C)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to left, #ACBB78, #799F0C)","c3":" linear-gradient(to left, #ACBB78, #799F0C)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to left, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to left, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to top, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to top, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to right, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to right, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #0052D4","c2":" -webkit-linear-gradient(to right, #6FB1FC, #4364F7, #0052D4)","c3":" linear-gradient(to right, #6FB1FC, #4364F7, #0052D4)"},{"c1":" #0052D4","c2":" -webkit-linear-gradient(to bottom, #6FB1FC, #4364F7, #0052D4)","c3":" linear-gradient(to bottom, #6FB1FC, #4364F7, #0052D4)"},{"c1":" #334d50","c2":" -webkit-linear-gradient(to right, #cbcaa5, #334d50)","c3":" linear-gradient(to right, #cbcaa5, #334d50)"},{"c1":" #334d50","c2":" -webkit-linear-gradient(to top, #cbcaa5, #334d50)","c3":" linear-gradient(to top, #cbcaa5, #334d50)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #FFE000, #799F0C, #00416A)","c3":" linear-gradient(to right, #FFE000, #799F0C, #00416A)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to right, #ACBB78, #F7F8F8)","c3":" linear-gradient(to right, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to bottom, #ACBB78, #F7F8F8)","c3":" linear-gradient(to bottom, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to left, #ACBB78, #F7F8F8)","c3":" linear-gradient(to left, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to top, #ACBB78, #F7F8F8)","c3":" linear-gradient(to top, #ACBB78, #F7F8F8)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to top, #799F0C, #FFE000)","c3":" linear-gradient(to top, #799F0C, #FFE000)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to right, #799F0C, #FFE000)","c3":" linear-gradient(to right, #799F0C, #FFE000)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to top, #E4E5E6, #00416A)","c3":" linear-gradient(to top, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #E4E5E6, #00416A)","c3":" linear-gradient(to right, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to bottom, #E4E5E6, #00416A)","c3":" linear-gradient(to bottom, #E4E5E6, #00416A)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to bottom, #2c3e50, #bdc3c7)","c3":" linear-gradient(to bottom, #2c3e50, #bdc3c7)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to left, #2c3e50, #bdc3c7)","c3":" linear-gradient(to left, #2c3e50, #bdc3c7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to left, #ffdde1, #ee9ca7)","c3":" linear-gradient(to left, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to top, #ffdde1, #ee9ca7)","c3":" linear-gradient(to top, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to right, #ffdde1, #ee9ca7)","c3":" linear-gradient(to right, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to bottom, #ffdde1, #ee9ca7)","c3":" linear-gradient(to bottom, #ffdde1, #ee9ca7)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to bottom, #6dd5ed, #2193b0)","c3":" linear-gradient(to bottom, #6dd5ed, #2193b0)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to left, #6dd5ed, #2193b0)","c3":" linear-gradient(to left, #6dd5ed, #2193b0)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to left, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to left, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to top, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to top, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #0F2027","c2":" -webkit-linear-gradient(to right, #2C5364, #203A43, #0F2027)","c3":" linear-gradient(to right, #2C5364, #203A43, #0F2027)"},{"c1":" #b92b27","c2":" -webkit-linear-gradient(to right, #1565C0, #b92b27)","c3":" linear-gradient(to right, #1565C0, #b92b27)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to right, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to right, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to left, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to left, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to top, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to top, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #FF0099","c2":" -webkit-linear-gradient(to left, #493240, #FF0099)","c3":" linear-gradient(to left, #493240, #FF0099)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to left, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to left, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to bottom, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to bottom, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to left, #99f2c8, #1f4037)","c3":" linear-gradient(to left, #99f2c8, #1f4037)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to top, #99f2c8, #1f4037)","c3":" linear-gradient(to top, #99f2c8, #1f4037)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to right, #99f2c8, #1f4037)","c3":" linear-gradient(to right, #99f2c8, #1f4037)"},{"c1":" #7F7FD5","c2":" -webkit-linear-gradient(to bottom, #91EAE4, #86A8E7, #7F7FD5)","c3":" linear-gradient(to bottom, #91EAE4, #86A8E7, #7F7FD5)"},{"c1":" #7F7FD5","c2":" -webkit-linear-gradient(to left, #91EAE4, #86A8E7, #7F7FD5)","c3":" linear-gradient(to left, #91EAE4, #86A8E7, #7F7FD5)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to right, #f4791f, #659999)","c3":" linear-gradient(to right, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to bottom, #f4791f, #659999)","c3":" linear-gradient(to bottom, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to left, #f4791f, #659999)","c3":" linear-gradient(to left, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to right, #f4791f, #659999)","c3":" linear-gradient(to right, #f4791f, #659999)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to right, #6be585, #dd3e54)","c3":" linear-gradient(to right, #6be585, #dd3e54)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to bottom, #6be585, #dd3e54)","c3":" linear-gradient(to bottom, #6be585, #dd3e54)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to left, #6be585, #dd3e54)","c3":" linear-gradient(to left, #6be585, #dd3e54)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to right, #ffd452, #544a7d)","c3":" linear-gradient(to right, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to bottom, #ffd452, #544a7d)","c3":" linear-gradient(to bottom, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to left, #ffd452, #544a7d)","c3":" linear-gradient(to left, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to top, #ffd452, #544a7d)","c3":" linear-gradient(to top, #ffd452, #544a7d)"},{"c1":" #009FFF","c2":" -webkit-linear-gradient(to left, #ec2F4B, #009FFF)","c3":" linear-gradient(to left, #ec2F4B, #009FFF)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to left, #eaafc8, #654ea3)","c3":" linear-gradient(to left, #eaafc8, #654ea3)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to top, #eaafc8, #654ea3)","c3":" linear-gradient(to top, #eaafc8, #654ea3)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to right, #eaafc8, #654ea3)","c3":" linear-gradient(to right, #eaafc8, #654ea3)"},{"c1":" #a8ff78","c2":" -webkit-linear-gradient(to right, #78ffd6, #a8ff78)","c3":" linear-gradient(to right, #78ffd6, #a8ff78)"},{"c1":" #a8ff78","c2":" -webkit-linear-gradient(to bottom, #78ffd6, #a8ff78)","c3":" linear-gradient(to bottom, #78ffd6, #a8ff78)"},{"c1":" #FDC830","c2":" -webkit-linear-gradient(to right, #F37335, #FDC830)","c3":" linear-gradient(to right, #F37335, #FDC830)"},{"c1":" #FDC830","c2":" -webkit-linear-gradient(to left, #F37335, #FDC830)","c3":" linear-gradient(to left, #F37335, #FDC830)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to bottom, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to bottom, #FFFFFF, #FFEFBA)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to left, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to left, #FFFFFF, #FFEFBA)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to top, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to top, #FFFFFF, #FFEFBA)"},{"c1":" #005AA7","c2":" -webkit-linear-gradient(to right, #FFFDE4, #005AA7)","c3":" linear-gradient(to right, #FFFDE4, #005AA7)"},{"c1":" #005AA7","c2":" -webkit-linear-gradient(to bottom, #FFFDE4, #005AA7)","c3":" linear-gradient(to bottom, #FFFDE4, #005AA7)"},{"c1":" #636363","c2":" -webkit-linear-gradient(to bottom, #a2ab58, #636363)","c3":" linear-gradient(to bottom, #a2ab58, #636363)"},{"c1":" #636363","c2":" -webkit-linear-gradient(to left, #a2ab58, #636363)","c3":" linear-gradient(to left, #a2ab58, #636363)"},{"c1":" #ad5389","c2":" -webkit-linear-gradient(to right, #3c1053, #ad5389)","c3":" linear-gradient(to right, #3c1053, #ad5389)"},{"c1":" #a8c0ff","c2":" -webkit-linear-gradient(to right, #3f2b96, #a8c0ff)","c3":" linear-gradient(to right, #3f2b96, #a8c0ff)"},{"c1":" #4e54c8","c2":" -webkit-linear-gradient(to right, #8f94fb, #4e54c8)","c3":" linear-gradient(to right, #8f94fb, #4e54c8)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to right, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to right, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to bottom, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to bottom, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to left, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to left, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to top, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to top, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to right, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to right, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to left, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to left, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to bottom, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to bottom, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to bottom, #DECBA4, #3E5151)","c3":" linear-gradient(to bottom, #DECBA4, #3E5151)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to left, #DECBA4, #3E5151)","c3":" linear-gradient(to left, #DECBA4, #3E5151)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to top, #DECBA4, #3E5151)","c3":" linear-gradient(to top, #DECBA4, #3E5151)"},{"c1":" #108dc7","c2":" -webkit-linear-gradient(to right, #ef8e38, #108dc7)","c3":" linear-gradient(to right, #ef8e38, #108dc7)"},{"c1":" #c94b4b","c2":" -webkit-linear-gradient(to right, #4b134f, #c94b4b)","c3":" linear-gradient(to right, #4b134f, #c94b4b)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to right, #b20a2c, #fffbd5)","c3":" linear-gradient(to right, #b20a2c, #fffbd5)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to bottom, #b20a2c, #fffbd5)","c3":" linear-gradient(to bottom, #b20a2c, #fffbd5)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to left, #b20a2c, #fffbd5)","c3":" linear-gradient(to left, #b20a2c, #fffbd5)"},{"c1":" #D3CCE3","c2":" -webkit-linear-gradient(to left, #E9E4F0, #D3CCE3)","c3":" linear-gradient(to left, #E9E4F0, #D3CCE3)"},{"c1":" #3C3B3F","c2":" -webkit-linear-gradient(to bottom, #605C3C, #3C3B3F)","c3":" linear-gradient(to bottom, #605C3C, #3C3B3F)"},{"c1":" #3C3B3F","c2":" -webkit-linear-gradient(to right, #605C3C, #3C3B3F)","c3":" linear-gradient(to right, #605C3C, #3C3B3F)"},{"c1":" #CAC531","c2":" -webkit-linear-gradient(to right, #F3F9A7, #CAC531)","c3":" linear-gradient(to right, #F3F9A7, #CAC531)"},{"c1":" #CAC531","c2":" -webkit-linear-gradient(to left, #F3F9A7, #CAC531)","c3":" linear-gradient(to left, #F3F9A7, #CAC531)"},{"c1":" #800080","c2":" -webkit-linear-gradient(to left, #ffc0cb, #800080)","c3":" linear-gradient(to left, #ffc0cb, #800080)"},{"c1":" #800080","c2":" -webkit-linear-gradient(to right, #ffc0cb, #800080)","c3":" linear-gradient(to right, #ffc0cb, #800080)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to right, #f05053, #e1eec3)","c3":" linear-gradient(to right, #f05053, #e1eec3)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to bottom, #f05053, #e1eec3)","c3":" linear-gradient(to bottom, #f05053, #e1eec3)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to left, #f05053, #e1eec3)","c3":" linear-gradient(to left, #f05053, #e1eec3)"},{"c1":" #22c1c3","c2":" -webkit-linear-gradient(to left, #fdbb2d, #22c1c3)","c3":" linear-gradient(to left, #fdbb2d, #22c1c3)"},{"c1":" #22c1c3","c2":" -webkit-linear-gradient(to right, #fdbb2d, #22c1c3)","c3":" linear-gradient(to right, #fdbb2d, #22c1c3)"},{"c1":" #C9D6FF","c2":" -webkit-linear-gradient(to left, #E2E2E2, #C9D6FF)","c3":" linear-gradient(to left, #E2E2E2, #C9D6FF)"},{"c1":" #d9a7c7","c2":" -webkit-linear-gradient(to left, #fffcdc, #d9a7c7)","c3":" linear-gradient(to left, #fffcdc, #d9a7c7)"},{"c1":" #d9a7c7","c2":" -webkit-linear-gradient(to right, #fffcdc, #d9a7c7)","c3":" linear-gradient(to right, #fffcdc, #d9a7c7)"},{"c1":" #1c92d2","c2":" -webkit-linear-gradient(to right, #f2fcfe, #1c92d2)","c3":" linear-gradient(to right, #f2fcfe, #1c92d2)"},{"c1":" #3A1C71","c2":" -webkit-linear-gradient(to left, #FFAF7B, #D76D77, #3A1C71)","c3":" linear-gradient(to left, #FFAF7B, #D76D77, #3A1C71)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to left, #FFFFFF, #EF3B36)","c3":" linear-gradient(to left, #FFFFFF, #EF3B36)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to right, #FFFFFF, #EF3B36)","c3":" linear-gradient(to right, #FFFFFF, #EF3B36)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to bottom, #FFFFFF, #EF3B36)","c3":" linear-gradient(to bottom, #FFFFFF, #EF3B36)"},{"c1":" #30E8BF","c2":" -webkit-linear-gradient(to top, #FF8235, #30E8BF)","c3":" linear-gradient(to top, #FF8235, #30E8BF)"},{"c1":" #30E8BF","c2":" -webkit-linear-gradient(to right, #FF8235, #30E8BF)","c3":" linear-gradient(to right, #FF8235, #30E8BF)"},{"c1":" #D66D75","c2":" -webkit-linear-gradient(to right, #E29587, #D66D75)","c3":" linear-gradient(to right, #E29587, #D66D75)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to right, #cbb4d4, #20002c)","c3":" linear-gradient(to right, #cbb4d4, #20002c)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to bottom, #cbb4d4, #20002c)","c3":" linear-gradient(to bottom, #cbb4d4, #20002c)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to top, #cbb4d4, #20002c)","c3":" linear-gradient(to top, #cbb4d4, #20002c)"},{"c1":" #34e89e","c2":" -webkit-linear-gradient(to top, #0f3443, #34e89e)","c3":" linear-gradient(to top, #0f3443, #34e89e)"},{"c1":" #34e89e","c2":" -webkit-linear-gradient(to right, #0f3443, #34e89e)","c3":" linear-gradient(to right, #0f3443, #34e89e)"},{"c1":" #6190E8","c2":" -webkit-linear-gradient(to right, #A7BFE8, #6190E8)","c3":" linear-gradient(to right, #A7BFE8, #6190E8)"},{"c1":" #6190E8","c2":" -webkit-linear-gradient(to left, #A7BFE8, #6190E8)","c3":" linear-gradient(to left, #A7BFE8, #6190E8)"},{"c1":" #44A08D","c2":" -webkit-linear-gradient(to left, #093637, #44A08D)","c3":" linear-gradient(to left, #093637, #44A08D)"},{"c1":" #4568DC","c2":" -webkit-linear-gradient(to left, #B06AB3, #4568DC)","c3":" linear-gradient(to left, #B06AB3, #4568DC)"},{"c1":" #4568DC","c2":" -webkit-linear-gradient(to right, #B06AB3, #4568DC)","c3":" linear-gradient(to right, #B06AB3, #4568DC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to right, #191654, #43C6AC)","c3":" linear-gradient(to right, #191654, #43C6AC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to right, #F8FFAE, #43C6AC)","c3":" linear-gradient(to right, #F8FFAE, #43C6AC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to bottom, #F8FFAE, #43C6AC)","c3":" linear-gradient(to bottom, #F8FFAE, #43C6AC)"},{"c1":" #FFAFBD","c2":" -webkit-linear-gradient(to bottom, #ffc3a0, #FFAFBD)","c3":" linear-gradient(to bottom, #ffc3a0, #FFAFBD)"},{"c1":" #F0F2F0","c2":" -webkit-linear-gradient(to top, #000C40, #F0F2F0)","c3":" linear-gradient(to top, #000C40, #F0F2F0)"},{"c1":" #E8CBC0","c2":" -webkit-linear-gradient(to top, #636FA4, #E8CBC0)","c3":" linear-gradient(to top, #636FA4, #E8CBC0)"},{"c1":" #E8CBC0","c2":" -webkit-linear-gradient(to left, #636FA4, #E8CBC0)","c3":" linear-gradient(to left, #636FA4, #E8CBC0)"},{"c1":" #DBE6F6","c2":" -webkit-linear-gradient(to left, #C5796D, #DBE6F6)","c3":" linear-gradient(to left, #C5796D, #DBE6F6)"},{"c1":" #DBE6F6","c2":" -webkit-linear-gradient(to top, #C5796D, #DBE6F6)","c3":" linear-gradient(to top, #C5796D, #DBE6F6)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to top, #3B4371, #F3904F)","c3":" linear-gradient(to top, #3B4371, #F3904F)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to right, #3B4371, #F3904F)","c3":" linear-gradient(to right, #3B4371, #F3904F)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to bottom, #3B4371, #F3904F)","c3":" linear-gradient(to bottom, #3B4371, #F3904F)"},{"c1":" #A770EF","c2":" -webkit-linear-gradient(to bottom, #FDB99B, #CF8BF3, #A770EF)","c3":" linear-gradient(to bottom, #FDB99B, #CF8BF3, #A770EF)"},{"c1":" #41295a","c2":" -webkit-linear-gradient(to bottom, #2F0743, #41295a)","c3":" linear-gradient(to bottom, #2F0743, #41295a)"},{"c1":" #f4c4f3","c2":" -webkit-linear-gradient(to bottom, #fc67fa, #f4c4f3)","c3":" linear-gradient(to bottom, #fc67fa, #f4c4f3)"},{"c1":" #f4c4f3","c2":" -webkit-linear-gradient(to left, #fc67fa, #f4c4f3)","c3":" linear-gradient(to left, #fc67fa, #f4c4f3)"},{"c1":" #00c3ff","c2":" -webkit-linear-gradient(to bottom, #ffff1c, #00c3ff)","c3":" linear-gradient(to bottom, #ffff1c, #00c3ff)"},{"c1":" #ff7e5f","c2":" -webkit-linear-gradient(to bottom, #feb47b, #ff7e5f)","c3":" linear-gradient(to bottom, #feb47b, #ff7e5f)"},{"c1":" #de6161","c2":" -webkit-linear-gradient(to bottom, #2657eb, #de6161)","c3":" linear-gradient(to bottom, #2657eb, #de6161)"},{"c1":" #ef32d9","c2":" -webkit-linear-gradient(to left, #89fffd, #ef32d9)","c3":" linear-gradient(to left, #89fffd, #ef32d9)"},{"c1":" #3a6186","c2":" -webkit-linear-gradient(to left, #89253e, #3a6186)","c3":" linear-gradient(to left, #89253e, #3a6186)"},{"c1":" #3a6186","c2":" -webkit-linear-gradient(to right, #89253e, #3a6186)","c3":" linear-gradient(to right, #89253e, #3a6186)"},{"c1":" #4ECDC4","c2":" -webkit-linear-gradient(to right, #556270, #4ECDC4)","c3":" linear-gradient(to right, #556270, #4ECDC4)"},{"c1":" #A1FFCE","c2":" -webkit-linear-gradient(to right, #FAFFD1, #A1FFCE)","c3":" linear-gradient(to right, #FAFFD1, #A1FFCE)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to bottom, #2c3e50, #bdc3c7)","c3":" linear-gradient(to bottom, #2c3e50, #bdc3c7)"},{"c1":" #ffd89b","c2":" -webkit-linear-gradient(to bottom, #19547b, #ffd89b)","c3":" linear-gradient(to bottom, #19547b, #ffd89b)"},{"c1":" #ffd89b","c2":" -webkit-linear-gradient(to left, #19547b, #ffd89b)","c3":" linear-gradient(to left, #19547b, #ffd89b)"},{"c1":" #42275a","c2":" -webkit-linear-gradient(to left, #734b6d, #42275a)","c3":" linear-gradient(to left, #734b6d, #42275a)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to left, #FD746C, #2C3E50)","c3":" linear-gradient(to left, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to right, #FD746C, #2C3E50)","c3":" linear-gradient(to right, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to bottom, #FD746C, #2C3E50)","c3":" linear-gradient(to bottom, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to top, #FD746C, #2C3E50)","c3":" linear-gradient(to top, #FD746C, #2C3E50)"},{"c1":" #e96443","c2":" -webkit-linear-gradient(to top, #904e95, #e96443)","c3":" linear-gradient(to top, #904e95, #e96443)"},{"c1":" #e96443","c2":" -webkit-linear-gradient(to bottom, #904e95, #e96443)","c3":" linear-gradient(to bottom, #904e95, #e96443)"},{"c1":" #0B486B","c2":" -webkit-linear-gradient(to bottom, #F56217, #0B486B)","c3":" linear-gradient(to bottom, #F56217, #0B486B)"},{"c1":" #EECDA3","c2":" -webkit-linear-gradient(to top, #EF629F, #EECDA3)","c3":" linear-gradient(to top, #EF629F, #EECDA3)"},{"c1":" #EECDA3","c2":" -webkit-linear-gradient(to right, #EF629F, #EECDA3)","c3":" linear-gradient(to right, #EF629F, #EECDA3)"},{"c1":" #1D4350","c2":" -webkit-linear-gradient(to right, #A43931, #1D4350)","c3":" linear-gradient(to right, #A43931, #1D4350)"},{"c1":" #BA5370","c2":" -webkit-linear-gradient(to right, #F4E2D8, #BA5370)","c3":" linear-gradient(to right, #F4E2D8, #BA5370)"},{"c1":" #BA5370","c2":" -webkit-linear-gradient(to left, #F4E2D8, #BA5370)","c3":" linear-gradient(to left, #F4E2D8, #BA5370)"},{"c1":" #5A3F37","c2":" -webkit-linear-gradient(to left, #2C7744, #5A3F37)","c3":" linear-gradient(to left, #2C7744, #5A3F37)"},{"c1":" #5A3F37","c2":" -webkit-linear-gradient(to top, #2C7744, #5A3F37)","c3":" linear-gradient(to top, #2C7744, #5A3F37)"},{"c1":" #2F7336","c2":" -webkit-linear-gradient(to top, #AA3A38, #2F7336)","c3":" linear-gradient(to top, #AA3A38, #2F7336)"},{"c1":" #114357","c2":" -webkit-linear-gradient(to top, #F29492, #114357)","c3":" linear-gradient(to top, #F29492, #114357)"},{"c1":" #114357","c2":" -webkit-linear-gradient(to left, #F29492, #114357)","c3":" linear-gradient(to left, #F29492, #114357)"},{"c1":" #eacda3","c2":" -webkit-linear-gradient(to left, #d6ae7b, #eacda3)","c3":" linear-gradient(to left, #d6ae7b, #eacda3)"},{"c1":" #403A3E","c2":" -webkit-linear-gradient(to left, #BE5869, #403A3E)","c3":" linear-gradient(to left, #BE5869, #403A3E)"},{"c1":" #CCCCB2","c2":" -webkit-linear-gradient(to left, #757519, #CCCCB2)","c3":" linear-gradient(to left, #757519, #CCCCB2)"},{"c1":" #304352","c2":" -webkit-linear-gradient(to left, #d7d2cc, #304352)","c3":" linear-gradient(to left, #d7d2cc, #304352)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to left, #ffdde1, #ee9ca7)","c3":" linear-gradient(to left, #ffdde1, #ee9ca7)"},{"c1":" #BA8B02","c2":" -webkit-linear-gradient(to top, #181818, #BA8B02)","c3":" linear-gradient(to top, #181818, #BA8B02)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to top, #135058, #F1F2B5)","c3":" linear-gradient(to top, #135058, #F1F2B5)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to right, #135058, #F1F2B5)","c3":" linear-gradient(to right, #135058, #F1F2B5)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to bottom, #135058, #F1F2B5)","c3":" linear-gradient(to bottom, #135058, #F1F2B5)"},{"c1":" #D1913C","c2":" -webkit-linear-gradient(to bottom, #FFD194, #D1913C)","c3":" linear-gradient(to bottom, #FFD194, #D1913C)"},{"c1":" #8e9eab","c2":" -webkit-linear-gradient(to bottom, #eef2f3, #8e9eab)","c3":" linear-gradient(to bottom, #eef2f3, #8e9eab)"},{"c1":" #00bf8f","c2":" -webkit-linear-gradient(to bottom, #001510, #00bf8f)","c3":" linear-gradient(to bottom, #001510, #00bf8f)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to bottom, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to bottom, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to left, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to left, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to top, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to top, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FFA17F","c2":" -webkit-linear-gradient(to top, #00223E, #FFA17F)","c3":" linear-gradient(to top, #00223E, #FFA17F)"},{"c1":" #1e130c","c2":" -webkit-linear-gradient(to top, #9a8478, #1e130c)","c3":" linear-gradient(to top, #9a8478, #1e130c)"},{"c1":" #abbaab","c2":" -webkit-linear-gradient(to top, #ffffff, #abbaab)","c3":" linear-gradient(to top, #ffffff, #abbaab)"},{"c1":" #abbaab","c2":" -webkit-linear-gradient(to bottom, #ffffff, #abbaab)","c3":" linear-gradient(to bottom, #ffffff, #abbaab)"},{"c1":" #556270","c2":" -webkit-linear-gradient(to bottom, #FF6B6B, #556270)","c3":" linear-gradient(to bottom, #FF6B6B, #556270)"},{"c1":" #FBD3E9","c2":" -webkit-linear-gradient(to bottom, #BB377D, #FBD3E9)","c3":" linear-gradient(to bottom, #BB377D, #FBD3E9)"},{"c1":" #FBD3E9","c2":" -webkit-linear-gradient(to top, #BB377D, #FBD3E9)","c3":" linear-gradient(to top, #BB377D, #FBD3E9)"},{"c1":" #F0C27B","c2":" -webkit-linear-gradient(to right, #4B1248, #F0C27B)","c3":" linear-gradient(to right, #4B1248, #F0C27B)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to right, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to right, #FFAFBD, #C9FFBF)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to bottom, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to bottom, #FFAFBD, #C9FFBF)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to left, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to left, #FFAFBD, #C9FFBF)"},{"c1":" #D3959B","c2":" -webkit-linear-gradient(to left, #BFE6BA, #D3959B)","c3":" linear-gradient(to left, #BFE6BA, #D3959B)"},{"c1":" #E6DADA","c2":" -webkit-linear-gradient(to left, #274046, #E6DADA)","c3":" linear-gradient(to left, #274046, #E6DADA)"},{"c1":" #E6DADA","c2":" -webkit-linear-gradient(to top, #274046, #E6DADA)","c3":" linear-gradient(to top, #274046, #E6DADA)"},{"c1":" #ddd6f3","c2":" -webkit-linear-gradient(to top, #faaca8, #ddd6f3)","c3":" linear-gradient(to top, #faaca8, #ddd6f3)"},{"c1":" #DE6262","c2":" -webkit-linear-gradient(to top, #FFB88C, #DE6262)","c3":" linear-gradient(to top, #FFB88C, #DE6262)"},{"c1":" #FFEEEE","c2":" -webkit-linear-gradient(to top, #DDEFBB, #FFEEEE)","c3":" linear-gradient(to top, #DDEFBB, #FFEEEE)"},{"c1":" #d53369","c2":" -webkit-linear-gradient(to top, #cbad6d, #d53369)","c3":" linear-gradient(to top, #cbad6d, #d53369)"},{"c1":" #FC354C","c2":" -webkit-linear-gradient(to top, #0ABFBC, #FC354C)","c3":" linear-gradient(to top, #0ABFBC, #FC354C)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to bottom, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to bottom, #D6A4A4, #DAE2F8)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to left, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to left, #D6A4A4, #DAE2F8)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to top, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to top, #D6A4A4, #DAE2F8)"},{"c1":" #283048","c2":" -webkit-linear-gradient(to top, #859398, #283048)","c3":" linear-gradient(to top, #859398, #283048)"},{"c1":" #3D7EAA","c2":" -webkit-linear-gradient(to top, #FFE47A, #3D7EAA)","c3":" linear-gradient(to top, #FFE47A, #3D7EAA)"},{"c1":" #232526","c2":" -webkit-linear-gradient(to top, #414345, #232526)","c3":" linear-gradient(to top, #414345, #232526)"},{"c1":" #757F9A","c2":" -webkit-linear-gradient(to top, #D7DDE8, #757F9A)","c3":" linear-gradient(to top, #D7DDE8, #757F9A)"},{"c1":" #2BC0E4","c2":" -webkit-linear-gradient(to left, #EAECC6, #2BC0E4)","c3":" linear-gradient(to left, #EAECC6, #2BC0E4)"},{"c1":" #403B4A","c2":" -webkit-linear-gradient(to left, #E7E9BB, #403B4A)","c3":" linear-gradient(to left, #E7E9BB, #403B4A)"},{"c1":" #1D2B64","c2":" -webkit-linear-gradient(to left, #F8CDDA, #1D2B64)","c3":" linear-gradient(to left, #F8CDDA, #1D2B64)"}]}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/top_img.json</url>
    <content><![CDATA[{"links":["https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048909.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048604.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048474.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122051488.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048459.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048547.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048345.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048475.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048358.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048873.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048250.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038617.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038771.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039509.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039086.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039122.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039227.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039738.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039775.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039615.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039686.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040447.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040980.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040131.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040761.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040337.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040779.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041435.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041215.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042013.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042900.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042832.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042481.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042825.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043230.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043875.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043624.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043308.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043038.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043167.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043809.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043506.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043394.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043507.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043291.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043398.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043244.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043684.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043053.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043954.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043324.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043452.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043303.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043567.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043203.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043716.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045072.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045499.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045113.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045001.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045472.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045368.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045371.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045201.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045812.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045882.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045117.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045462.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045638.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045575.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045280.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045487.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046545.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046636.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046704.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046656.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046568.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046403.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046027.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046056.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046634.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046112.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046748.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046306.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046531.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046845.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046490.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046679.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046322.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046313.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046019.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046691.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046404.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046164.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046061.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046346.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046097.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046498.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046426.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046580.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046439.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046713.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047866.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047918.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047532.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047266.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047323.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047263.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047190.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047544.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047486.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048448.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048278.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048693.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048653.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048316.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048925.webp"]}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/footer_kirari.css</url>
    <content><![CDATA[#footer-wrap{
    
    padding: 1rem;
    //color: #363636;
   // margin-top: 1rem;
    //background: #f7f7f9;
    display: flex;
    overflow: hidden;
    z-index: 10;
    transition: .3s;
    border-top: 2px solid #e3e8f7;
    //margin-bottom: -10px;
}




#footer_right {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
}

#footer_left {
    display: flex;
    flex-wrap: wrap;
    min-height: 32px;
    align-items: center;
}

 #footer-bar-links {
    margin: 0 4px;
    
   // font-size: .88rem;
   //s font-weight: 700;
    white-space: nowrap;
    padding: 8px;
    border-radius: 12px;
    line-height: 1;

    display: flex;
    justify-content: space-between;
    max-width: 1400px;
    width: 100%;
    margin: 0 auto;
    flex-wrap: wrap;
    align-items: center;
    line-height: 1;
}

/*  */
#nav .kirari-nav-box {
transition: .5s   ;

   max-width: 1170px;
    width: 100%;
    display: flex;
    justify-content: center; /* 新增这一行 */
    align-items: center;
    margin: 0 auto; /* 可选：将此容器水平居中 */
}




/*
div#rightside-config-show {
    top: -150px;
    position: absolute;
}*/]]></content>
  </entry>
  <entry>
    <title>链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[<div class="flink"><div class="flink-name">友人帐</div><div class="flink-desc">今夕复何夕，共此灯烛光！</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://wu1015.github.io" title="wu1015" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://shp.qpic.cn/collector/1015650207/25a0d289-cf69-481c-99c1-74a855390f3b/0" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="wu1015" />
              </div>
              <div class="flink-item-name">wu1015</div> 
              <div class="flink-item-desc" title="満 身 創 痍">満 身 創 痍</div>
            </a>
          </div></div></div>
<hr>
<div class="flink"><div class="flink-name">好玩的网站</div><div class="flink-desc">好玩!</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://pranx.com/" title="摸鱼_模拟电脑不一样的界面" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="摸鱼_模拟电脑不一样的界面" />
              </div>
              <div class="flink-item-name">摸鱼_模拟电脑不一样的界面</div> 
              <div class="flink-item-desc" title="让别人看不明白你在干什么">让别人看不明白你在干什么</div>
            </a>
          </div></div></div>
<hr>
<div class="flink"><div class="flink-name">工具箱</div><div class="flink-desc">资源中心</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://acwing.com" title="acwing" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="acwing" />
              </div>
              <div class="flink-item-name">acwing</div> 
              <div class="flink-item-desc" title="多人在线oj平台">多人在线oj平台</div>
            </a>
          </div></div></div>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/m_top_img.json</url>
    <content><![CDATA[{"links":["https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048909.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048008.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048689.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048604.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048474.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122051488.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048459.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048547.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048345.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048475.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048358.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048873.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048777.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037589.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048250.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037903.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048341.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037114.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038093.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038853.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038441.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038310.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038374.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038411.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038136.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038654.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038080.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038893.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038993.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038867.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038178.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038822.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038383.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038746.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038628.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038099.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038360.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038888.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038468.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038617.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038840.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038284.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038758.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038975.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038771.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038895.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039198.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039674.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039857.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039874.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039353.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039939.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039879.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039467.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039402.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039621.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039546.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039048.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039503.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039315.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039419.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039509.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039086.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039173.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039764.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039549.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039415.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039939.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039258.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039629.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039723.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039273.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039811.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039673.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039768.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039921.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039122.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039227.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039738.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039775.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039615.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039686.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040621.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040447.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040120.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040406.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040341.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040041.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040980.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040733.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040885.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040978.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040131.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040761.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040840.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040715.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040853.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040337.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040229.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040829.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040741.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040734.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040747.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040366.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040878.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040773.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040867.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040878.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040779.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040331.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040275.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040750.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040409.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040969.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040890.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040762.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040696.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040518.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040908.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040664.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040808.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041435.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041215.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041706.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041669.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041731.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042746.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042859.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042088.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042013.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042900.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042832.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042481.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042735.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042516.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042825.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042974.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042723.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042919.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042847.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042728.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042894.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042566.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042365.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042269.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043076.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043296.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043210.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043364.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043110.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043230.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043875.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043843.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043914.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043624.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043901.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043970.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043722.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043308.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043038.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043167.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043809.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043888.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043506.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043394.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043507.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043291.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043398.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043244.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043684.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043053.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043954.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043324.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043452.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043303.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043567.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043203.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043716.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045072.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045499.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045113.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045001.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045017.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045472.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045368.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045371.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045201.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045812.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045882.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045117.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045462.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045638.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045575.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045280.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045487.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046545.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046636.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046704.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046656.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046568.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046403.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046027.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046056.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046634.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046112.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046748.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046783.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046306.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046531.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046845.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046490.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046679.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046322.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046313.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046019.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046691.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046404.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046164.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046061.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046346.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046097.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046216.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046498.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046426.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046580.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046439.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046713.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046561.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047866.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047834.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047918.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047532.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047589.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047512.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047266.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047335.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047198.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047870.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047155.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047367.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047270.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047323.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047263.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047616.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047572.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047104.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047176.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047157.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047613.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047647.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047197.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047133.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047923.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047733.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047190.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047544.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047486.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047059.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048749.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048448.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048278.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048155.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048273.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048625.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048693.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048804.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048653.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048316.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048736.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048539.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048642.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048921.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048808.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048443.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048376.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048925.webp"]}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/randomTopImg.js</url>
    <content><![CDATA[
const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

const jsonUrl = isMobile ? '../json/m_top_img.json' : '../json/top_img.json';
// const bg_json = "../json/bg.json"
// 随机背景图
// fetch(bg_json)
//   .then(response => response.json())
//   .then(data => {
//     const bg_json_len = data.color.length;
//     const random_bg = getRandomInt(0, bg_json_len);
//     const bg_color = document.getElementById("body-wrap");
//     const bg_ran_re = data.color[random_bg];
//     bg_color.style.background = bg_ran_re.c1;
//     bg_color.style.background = bg_ran_re.c2;
//     bg_color.style.background = bg_ran_re.c3;
//   })
//   .catch(error => {
//     console.error('Error fetching data:', error);
//   });

// 头顶图随机
fetch(jsonUrl)
  .then(response => {
    if (!response.ok) {
      throw new Error('网络响应异常');
    }
    return response.json();
  })
  .then(data => {

    var img_length_top = data.links.length;
    var random_img_top = getRandomInt(0, img_length_top);
    var img_top = document.getElementById("page-header");
    var imgDivTopUrl = data.links[random_img_top];

    img_top.style.backgroundImage = 'url(' + imgDivTopUrl + ')';

    console.log(imgDivTopUrl);
  })
  .catch(error => {
    console.error('获取数据时发生问题:', error);
  });

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}



///以下是根据屏幕变化修改导航栏的 宽度


var screenWidth;
var screenHeight;
function updateScreenSize() {
  screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  // document.getElementById('screenSizeOutput').textContent = `Screen Width: ${screenWidth}px, Screen Height: ${screenHeight}px`;
}

// Initial call to update screen size information
updateScreenSize();

// Event listener for window resize event
window.addEventListener('resize', updateScreenSize);

function updateScrollDistance() {
  const scrollDistance = window.pageYOffset || document.documentElement.scrollTop;
  const kirari_box_nav = document.querySelectorAll('.kirari-nav-box');

  kirari_box_nav.forEach(function (element) {
    if (scrollDistance < screenHeight * 7 / 10) {
      element.style.maxWidth = `${screenWidth}px`;
    } else {
      element.style.maxWidth = '1170px';
    }
  });
}

// Initial call to update scroll distance
updateScrollDistance();

// Event listener for scroll event
window.addEventListener('scroll', updateScrollDistance);



//sakana
document.addEventListener('DOMContentLoaded', function () {
  // let i=0;
  var sakanawidgetctrl = document.querySelectorAll('.sakana-widget-ctrl a');
  sakanawidgetctrl.forEach(function (element) {
    // i+=1;
    // if(i==3){
    element.style.display = 'none';
    // }
  });
});

/**
 * 版权网址换为当前网址
 */
window.onload = function () {
  // 获取当前网址
  let currentURL = window.location.href;

  // 获取所有具有 post-copyright-info 类的 <span> 标签
  let links = document.querySelectorAll('.post-copyright__type>.post-copyright-info a');

  // 遍历这些 <span> 标签并更改其内部 <a> 标签的 href 属性和内容
  links.forEach(function (link) {
    link.href = currentURL;
    link.textContent = currentURL;
  });


  let copyrightNoticeLinks = document.querySelectorAll('.post-copyright__notice > .post-copyright-info a');
  if (copyrightNoticeLinks.length > 0) {
    let lastLink = copyrightNoticeLinks[copyrightNoticeLinks.length - 1];
    lastLink.href = 'http://kiko2568.top';
  }

};

]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
