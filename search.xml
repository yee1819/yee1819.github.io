<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>buttfly魔改记录</title>
    <url>/posts/290fb21d.html</url>
    <content><![CDATA[<blockquote>
<p>本文是本人魔改butterfly的记录，作为数据丢失或者出现bug找出问题的关键</p>
</blockquote>
<div class="note warning modern"><p>基于butterfly 4.11，hexo 7.0 ，npm 10.5.1  ，node  20.10.0 进行修改<br>请注意版本，以及发布时间进行查看</p>
</div>
<p>让我们开始吧</p>
<h2 id="先置"><a href="#先置" class="headerlink" title="先置"></a>先置</h2><p><strong>首先我们要先学会如何自定义引入 css 以及 js 文件</strong></p>
<p>在你的博客源目录下的<code>source</code>中建立文件夹css,js，在文件夹中可以存入你的自定义css文件 和 js文件</p>
<p>如果你放入你的自定义文件运行了以后发现博客没有变化，那么你并没有引入你的css文件和js文件。</p>
<p>在主题文件夹的_config.yml中的<code>inject</code>引入，如果是css文件则写在head下面，如果是js文件则写在bottom下，这样文件就会在生成静态文件后插入html文件的头/尾部分。</p>
<p>css 文件和js文件引入分为俩种，本地引入和网络cdn引入….本地引入的路径如下，以博客文件夹下的<code>source</code>文件夹为源目录来查找</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120317696.webp" alt="image-20240412031727598"></p>
<hr>
<h2 id="全站生效"><a href="#全站生效" class="headerlink" title="全站生效"></a>全站生效</h2><h3 id="字体、代码字体的修改"><a href="#字体、代码字体的修改" class="headerlink" title="字体、代码字体的修改"></a>字体、代码字体的修改</h3><details class="folding-tag" green><summary> 字体修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9%E5%89%8D.webp" alt="image-20240412023652811"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9%E5%90%8E.webp" alt="image-20240412023743061"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" red><summary> 代码字体修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120255886.webp" alt="image-20240412025525745"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120255834.webp" alt="image-20240412025550679"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<p>以下是修改方法，参考至<a href="https://www.imbhj.com/posts/25c13146/">Butterfly 如何优雅的改字体 | Ordis’Blog (imbhj.com)</a></p>
<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">本地引入</button><button type="button" class="tab " data-href="-2">cdn引入</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>在你的自定义css文件夹建立一个文件，并且下载好你的字体文件</p>
<p>并且如下输入代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;font-name&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;font-src&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;font-format&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><p><code>font-name</code>可自己定义</p>
</li>
<li><p><code>font-display</code>是当你的指定字体出现问题或没有加载时会切换其他字体以免出现奔溃无法访问现象</p>
</li>
<li><p><code>font-scr</code>是你的字体文件路径，可以是本地路径，也可以是网络路径</p>
</li>
<li><p><code>font-format</code>是根据你的字体文件格式来写，具体如下,主要用于浏览器识别，其中<code>woff</code>,<code>woff2</code>是专门针对网页而进行优化的格式</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;<span class="comment">/*声明一个名为iconfont的字体变量*/</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../font/iconfont.svg#iconfont&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    在你的主题文件夹config.yml的inject中引入css文件，完成后在font：的<code>font-family</code>：后写入你在css文件中写的<code>font-name</code>，如此变大功告成了</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120354796.webp" alt="image-20240412035422706"></p>
<p>  如果想修改代码的字体，以上的步骤一致，只是在最后一步中修改为 <code>code-font-family</code>写入你的<code>font-name</code>….</p></div><div class="tab-item-content" id="-2"><p>找到你想引入的字体cdn链接，在主题文件夹的_config.yml文件内引入</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120357057.webp" alt="image-20240412035733965"></p>
<p>在cdn链接网址中找到<code>font-family</code>属性的值，如下图所示我的字体名为<code>LXGW WenKai Screen</code></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120359482.webp" alt="image-20240412035940079"></p>
<p>在主题文件夹的_config.yml中找到<code>font:</code>下的<code>font-family</code>填入这个值</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120354796.webp" alt="image-20240412035422706"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<div class="note danger simple"><p>在主题配置的<code>font-family</code>中你想要改变的字体后面建议放一个备用字体，以免没有成功加载前面的字体所导致的崩溃或bug</p>
</div>
<div class="note default simple"><p>本地引入的方式由于字体文件比较大的原因往往在网页加载的时候相比网络cdn引入下往往会慢上很多，很影响观感<br>建议使用网络cdn引入</p>
</div>
<div class="note primary modern"><p>本站使用的字体和博客字体分别为<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai / 霞鹜文楷</a> and <a href="https://github.com/githubnext/monaspace">monaspace</a></p>
</div>
<hr>
<h3 id="顶部图随机"><a href="#顶部图随机" class="headerlink" title="顶部图随机"></a>顶部图随机</h3><p>留个空</p>
<hr>
<h3 id="页脚修改"><a href="#页脚修改" class="headerlink" title="页脚修改"></a>页脚修改</h3><p>进入主题文件夹<code>themes\butterfly\layout\includes</code>找到<code>footer.pug</code>打开</p>
<p>这个时候的代码应该是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#footer-wrap</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> theme.footer.owner.enable</span><br><span class="line">    - var now = new Date()</span><br><span class="line">    - var nowYear = now.getFullYear()</span><br><span class="line">    <span class="keyword">if</span> theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">      .copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      .copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">  <span class="keyword">if</span> theme.footer.copyright</span><br><span class="line">    .framework-info</span><br><span class="line">      span= _p(<span class="string">&#x27;footer.framework&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      a(href=<span class="string">&#x27;https://hexo.io&#x27;</span>)= <span class="string">&#x27;Hexo&#x27;</span></span><br><span class="line">      span.footer-separator |</span><br><span class="line">      span= _p(<span class="string">&#x27;footer.theme&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      a(href=<span class="string">&#x27;https://github.com/jerryc127/hexo-theme-butterfly&#x27;</span>)= <span class="string">&#x27;Butterfly&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> theme.footer.custom_text</span><br><span class="line">    .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们把第一行外的代码全部缩进一格并加上这俩句<code>#footer_right</code>和<code>#footer_left</code>,此时我们将footer页脚分为俩个区间，一个左边一个右边</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#footer-wrap</span></span><br><span class="line">  <span class="comment">#footer_left</span></span><br><span class="line">    <span class="keyword">if</span> theme.footer.owner.enable</span><br><span class="line">      - var now = new Date()</span><br><span class="line">      - var nowYear = now.getFullYear()</span><br><span class="line">      <span class="keyword">if</span> theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">        .copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        .copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">    <span class="keyword">if</span> theme.footer.copyright</span><br><span class="line">      .framework-info</span><br><span class="line">        span= _p(<span class="string">&#x27;footer.framework&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">        a(href=<span class="string">&#x27;https://hexo.io&#x27;</span>)= <span class="string">&#x27;Hexo&#x27;</span></span><br><span class="line">        span.footer-separator |</span><br><span class="line">        span= _p(<span class="string">&#x27;footer.theme&#x27;</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">        a(href=<span class="string">&#x27;https://github.com/jerryc127/hexo-theme-butterfly&#x27;</span>)= <span class="string">&#x27;Butterfly&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> theme.footer.custom_text</span><br><span class="line">      .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">  <span class="comment">#footer_right</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="主页相关"><a href="#主页相关" class="headerlink" title="主页相关"></a>主页相关</h2><hr>
<h3 id="自定义侧边栏"><a href="#自定义侧边栏" class="headerlink" title="自定义侧边栏"></a>自定义侧边栏</h3><hr>
<h4 id="添加随机诗词"><a href="#添加随机诗词" class="headerlink" title="添加随机诗词"></a>添加随机诗词</h4><p>数据调用于<a href="https://www.jinrishici.com/">今日诗词  (jinrishici.com)</a></p>
<p>留个空</p>
<hr>
<h2 id="文章页面相关"><a href="#文章页面相关" class="headerlink" title="文章页面相关"></a>文章页面相关</h2><hr>
<h3 id="阅读模式的背景色"><a href="#阅读模式的背景色" class="headerlink" title="阅读模式的背景色"></a>阅读模式的背景色</h3><blockquote>
<p>原版的阅读模式整个界面白花花的一片和夜间模式的黑乎乎一片，让我感觉空白处太多，看文章有些不够专注中央</p>
<p>所以我想修改一些背景颜色来突出文章内容</p>
</blockquote>
<details class="folding-tag" yellow><summary> 修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120413619.webp" alt="image-20240412041339379"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120415629.webp" alt="image-20240412041510387"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" black><summary> 黑夜模式修改前后对比 </summary>
              <div class='content'>
              <div class="tabs" id="修改前后对比"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改前后对比-1">修改前</button><button type="button" class="tab " data-href="修改前后对比-2">修改后</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改前后对比-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120414023.webp" alt="image-20240412041443793"></p></div><div class="tab-item-content" id="修改前后对比-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120415105.webp" alt="image-20240412041532878"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
              </div>
            </details>
<details class="folding-tag" ><summary> 修改方法如下 </summary>
              <div class='content'>
              <p>修改方法如下</p><p>在<code>blog\themes\butterfly\source\css\_mode</code>中找到<code>readmode.styl</code>进行如下修改</p><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120427601.webp" alt="image-20240412042702480"></p><p>且下面找到如图并修改</p><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404120428170.webp" alt="image-20240412042823056"></p><p>如此便可以定义你的阅读模式的界面了，如果想修改其他内容，则在这个文件内查找你想修改的内容</p>
              </div>
            </details>
<hr>
<h2 id="持续更新中……"><a href="#持续更新中……" class="headerlink" title="持续更新中……."></a>持续更新中…….</h2><h2 id="计划中"><a href="#计划中" class="headerlink" title="计划中"></a>计划中</h2><div class='checkbox red'><input type="checkbox" />
            <p>顶部图根据登录端不同进行随机</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>页脚</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>标签归档界面修改</p>
            </div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexobutterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>/posts/d9283bc6.html</url>
    <content><![CDATA[<h1 id="GIit"><a href="#GIit" class="headerlink" title="GIit"></a>GIit</h1><blockquote>
<p>Git  是什么?</p>
<p>Git 是一个分布式版本控制系统</p>
<p>Git 是一个对项目文件管理的工具，有着版本控制等功能</p>
</blockquote>
<h2 id="git本地仓库的工作原理"><a href="#git本地仓库的工作原理" class="headerlink" title="git本地仓库的工作原理"></a>git本地仓库的工作原理</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  sequenceDiagram
	participant 远程仓库
 	本地仓库-&gt;&gt;本地仓库:  init
	本地仓库-&gt;&gt;远程仓库: git config --global(验证账号密码)
	本地仓库-&gt;&gt;远程仓库: git remote add origin（连接远程的地址）
	远程仓库--&gt;&gt;本地仓库:  clone（克隆）
	远程仓库-&gt;&gt;本地仓库: pull or fetch
	本地仓库-&gt;&gt;本地仓库: merge
	暂存区-&gt;&gt;本地仓库:  commit
    工作区-&gt;&gt;暂存区: add
	Note right of 工作区 : 新建文件---未跟踪(untracked)
	Note right of 工作区 : 修改文件---未暂存(unstaged)
	暂存区-&gt;&gt;工作区: git restore  file 回退
	暂存区-&gt;&gt;暂存区: git restore --staged file 清退暂存区
	本地仓库-&gt;&gt;本地仓库: git reset 重置
	本地仓库--&gt;&gt;远程仓库: branch（选择分支push）
	本地仓库--&gt;&gt;远程仓库: push
	远程仓库--&gt;&gt;远程仓库: merge(合并)
  </pre></div>
<blockquote>
<p>git 文件管理 会 忽略 .gitignore 文件中的文件路径</p>
</blockquote>
<h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><h3 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1. 初始化本地仓库"></a>1. 初始化本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>创建.git文件夹，存放修改前后的版本信息，方便回滚以及记录</p>
<blockquote>
<p>.git 是隐藏文件夹，需要设置显示隐藏文件夹才可以显示</p>
</blockquote>
<h3 id="2-提交文件到缓冲区"><a href="#2-提交文件到缓冲区" class="headerlink" title="2. 提交文件到缓冲区"></a>2. 提交文件到缓冲区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//全部提交</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">// 单个文件</span><br><span class="line">git add first_file.txt</span><br></pre></td></tr></table></figure>
<h3 id="3-查看仓库状态"><a href="#3-查看仓库状态" class="headerlink" title="3. 查看仓库状态"></a>3. 查看仓库状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<h3 id="4-提交暂存区文件进仓库"><a href="#4-提交暂存区文件进仓库" class="headerlink" title="4.提交暂存区文件进仓库"></a>4.提交暂存区文件进仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;本次提交修改的注释,可以任意文本&quot;</span></span><br></pre></td></tr></table></figure>
<p>提交工作区的文件进仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;你的提交信息&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不需要进入暂存区就提交工作区的文件，其中-a是-all  全部的意思</p>
<blockquote>
<p>注意，这个方法不提交新的文件，只针对git 已追踪的文件，即已存在的文件，新文件提交仍然需要gitadd再git commit</p>
</blockquote>
<h3 id="5-查看提交日志-可查看提交人、分支、文件、时间"><a href="#5-查看提交日志-可查看提交人、分支、文件、时间" class="headerlink" title="5.查看提交日志(可查看提交人、分支、文件、时间)"></a>5.查看提交日志(可查看提交人、分支、文件、时间)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>指令有其他参数<code>git log [option]</code>，其中option的值有</p>
<ul>
<li><p>分支名,可单独查看分支的 修改</p>
</li>
<li><p><code>--all</code></p>
</li>
</ul>
<p>显示所有分支</p>
<ul>
<li><code>--all d</code></li>
</ul>
<p>提交信息为一行</p>
<ul>
<li><code>--abbrev-commit</code></li>
</ul>
<p>让输出的commitId简短</p>
<ul>
<li><code>--graph</code></li>
</ul>
<p>以图片形式显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --all --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<p>其余更多请参考<a href="https://zhuanlan.zhihu.com/p/629756328">git log命令参数详解 - 知乎 (zhihu.com)</a></p>
<hr>
<p><strong>所有日志，包括回退的日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-版本回退"><a href="#6-版本回退" class="headerlink" title="6.版本回退"></a>6.版本回退</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset  --hard commitID</span><br></pre></td></tr></table></figure>
<p><code>commitID</code> 通过  <code>git log</code> 查看</p>
<blockquote>
<p><code>--soft</code> 、<code>--mixed</code>以及<code>--hard</code>是三个恢复等级。</p>
<ul>
<li>使用<code>--soft</code>就仅仅将头指针恢复，已经add的暂存区以及工作空间的所有东西都不变。</li>
<li>如果使用<code>--mixed</code>，就将头恢复掉，已经add的暂存区也会丢失掉，工作空间的代码什么的是不变的。</li>
<li>如果使用<code>--hard</code>，那么一切就全都恢复了，头变，aad的暂存区消失，代码什么的也恢复到以前状态。</li>
</ul>
</blockquote>
<hr>
<h3 id="7-查看分支"><a href="#7-查看分支" class="headerlink" title="7. 查看分支"></a>7. 查看分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8-创建分支"><a href="#8-创建分支" class="headerlink" title="8. 创建分支"></a>8. 创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="9-切换分支"><a href="#9-切换分支" class="headerlink" title="9. 切换分支"></a>9. 切换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br><span class="line">//or</span><br><span class="line">git switch 分支名</span><br></pre></td></tr></table></figure>
<p><code>HEAD</code>指向当前分支</p>
<p>切换到一个不存在的分支，即创建新分支并复制当前分支内容并切换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名 </span><br><span class="line">//or</span><br><span class="line">git switch -c  分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="10-删除分支"><a href="#10-删除分支" class="headerlink" title="10. 删除分支"></a>10. 删除分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名</span><br><span class="line">//↑ 需要做各种检查</span><br><span class="line"></span><br><span class="line">//不做检查强制删除</span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="11-合并分支"><a href="#11-合并分支" class="headerlink" title="11.合并分支"></a>11.合并分支</h3><p>首先使用<code>git switch</code>或者<code>git checkout</code>选择需要保留的分支上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure>
<p>合并后<code>esc</code>+<code>:</code>+<code>wq</code>退出合并文本编辑</p>
<h5 id="处理分支"><a href="#处理分支" class="headerlink" title="处理分支"></a>处理分支</h5><p>当是使用<code>merge</code>合并分支的时候,如果有相同的文件修改了不一样的变动，即<code>冲突</code>,此时git会自动合并,git并不会处理冲突，只在命令行告诉你什么地方会有冲突:</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515085927238.webp" alt="image-20240515085927238"></p>
<p>在test.txt 文件内是这样的</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515090143129.webp" alt="image-20240515090143129"></p>
<p>其中<code>`HEAD</code>到<code>=====</code>分割线是你所合并的主分支内容，等号分割线下到<code>hello</code>是被我合并的分支（hello 是我合并的分支名）</p>
<p>之后手动修改需要解决的冲突内容，可以选择都保留，也可以选择留下一部分，<code>git add</code>+<code>git commit</code>上传本地仓库，以下是项目流程结构图</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240515094404470.webp" alt="image-20240515094404470"></p>
<h5 id="禁用Fast-forward"><a href="#禁用Fast-forward" class="headerlink" title="禁用Fast forward"></a>禁用Fast forward</h5><p>默认的快速合并的结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522143722591.webp" alt="image-20240522143722591"></p>
<p>其中新建用户是dev的commit ，快速合并中HEAD直接指向dev，导致dev的提交信息被遗失了</p>
<p>以下是 禁用快速合并的结果</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522144153222.webp" alt="image-20240522144153222"></p>
<p>如图所示，合并后的commit信息还在</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge --no-ff feature-branch</span><br></pre></td></tr></table></figure>
<h5 id="squash"><a href="#squash" class="headerlink" title="squash"></a>squash</h5><p>如果分支commit太多太乱，可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge --squash feature-branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这项指令会让所有的提交合并为一个提交进行合并，并且不保留合并信息</p>
<hr>
<h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase </span><br></pre></td></tr></table></figure>
<p>交换commit的顺序，重写commit的顺序，让提交历史更加简洁易懂</p>
<p>具体待续…</p>
<hr>
<h3 id="12-远程仓库"><a href="#12-远程仓库" class="headerlink" title="12. 远程仓库"></a>12. 远程仓库</h3><h4 id="先要关联远程仓库"><a href="#先要关联远程仓库" class="headerlink" title="先要关联远程仓库"></a>先要关联远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库地址</span><br></pre></td></tr></table></figure>
<ul>
<li><code>origin</code>的作用是给远程仓库地址起一个别名为<code>origin</code>，这是一个默认名字,可以替换，相当于c语言的<code>typedef</code>以及<code>#define</code>,origin作为远程仓库的地址添加到本地仓库，在之后的拉取代码，推送代码的过程中就不需要每次都打一大串的远程仓库地址</li>
</ul>
<h4 id="查看绑定的远程仓库地址"><a href="#查看绑定的远程仓库地址" class="headerlink" title="查看绑定的远程仓库地址"></a>查看绑定的远程仓库地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="有多少个远程仓库"><a href="#有多少个远程仓库" class="headerlink" title="有多少个远程仓库"></a>有多少个远程仓库</h4><blockquote>
<p>建议使用上面的指令查看，包含关系关系如下图</p>
</blockquote>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240518203302693.webp" alt="image-20240518203302693"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote </span><br></pre></td></tr></table></figure>
<h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>最常用的指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<ul>
<li>命令为推送文件夹的所有不被忽略的文件到origin所指的仓库地址的main分支上</li>
<li><code>-u</code>是<code>--set-upstream</code>的缩写</li>
</ul>
<p>用于关联远程仓库与本地仓库的指定分支，关联后不需要指定分支名就可以使用<code>git push</code>以及<code>git pull</code>指令</p>
<p>查看本地分支以及远程仓库分支的跟踪状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240518204251921.webp" alt="image-20240518204251921"></p>
<p>修改关联分支仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -u origin/new-branch old-branch-name</span><br></pre></td></tr></table></figure>
<p>完全指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-f] [--set-upstream][远端名称[本地分支名][:远端分支名]]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-f</code> ，即<code>--force</code>如果指令加入，则是不理会推送冲突（即他人的提交或者在远程仓库的修改），强制覆盖</li>
<li><code>--set-upstream</code>也就是<code>-u</code>上面有详细解释</li>
<li>远端名称，即远程仓库地址，可用别名替代，也就是默认设置的<code>origin</code></li>
<li>如果远程仓库和本地仓库一致，则省略<code>[:远程分支]</code></li>
<li>推送到不同的名称的的分支示例<code>git push -u origin main:yuan_branch</code> ，本地的main分支推送到了远程的yuan_branch分支</li>
</ul>
<hr>
<h4 id="克隆-远程仓库"><a href="#克隆-远程仓库" class="headerlink" title="克隆 远程仓库"></a>克隆 远程仓库</h4><blockquote>
<p>clone，和词意相当，也就是把远程仓库的全部文件下载到本地</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址 [本地文件夹名称]</span><br><span class="line">//例如</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git  repo</span><br></pre></td></tr></table></figure>
<ul>
<li>本地文件夹名称可省略，会在当前自动创建一个远程仓库名的文件夹。并把所有的文件下载到这个文件夹里面</li>
</ul>
<p>设置了文件夹名则是在目录下创建文件夹名的文件夹，并把所有的文件下载到这个文件夹里面。</p>
<hr>
<h4 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h4><p>除了push时连接远程仓库外还可以通过以下方法</p>
<p><code>git checkout --track origin/dev</code></p>
<p>作用：</p>
<ol>
<li>创建一个名为 <code>dev</code> 的本地分支（假设远程分支是 <code>origin/dev</code>）。</li>
<li>切换到这个新创建的本地分支。</li>
<li>配置这个本地分支以跟踪远程分支 <code>origin/dev</code></li>
</ol>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev  <span class="comment"># 创建并切换到本地分支 dev，从 origin/dev 的当前提交开始</span></span><br><span class="line">git branch --set-upstream-to=origin/dev  <span class="comment"># 配置本地分支 dev 以跟踪 origin/dev</span></span><br></pre></td></tr></table></figure>
<p>将这两个步骤合并为一步</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b dev --track origin/dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="13-抓取和拉取远程仓库"><a href="#13-抓取和拉取远程仓库" class="headerlink" title="13.抓取和拉取远程仓库"></a>13.抓取和拉取远程仓库</h3><p>抓取：<code>fetch</code>,获取远程仓库的最新修改，创造一个origin/分支名的新分支，不会自动合并需要你手动合并</p>
<p>以下是使用方法：</p>
<ul>
<li>获取所有分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>
<ul>
<li>获取远程仓库的某个分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch  origin main</span><br></pre></td></tr></table></figure>
<p> 抓取最新变化以后，需要你手动去合并分支，更新你的本地仓库的代码</p>
<p>拉取：<code>full</code>，获取远程仓库的修改，并且合并这个修改的代码到你的本地仓库，此时可能产生冲突，这时候就需要</p>
<p>也就是说，<code>full</code>其实是<code>fetch</code>+<code>merge</code></p>
<hr>
<h3 id="14-标签-tag"><a href="#14-标签-tag" class="headerlink" title="14. 标签 tag"></a>14. 标签 tag</h3><p>标签是git版本自定义文本的功能，让人更好的区分不同版本，而不是一串无规律的数字字母编号</p>
<p>可以理解为 给不同的 commit版本 起别名，或是一个 死指针  固定的指向那个  commit</p>
<p><code>git tag</code>查看所有标签</p>
<p><code>git tag &lt;tagname&gt;</code>创建一个标签，默认以当前分支的最新commit为基本</p>
<p><code>git tag &lt;tagname&gt; &lt;commitID&gt;</code>给指定commitId进行打标签</p>
<p><code>git show &lt;tagname&gt;</code>展示标签详细信息</p>
<p><code>git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</code>给标签设置详细信息</p>
<p><code>git push origin &lt;tagname&gt;</code>上传标签到远程仓库</p>
<p><code>git push origin master --tags</code>上传全部标签到远程仓库</p>
<p><code>git tag -d &lt;tagname&gt;</code>删除标签</p>
<p><code>git push origin --delete &lt;tagname&gt;</code>远程仓库的标签删除</p>
<p><code>git push origin :refs/tags/&lt;tagname&gt;</code>同上</p>
<blockquote>
<p><a href="https://git-scm.com/book/zh/v2/Git-基础-打标签">Git - 打标签 (git-scm.com)</a></p>
</blockquote>
<hr>
<h3 id="15-贮藏-stash"><a href="#15-贮藏-stash" class="headerlink" title="15. 贮藏 stash"></a>15. 贮藏 stash</h3><p>当我在一个分支中，已经完成了一部分的开发，但是还不能提交，这时候我需要切换到另一个分支（例如有紧急bug），这个时候切换分支未提交的文件就会一起带到另一个分支上，</p>
<p>这个时候我们就需要冷藏这个分支上未提交的工作区。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch hello</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\345\210\206\346\224\257.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (hello)</span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (hello)</span><br><span class="line">$ git status</span><br><span class="line">On branch hello</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个时候工作区就干净了，可以任意切换分支了</p>
<p><code>git stash</code>贮藏</p>
<p><code>git stash list</code>查看所有的贮藏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以通过下述命令来标记此次储藏，以便后期查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash save [stashMessage]</span><br></pre></td></tr></table></figure>
<p>解封/恢复</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash apply</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\346\226\260\345\273\272\347\224\250\346\210\267.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;2&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过<code>git stash apply</code>可以解封，但是还存在在stash list中，通过<code>git stash drop</code>删除，可以看出，stash是一个栈结构</p>
<figure class="highlight plaintext"><figcaption><span>git stash drop</span></figcaption><table><tr><td class="code"><pre><span class="line">git stash drop</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (f4c2dafa4382f0d70657cf4c713bf39e336ef0e0)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch &#x27;dev2&#x27;</span><br></pre></td></tr></table></figure>
<p><code>git stash pop</code>通过这个可以一键删除并恢复</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: fc958c7 新建用户</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;2&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   <span class="string">&quot;\346\226\260\345\273\272\347\224\250\346\210\267.txt&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (72215c233f434ebd7e98eac7421ccf26d8b626b1)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假如我有多个贮藏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: fc958c7 新建用户</span><br><span class="line">stash@&#123;1&#125;: WIP on hello: 336d4e3 Merge branch <span class="string">&#x27;dev2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我可以选择一个<code>git stash apply stash@&#123;0&#125;</code>指定的编号去恢复</p>
<hr>
<h3 id="16-工作区回退-暂存区回退-checkout-reset-restore"><a href="#16-工作区回退-暂存区回退-checkout-reset-restore" class="headerlink" title="16. 工作区回退/暂存区回退  checkout / reset/restore"></a>16. 工作区回退/暂存区回退  checkout / reset/restore</h3><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>工作区的文件在修改后可以执行两种操作：</p>
<ul>
<li><p><code>git add</code></p>
<p>确认工作无误后，把文件上传到暂存区，再commit一个新版本</p>
</li>
<li><p><code>git checkout -- 文件名</code></p>
<p>发现工作有错误，回退到修改之前</p>
</li>
<li><p><code>git restore</code></p>
<p>git 2.23 版本后出现的回退指令</p>
</li>
</ul>
<p>首先，使用<code>git status</code>查看仓库状态，这是一个干净无修改的工作区</p>
<p>我们修改一个test.txt，添加一行字符串</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">//添加一行字符串后</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>git restore是git 2.23出现的新指令，用于清晰语义，因为checkout是切换分支有歧义…</p>
</blockquote>
<p>先使用<code>git checkout -- 文件名</code>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样做就回退test.txt文件到了commit<code>--&gt;HEAD</code>的状态</p>
<hr>
<h4 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h4><p>现在使用<code>git restore</code>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git restore test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一样可以完成结果，回复到暂存区的状态</p>
<p>如果想回退到<code>HEAD--&gt;</code>，那么指令是<code>git restore --source=HEAD example.txt</code></p>
<hr>
<p>在查资料的时候看见<code>git restore --staged &lt;file&gt;</code></p>
<p>这个是<strong>清空暂存区中的文件</strong>（仅从暂存区移除，不影响工作区）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">//再修改工作区的<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git restore --staged test.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<p>我们可以看到暂存区的文件被退回了，但是工作区已经修改的文件仍然还在</p>
<hr>
<h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><p>如果是想仅仅是把暂存区的文件放回工作区可以使用：<code>git reset HEAD &lt;file&gt;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        modified:   <span class="string">&quot;\350\277\231\346\230\257hello2.txt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git reset HEAD hello.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       hello.txt</span><br><span class="line">M       test.txt</span><br><span class="line">M       这是hello2.txt</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line">        modified:   test.txt</span><br><span class="line">        modified:   <span class="string">&quot;\350\277\231\346\230\257hello2.txt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以下是gpt的介绍</p>
<p><code>git reset</code> 是一个非常强大的 Git 命令，用于撤销更改和移动 HEAD 指针。它可以用于重置暂存区的文件、更改当前分支的提交历史，甚至更新工作目录。以下是详细的用法和示例：</p>
<p>基本用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset [&lt;mode&gt;] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>
<p>模式：</p>
<ol>
<li><strong>—soft</strong>：仅移动 HEAD 指针，不改变暂存区和工作区的内容。</li>
<li><strong>—mixed</strong>（默认模式）：移动 HEAD 指针，并重置暂存区为指定的 commit，但不改变工作区的内容。</li>
<li><strong>—hard</strong>：移动 HEAD 指针，重置暂存区，并更新工作区，使其与指定的 commit 一致。</li>
</ol>
<p>用法和示例：</p>
<ol>
<li><code>--soft</code> 模式</li>
</ol>
<p>仅重置 HEAD 指针，不改变暂存区和工作区。这种模式适合想保留更改但移动提交历史的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，但保留暂存区和工作区的更改</span><br><span class="line">git reset --soft &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，保留当前的所有更改为已暂存状态。</p>
<ol>
<li><code>--mixed</code> 模式（默认）</li>
</ol>
<p>重置 HEAD 指针和暂存区，但保留工作区的更改。这是默认模式，适合想保留更改但从暂存区移除的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，并重置暂存区，但保留工作区的更改</span><br><span class="line">git reset --mixed &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，并将当前的更改从暂存区移除，但保留在工作区。</p>
<ol>
<li><code>--hard</code> 模式</li>
</ol>
<p>重置 HEAD 指针、暂存区和工作区，使其全部与指定的 commit 一致。这会丢失所有未提交的更改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 移动 HEAD 指针到指定的提交，并重置暂存区和工作区，使它们与该提交一致</span><br><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD 指针移到上一个提交，并丢弃所有未提交的更改。</p>
<hr>
<p>其他示例</p>
<ol>
<li>重置单个文件</li>
</ol>
<p>如果只想重置暂存区中的某个文件，可以使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会把指定文件从暂存区移除，但保留在工作区。</p>
<ol>
<li>移动到特定提交</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --hard &lt;commit_hash&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会把 HEAD、暂存区和工作区都重置到指定的提交。</p>
<ol>
<li>撤销最近的提交但保留更改</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码</span><br><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>
<p>这个命令会撤销最近的提交，但保留所有更改为已暂存状态。</p>
<blockquote>
<p><code>git reset</code> 是一个功能强大且多用途的命令，可以用来修改提交历史、重置暂存区和工作区。根据不同的模式，可以选择适合当前需求的操作方式：</p>
<ul>
<li><strong>—soft</strong> 保留所有更改，但移动 HEAD 指针。</li>
<li><strong>—mixed</strong> 重置暂存区，但保留工作区更改。</li>
<li><strong>—hard</strong> 丢弃所有未提交的更改，并重置到指定的提交。</li>
</ul>
</blockquote>
<p>ps.reset偷个懒用的gpt的介绍</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>回退分为三种</p>
<ol>
<li>回退工作区</li>
</ol>
<ul>
<li><code>git checkout &lt;file&gt;</code></li>
<li><code>git restore &lt;file&gt;</code></li>
</ul>
<ol>
<li>文件从暂存区到工作区，不影响工作区</li>
</ol>
<ul>
<li><code>git reset HEAD &lt;file&gt;</code></li>
<li><code>git restore --staged &lt;file&gt;</code></li>
</ul>
<ol>
<li>commit、暂存区、工作区都变为commit一个版本</li>
</ol>
<ul>
<li><code>`git reset --hard commit_id</code></li>
</ul>
<h3 id="17-删除文件"><a href="#17-删除文件" class="headerlink" title="17. 删除文件"></a>17. 删除文件</h3><p><code>git rm &lt;file&gt;</code></p>
<p>暂存区和工作区都删除文件，只需要commit，相当于手动删除+git add</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git <span class="built_in">rm</span> hello.txt</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;hello.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (main)</span><br><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        deleted:    hello.txt</span><br><span class="line">        </span><br><span class="line">$ git commit -m <span class="string">&quot;删除hello&quot;</span></span><br><span class="line">[main f979439] 删除hello</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="18-版本差异"><a href="#18-版本差异" class="headerlink" title="18.版本差异"></a>18.版本差异</h3><p><code>git diff</code> 是一个用于显示未提交更改的 Git 命令。它可以显示工作区和暂存区之间的差异、暂存区和最近一次提交之间的差异，以及其他特定的比较。以下是 <code>git diff</code> 的详细用法和一些常见示例：</p>
<p> 基本用法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>显示工作区中未暂存的更改。</p>
<p> 常见示例</p>
<ol>
<li>查看工作区和暂存区之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>这个命令会显示工作区中未暂存的更改。</p>
<ol>
<li>查看暂存区和最近一次提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
<p>这个命令（或者 <code>git diff --staged</code>）会显示已暂存但还未提交的更改。</p>
<ol>
<li>查看工作区和最近一次提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<p>这个命令会显示工作区中所有未提交的更改，无论它们是否已经暂存。</p>
<ol>
<li>查看两个分支之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff branch1 branch2</span><br></pre></td></tr></table></figure>
<p>这个命令会显示 <code>branch1</code> 和 <code>branch2</code> 之间的差异。</p>
<ol>
<li>查看两个提交之间的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff commit1 commit2</span><br></pre></td></tr></table></figure>
<p>这个命令会显示 <code>commit1</code> 和 <code>commit2</code> 之间的差异。</p>
<ol>
<li>查看特定文件的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会显示当前工作区中的特定文件和最近一次提交之间的差异。</p>
<ol>
<li>查看特定目录的差异</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD &lt;directory&gt;/</span><br></pre></td></tr></table></figure>
<p>这个命令会显示当前工作区中的特定目录和最近一次提交之间的差异。</p>
<p>其他有用的选项</p>
<ul>
<li><p><strong>显示简洁的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>
<p>这个命令会以简洁的统计方式显示更改。</p>
</li>
<li><p><strong>忽略空白字符的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --ignore-all-space</span><br></pre></td></tr></table></figure>
<p>这个命令会忽略空白字符的更改。</p>
</li>
<li><p><strong>显示统一格式的差异（默认格式）</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --unified</span><br></pre></td></tr></table></figure>
<p>这个命令会以统一格式显示更改，默认情况下 <code>git diff</code> 就是使用这种格式。</p>
</li>
<li><p><strong>仅显示名称的差异</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --name-only</span><br></pre></td></tr></table></figure>
<p>这个命令会仅显示文件名称，而不显示具体的更改内容。</p>
</li>
</ul>
<p>例子</p>
<p>假设你有一个项目目录，修改了 <code>file1.txt</code> 和 <code>file2.txt</code> 文件，现在想查看这些修改：</p>
<ol>
<li><p>查看未暂存的更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>暂存更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add file1.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看已暂存的更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更改：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;修改了 file1.txt 和 file2.txt&quot;</span></span><br></pre></td></tr></table></figure>
<p>总结</p>
</li>
</ol>
<p><code>git diff</code> 是一个非常强大的工具，用于比较文件的不同版本。它可以帮助你在提交更改之前了解具体的修改内容，并且可以在多个不同的上下文中使用，从而提供灵活的比较方式。</p>
<h3 id="19-复制其他分支的提交到当前分支-cherry-pick"><a href="#19-复制其他分支的提交到当前分支-cherry-pick" class="headerlink" title="19. 复制其他分支的提交到当前分支  cherry-pick"></a>19. 复制其他分支的提交到当前分支  cherry-pick</h3><p><code>git cherry-pick &lt;commit&gt;</code></p>
<p>应用场景：我在bug修改提交或者main提交后，我想在我当前dev分支获取main提交的时候，就可以使用这个，不需要合并。</p>
<h3 id="20-忽略文件"><a href="#20-忽略文件" class="headerlink" title="20. 忽略文件"></a>20. 忽略文件</h3><p>在git仓库根目录中，命名一个<code>.gitignore</code></p>
<p>在这个目录中的目录或者文件名都不会出现在git的提交中，隐私信息或者配置信息就不会发出去</p>
<p>也就是说git不再追踪.gitignore写入的文件</p>
<p>如果你忽略了，但是你确实想提交<code>git add -f App.class</code></p>
<p>如果你发现你的目录写错了，但是找不到问题，<code>git check-ignore -v App.class</code>会提醒你哪里出了问题</p>
<p>如果想添加不被排除的文件</p>
<p>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.class</span><br><span class="line">但是我想要文件 App.class</span><br><span class="line">!App.class</span><br></pre></td></tr></table></figure>
<p>就可以实现不排除App.class了</p>
<hr>
<h3 id="21-清理未追踪的文件"><a href="#21-清理未追踪的文件" class="headerlink" title="21. 清理未追踪的文件"></a>21. 清理未追踪的文件</h3><p>未追踪的文件指：</p>
<ul>
<li>未通过add 添加到暂存区的文件</li>
<li>.gitignore 文件写入的目录文件</li>
</ul>
<p>通过<code>git clean</code>可以清除未追踪的文件</p>
<p><code>git clean -n</code>显示哪些文件将被删除，并不是删除，而是删除前查看将删除的文件同<code>git clean --dry-run</code></p>
<p><code>git clean -f</code>强制删除。<code>git clean --force</code></p>
<p><code>git clean -f -d</code>删除未追踪的目录，<code>git clean</code>一般只删除文件，不删除目录，需要删除目录则使用这个</p>
<p><code>git clean -f -X</code>仅删除忽略掉的文件。即<code>.gitignore</code>指定的文件</p>
<p><code>git clean -f -x</code>删除所有未追踪的文件和忽略的文件。这个选项会删除所有未追踪的文件，包括那些在 <code>.gitignore</code> 文件中指定的文件。</p>
<h3 id="22-撤销提交的revert"><a href="#22-撤销提交的revert" class="headerlink" title="22 .撤销提交的revert"></a>22 .撤销提交的revert</h3><p>相比reset的重置，把新的commit删除，revert会新建一个提交把旧的版本逆转，并保留原先的commit，保留提交历史的完整性</p>
<p><code>git revert &lt;commitid&gt;</code></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522192833426.webp" alt="image-20240522192833426"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">* c778266 qevert <span class="string">&quot;revert_test_2&quot;</span></span><br><span class="line">* b39474d revert_test_3</span><br><span class="line">* 2ce70d9 revert_test_2</span><br><span class="line">* d029a3d revert_test_1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>会发现原来的commit依旧存在，并且还添加了一个commit，显示逆转到了revert</p>
<p>允许多个撤销<code>git revert  &lt;commit&gt;   &lt;commit&gt;   &lt;commit&gt;....</code>,会一个一个撤销/逆转</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git revert  e90405d   4e41599 c778266</span><br><span class="line">[dev 13b68aa] Revert <span class="string">&quot;cs5&quot;</span></span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line">[dev f53dff4] Revert <span class="string">&quot;revert_test_4&quot;</span></span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 asa.txt</span><br><span class="line">[dev 504f1d3] Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"> 1 file changed, 4 deletions(-)</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git <span class="built_in">log</span> --graph --all --pretty=oneline --abbrev-commit</span><br><span class="line">* 504f1d3 (HEAD -&gt; dev) Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line">* f53dff4 Revert <span class="string">&quot;revert_test_4&quot;</span></span><br><span class="line">* 13b68aa Revert <span class="string">&quot;cs5&quot;</span></span><br><span class="line">* ff40ccb cs6</span><br><span class="line">* e90405d cs5</span><br><span class="line">* 4e41599 revert_test_4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> git revert 2ce70d9</span><br><span class="line">Auto-merging revert.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> revert.txt</span><br><span class="line">error: could not revert 2ce70d9... revert_test_2</span><br><span class="line">hint: After resolving the conflicts, mark them with</span><br><span class="line">hint: <span class="string">&quot;git add/rm &lt;pathspec&gt;&quot;</span>, <span class="keyword">then</span> run</span><br><span class="line">hint: <span class="string">&quot;git revert --continue&quot;</span>.</span><br><span class="line">hint: You can instead skip this commit with <span class="string">&quot;git revert --skip&quot;</span>.</span><br><span class="line">hint: To abort and get back to the state before <span class="string">&quot;git revert&quot;</span>,</span><br><span class="line">hint: run <span class="string">&quot;git revert --abort&quot;</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>出现冲突时</p>
<p>在提示的文件中修改冲突后，可以选择<code>git add/rm &lt;pathspec&gt;</code>，添加到暂存区，再<code>git revert --continue</code>继续还原</p>
<p>当有多个逆转提交时可以使用<code>git revert --skip</code>跳过这个改变提交，而执行其他的逆转，比如<code>git revert A  B  C  D</code>，C出现了冲突，我选择<code>git revert --skip</code>,这个时候ABD仍然逆转，C的修改不变。</p>
<p><code>git revert --abort</code>逆转过程中，有冲突的时候使用这个语句将中止当前所有逆转，并返回到<code>git revert</code>前</p>
<h3 id="23-检索"><a href="#23-检索" class="headerlink" title="23. 检索"></a>23. 检索</h3><p><code>git grep [options] pattern [-- [pathspec...]]</code></p>
<ul>
<li><p>pattern </p>
<p>字符串或者正则表达式</p>
</li>
<li><p>[不同的模式]</p>
</li>
<li><p>pathspec</p>
<p>搜索的文件或者目录</p>
</li>
</ul>
<p>常用选项</p>
<ul>
<li><p><strong><code>-i</code></strong>：忽略大小写。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -i <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-n</code></strong>：显示匹配行的行号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -n <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-v</code></strong>：反向匹配，显示不包含匹配模式的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -v <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-c</code></strong>：只显示匹配的行数。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -c <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-l</code></strong>：只显示包含匹配模式的文件名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep -l <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--cached</code></strong>：在索引（暂存区）中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep --cached <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>&lt;commit&gt;</code></strong>：在指定提交中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> HEAD</span><br><span class="line">git grep <span class="string">&quot;pattern&quot;</span> commit_hash</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>&lt;branch&gt;</code></strong>：在指定分支中搜索。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> branch_name</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--</code></strong>：分隔符，用于区分路径和模式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git grep <span class="string">&quot;pattern&quot;</span> -- path/to/file_or_directory</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git grep 测试</span><br><span class="line">revert.txt:测试1</span><br><span class="line">revert.txt:测试2</span><br><span class="line">revert.txt:测试3</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git grep -n 测试</span><br><span class="line">revert.txt:1:测试1</span><br><span class="line">revert.txt:3:测试2</span><br><span class="line">revert.txt:5:测试3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="24-溯源-blame"><a href="#24-溯源-blame" class="headerlink" title="24. 溯源 blame"></a>24. 溯源 blame</h3><p><code>git blame [options] &lt;file&gt;</code></p>
<p>查看文件被谁修改以及提交信息等等</p>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git blame test.txt</span><br><span class="line">86960c55 (yee1819 2024-05-15 08:53:55 +0800 1) 25616515</span><br><span class="line">86960c55 (yee1819 2024-05-15 08:53:55 +0800 2)</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 3)</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 4) 这是在main分支输入的内容</span><br><span class="line">336c576f (yee1819 2024-05-15 08:55:38 +0800 5) 这里是hello 分支的内容</span><br><span class="line">074914c1 (yee1819 2024-05-15 09:37:42 +0800 6)</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 7) ttttt</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 8)</span><br><span class="line">133c7fd3 (yee1819 2024-05-22 10:14:54 +0800 9) 6666</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>选项：</p>
<ul>
<li><p><strong><code>-L &lt;start&gt;,&lt;end&gt;</code></strong>：限制只显示特定范围的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -L 10,20 &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>只显示从第 10 行到第 20 行的修改记录。</p>
</li>
<li><p><strong><code>-c</code></strong>：使用简短的提交哈希。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -c &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-e</code></strong>：显示作者的 email 地址。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -e &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-f</code></strong>：显示完整的文件名和行号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -f &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-l</code></strong>：显示包含换行符的行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -l &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-p</code></strong>：显示更详细的原始信息。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -p &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>--since=&lt;date&gt;</code> 和 <code>--until=&lt;date&gt;</code></strong>：限制显示从某个日期开始或截止的修改。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame --since=2.weeks &lt;file&gt;</span><br><span class="line">例如：</span><br><span class="line">$ git blame --since=<span class="string">&quot;2023-01-01&quot;</span> test.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>-C</code></strong>：检测代码搬移（跨文件）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame -C &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="25-flow-分支管理系统"><a href="#25-flow-分支管理系统" class="headerlink" title="25. flow 分支管理系统"></a>25. flow 分支管理系统</h3><p>一套详细的分支管理策略主要分为</p>
<ol>
<li><strong>主分支（master）</strong>：始终保持可发布状态，包含已经发布的版本。</li>
<li><strong>开发分支（develop）</strong>：包含即将发布的功能，作为功能分支的集成分支。</li>
<li><strong>功能分支（feature）</strong>：用于开发新功能，基于 <code>develop</code> 创建，完成后合并回 <code>develop</code>。</li>
<li><strong>发布分支（release）</strong>：用于准备新版本的发布，基于 <code>develop</code> 创建，完成后合并回 <code>master</code> 和 <code>develop</code>。</li>
<li><strong>热修复分支（hotfix）</strong>：用于修复紧急问题，基于 <code>master</code> 创建，完成后合并回 <code>master</code> 和 <code>develop</code>。</li>
</ol>
<p>需要先置安装，有独特的一套指令，以及良好的结构化规范，不过多了解。</p>
<h3 id="26-worktree-仓库"><a href="#26-worktree-仓库" class="headerlink" title="26. worktree 仓库"></a>26. worktree 仓库</h3><p>当工作中需要频繁切换分支的时候，可以创建一个新的工作目录，相当于复制一个仓库来方便切换</p>
<p><code>git worktree add &lt;path&gt; [branch]</code> </p>
<ul>
<li><p><code>&lt;path&gt;</code>为路径</p>
</li>
<li><p><code>[branch]</code> 可选的分支名，如果不填写，则自动创建一个与路径目录名相同的分支。如果该分支已存在则切换到同名分支。</p>
<p>如果没有这个分支则需要加一个<code>-b</code></p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">填写分支且不存在该分支</span><br><span class="line">$ git worktree add ../my-feature-branch -b feature-branch</span><br><span class="line">Preparing worktree (new branch <span class="string">&#x27;feature-branch&#x27;</span>)</span><br><span class="line">HEAD is now at 504f1d3 Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不填写分支且不存在该分支</span><br><span class="line">$ git worktree add ../my-feature-branch2</span><br><span class="line">Preparing worktree (new branch <span class="string">&#x27;my-feature-branch2&#x27;</span>)</span><br><span class="line">HEAD is now at 504f1d3 Revert <span class="string">&quot;qevert &quot;</span>revert_test_2<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">  dev2</span><br><span class="line">+ feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git worktree list</span><br><span class="line">C:/Users/Yee/Desktop/gitdome             504f1d3 [dev]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch   504f1d3 [feature-branch]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch2  504f1d3 [my-feature-branch2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">填写分支且存在该分支</span><br><span class="line">$ git worktree add ../dev2</span><br><span class="line">Preparing worktree (checking out <span class="string">&#x27;dev2&#x27;</span>)</span><br><span class="line">HEAD is now at 7ff7fe3 登录功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">+ dev2</span><br><span class="line">+ feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240522201614876.webp" alt="image-20240522201614876"></p>
<p>删除工作目录</p>
<p><code>git worktree remove &lt;path&gt;</code></p>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git worktree remove ../my-feature-branch</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git worktree remove ../dev2</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git worktree list</span><br><span class="line">C:/Users/Yee/Desktop/gitdome             504f1d3 [dev]</span><br><span class="line">C:/Users/Yee/Desktop/my-feature-branch2  504f1d3 [my-feature-branch2]</span><br><span class="line"></span><br><span class="line">Yee@Yee MINGW64 ~/Desktop/gitdome (dev)</span><br><span class="line">$ git branch</span><br><span class="line">  ck_ts</span><br><span class="line">* dev</span><br><span class="line">  dev2</span><br><span class="line">  feature-branch</span><br><span class="line">  hello</span><br><span class="line">  hello2</span><br><span class="line">  main</span><br><span class="line">+ my-feature-branch2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以发现，工作目录虽然删除了，但是分支依旧还在。</p>
<p>特点：</p>
<ul>
<li><p><strong>共享同一个 Git 仓库</strong>：所有工作目录共享同一个 Git 仓库，因此对象存储和引用（如提交、分支、标签）是共享的。</p>
</li>
<li><p><strong>独立的工作树和索引</strong>：每个工作目录都有自己的工作树和索引，因此在一个工作目录中的未提交更改不会影响其他工作目录。</p>
<p>类似贮藏和切换分支</p>
</li>
<li><p><strong>适用于并行开发</strong>：使用 <code>git worktree</code> 可以同时在多个分支上进行开发，而不需要频繁切换分支。</p>
</li>
</ul>
<hr>
<h3 id="999-给命令起别名"><a href="#999-给命令起别名" class="headerlink" title="999.给命令起别名"></a>999.给命令起别名</h3><p>一些指令需要配置一堆参数，每次打的话会浪费很多时间例如查看日志<code>`git log</code>一般都会带以下参数：<code>git log --graph --all --pretty=oneline --abbrev-commit</code></p>
<p>每次都打会很麻烦，这个时候就需要起个别名，每次只要需要打一点指令就可以执行一长串的命令</p>
<blockquote>
<p>alias</p>
</blockquote>
<h3 id="998-Git-Git-钩子-git-scm-com"><a href="#998-Git-Git-钩子-git-scm-com" class="headerlink" title="998.Git - Git 钩子 (git-scm.com)"></a>998.<a href="https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子">Git - Git 钩子 (git-scm.com)</a></h3><h2 id="不同方式本地连接github的方法"><a href="#不同方式本地连接github的方法" class="headerlink" title="不同方式本地连接github的方法"></a>不同方式本地连接github的方法</h2><h3 id="git-bash-命令行"><a href="#git-bash-命令行" class="headerlink" title="git  bash  命令行"></a>git  bash  命令行</h3><h3 id="github-桌面版"><a href="#github-桌面版" class="headerlink" title="github  桌面版"></a>github  桌面版</h3><h3 id="github-GUI"><a href="#github-GUI" class="headerlink" title="github  GUI"></a>github  GUI</h3><h2 id="待续计划"><a href="#待续计划" class="headerlink" title="待续计划"></a>待续计划</h2><ul>
<li>[ ] 变基 rebase</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql中where和join...on连接的区别</title>
    <url>/posts/266da2c0.html</url>
    <content><![CDATA[<h1 id="浅析SQL语句中俩种内连接的区别"><a href="#浅析SQL语句中俩种内连接的区别" class="headerlink" title="浅析SQL语句中俩种内连接的区别"></a>浅析SQL语句中俩种内连接的区别</h1><blockquote>
<p> 在SQL语言中，查询数据总是免不了多表查询，而内连接是我们在日常使用中最经常使用的一种连接查询。而经常使用的内连接中，有人喜欢用<code>INNER JOIN ON</code>这种连接，又有人喜欢用<code>WHERE TAB_1.列名 = tab_2.列名</code>的方式，那么他们又有什么区别呢。</p>
</blockquote>
<div class="note primary modern"><p>primary  2022-06-24发表在csdn的<a href="https://blog.csdn.net/Yee1819/article/details/125437905?spm=1001.2014.3001.5502">文章</a>，移植一下</p>
</div>
<p>首先建立我们要建立几张表</p>
<div class="tabs" id="sql代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="sql代码-1">classes表</button><button type="button" class="tab " data-href="sql代码-2">students表</button><button type="button" class="tab " data-href="sql代码-3">kechen表</button></ul><div class="tab-contents"><div class="tab-item-content active" id="sql代码-1"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">	id <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">PRIMARY</span> KEY  AUTO_INCREMENT,</span><br><span class="line">	class_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    kemu  enum(<span class="string">&#x27;文科&#x27;</span>,<span class="string">&#x27;理科&#x27;</span>,<span class="string">&#x27;艺术&#x27;</span>,<span class="string">&#x27;体育&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes (id,class_name,kemu) </span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;十六班&#x27;</span>,<span class="string">&#x27;理科&#x27;</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;十五班 &#x27;</span>,<span class="string">&#x27;文科&#x27;</span>),</span><br><span class="line">(<span class="number">24</span>,<span class="string">&#x27;二十四班&#x27;</span>,<span class="string">&#x27;艺术&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;八班&#x27;</span>,<span class="string">&#x27;体育&#x27;</span>);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="sql代码-2"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> students(</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    id <span class="type">int</span>(<span class="number">10</span>)  <span class="keyword">PRIMARY</span> KEY  AUTO_INCREMENT,</span><br><span class="line">	sex enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    age  <span class="type">int</span>(<span class="number">5</span>),</span><br><span class="line">    class_id <span class="type">int</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(class_id) <span class="keyword">REFERENCES</span> classes(id)</span><br><span class="line">);</span><br><span class="line">#或用语句单独设置外键</span><br><span class="line">#<span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> <span class="keyword">FOREIGN</span> KEY class_id   <span class="keyword">REFERENCES</span> classes(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (name,id,sex,age,class_id) <span class="keyword">values</span>(<span class="string">&#x27;yxq&#x27;</span>,<span class="number">10001</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="number">16</span>),</span><br><span class="line">(<span class="string">&#x27;yee&#x27;</span>,<span class="number">10002</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="number">16</span>),(<span class="string">&#x27;kkk&#x27;</span>,<span class="number">10003</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">21</span>,<span class="number">16</span>),(<span class="string">&#x27;小明&#x27;</span>,<span class="number">10004</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="number">24</span>),</span><br><span class="line">(<span class="string">&#x27;小红&#x27;</span>,<span class="number">10005</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="number">15</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="sql代码-3"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> kechen(</span><br><span class="line">	k_id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    k_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    k_score <span class="type">int</span>(<span class="number">5</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> kechen <span class="keyword">add</span> <span class="keyword">foreign</span> key(k_id) <span class="keyword">references</span> students(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> kechen(k_id,k_name,k_score)<span class="keyword">values</span>(<span class="number">10001</span>,<span class="string">&#x27;C语言&#x27;</span>,<span class="number">97</span>),</span><br><span class="line">(<span class="number">10001</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">54</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> kechen(k_id,k_name,k_score)<span class="keyword">values</span>(<span class="number">10003</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">10003</span>,<span class="string">&#x27;高等数学&#x27;</span>,<span class="number">59</span>),(<span class="number">10001</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="number">79</span>),(<span class="number">10001</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="number">81</span>),</span><br><span class="line">(<span class="number">10002</span>,<span class="string">&#x27;体育&#x27;</span>,<span class="number">61</span>),(<span class="number">10004</span>,<span class="string">&#x27;美术&#x27;</span>,<span class="string">&#x27;90&#x27;</span>);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p><strong>三张表如下</strong>：</p>
<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">classes表</button><button type="button" class="tab " data-href="-2">students表</button><button type="button" class="tab " data-href="-3">kechen表</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E8%A1%A8%E4%B8%80.png" alt="classes表"></p></div><div class="tab-item-content" id="-2"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E8%A1%A8%E4%B8%89.png" alt="student表"></p></div><div class="tab-item-content" id="-3"><p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E8%A1%A8%E4%BA%8C.png" alt="kemu表"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>现在我们开始连接查询，看看它们有什么不同</p>
<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">where连接</button><button type="button" class="tab " data-href="-2">join...on连接</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> classes,students</span><br><span class="line"><span class="keyword">WHERE</span> classes.id<span class="operator">=</span>students.class_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是<code>WHERE tab_1.列名=tab_2.列名</code>的查询结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E7%AC%AC%E4%B8%80%E7%A7%8D%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="where连接"></p></div><div class="tab-item-content" id="-2"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> classes</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> students</span><br><span class="line"><span class="keyword">ON</span> classes.id<span class="operator">=</span>students.class_id;</span><br></pre></td></tr></table></figure>
<p>这是<code>FROM tab_1 JOIN tab_2 ON tab_1.列名=tab_2.列名</code>连接方式的查询结果:</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownjoin%E8%BF%9E%E6%8E%A5.png" alt="join...in连接"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>我们仔细对比一下，好像并没有什么差别，至少在视觉上的结果上来说 。</p>
<p>但是，事实上真的是如此吗？</p>
<font size=6 color=red>当然不是</font>

<p>这两种连接方式的差别牵扯到<code>效率的快慢</code>。为什么这么说呢？</p>
<p>因为这两个查询方式的顺序的差别。我们再回过头对比一下两种查询语句的区别</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">意义</th>
<th style="text-align:center">WHERE条件查询</th>
<th style="text-align:center">INNER JOIN ON内查询</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">查询内容</td>
<td style="text-align:center">SELECT *</td>
<td style="text-align:center">SELECT *</td>
</tr>
<tr>
<td style="text-align:center">表格连接方式</td>
<td style="text-align:center">FROM classes,students</td>
<td style="text-align:center">FROM classes INNER JOIN students</td>
</tr>
<tr>
<td style="text-align:center">连接条件</td>
<td style="text-align:center">WHERE classes.id=students.class_id;</td>
<td style="text-align:center">ON classes.id=students.class_id;</td>
</tr>
</tbody>
</table>
</div>
<p>我们看到第一步的投影和第三步的条件选择基本没有什么大的差距，问题就出现在第二步的<code>FROM</code>之中！</p>
<p>造成连接方式的效率差距就体现在FROM之中，当查询使用第一种WHERE条件连接的时候，程序会在内部先将classes表和students表<font size=5>先使用笛卡尔积串联在一起</font>，再执行下一步where挑选出两表中的外键连接起来。</p>
<p>而第二种查询使用的是INNER JOIN ON查询，先显示一张表格，再从另外一张表格里挑选出符合条件可连接的元组，之后才连接起来。</p>
<p>看到这里，你可能会嗤之以鼻，觉得这一点的效率无伤大雅，那么数据量大的时候呢，加入两张表都有10w条数据，<font color=greed>使用where连接的话会出现100000*100000=10000000000，100亿条数据！</font>之后再从这一百亿条数据里筛选出符合连接条件的语句，想一想都觉得慢，而INNER JOIN ON内查询的话就能大大增加效率！！</p>
<font size=5 color=red>总而言之,WHERE条件查询 和  INNER JOIN ON内查询的差别在于效率的高低，而查询结果并没有什么不同。</font>

<p>所以，条件允许的话，就请尽量使用<code>JOIN ON</code>连接多个表吧 ！！！</p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java的学习</title>
    <url>/posts/d7d7fe33.html</url>
    <content><![CDATA[<p>JAVA的学习</p>
<p>[toc]</p>
<h2 id="计算机相关知识"><a href="#计算机相关知识" class="headerlink" title="计算机相关知识"></a>计算机相关知识</h2><h3 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h3><ul>
<li>总线</li>
<li><ul>
<li>中央处理器(CPU)</li>
<li>内存（主存）</li>
<li>存储设备（如硬盘，u盘，光盘）</li>
<li>输入设备（键盘，鼠标等）</li>
<li>输出设备（显示器，打印机）</li>
<li>通信设备（调制解调器，网卡）</li>
</ul>
</li>
</ul>
<hr>
<h4 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h4><p>英文缩写cpu，是计算机的大脑，从内存中获取指令，然后执行这些命令。</p>
<p>其中有控制单元：用于控制和协调其他组件的动作<br>算数/逻辑单元：用于完成数值运算（<code>+-*/</code>）和逻辑运算（&gt;&lt;=）</p>
<p>计算机内有个内部时钟，以固定速度发射电子脉冲。时钟速度越快，在固定时间段内的执行指令就越多，速度的计量单位是赫兹（hz），一赫兹相当于每秒一个脉冲，目前的单位是以千兆赫(Ghz)来表述,电脑的频率一般为千兆赫GHZ</p>
<p>1khz=1024hz<br>1mhz=1024khz<br>1ghz=1024mhz</p>
<p>cpu的核是实现指令读取和执行的部分，一个多核cpu是以一个具有俩个或者更多独立核的组件。可提高cpu的处理能力</p>
<p>+++</p>
<h4 id="存储设备"><a href="#存储设备" class="headerlink" title="存储设备"></a>存储设备</h4><p>内存：内存的数据断电缺失</p>
<p>永久存储数据</p>
<p>磁盘驱动器：即磁盘/硬盘，光驱（CD，DVD），USB闪存驱动器（即U盘，通用串行总线），软驱AB盘</p>
<p>+++</p>
<h3 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h3><p>五大结构</p>
<ul>
<li><p>运算器</p>
<p>完成数据加工处理的加工器</p>
</li>
<li><p>控制器</p>
<p>控制程序执行的控制器</p>
</li>
<li><p>存储器</p>
<p>记忆程序和数据的存储器</p>
</li>
<li><p>输入设备</p>
<p>输入数据和程序的输入设备</p>
</li>
<li><p>输出设备</p>
<p>输出处理结果的输出设备</p>
</li>
</ul>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC.webp" alt="冯诺依曼"></p>
<p>+++</p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>计算机是一系列电路开关，0是关，1是开</p>
<p>一个0或者一个1是一个比特（bit），是计算机最小的存储单位。</p>
<p>计算机最基本的存储单元是字节（byte），每个字节由8个比特构成。单位是B<br>千字节(KB)=1024B<br>兆字节(MB)=1024KB<br>千兆字节(GB)=1024MB<br>万兆字节(TB)=1024GB</p>
<p>八个比特存储二进制的最高数是1024 ，所以存储单位进制是1024</p>
<p>内存（RAM） 由一个有序字节序列组成，用于存储程序及程序所需 的数据</p>
<p>cpu如果要调用硬盘 里的数据要优先让内存读取硬盘的数据，再有内存交付给cpu（目的是加快工作效率，硬盘慢CPU快，内存读取速度比硬盘快约10倍）</p>
<p>内存是带点存储，断电消失，容量有限，长期存储还得靠硬盘</p>
<p>内存在这一步起到的作用：</p>
<ol>
<li>保存从硬盘读取的数据，提供给cpu使用</li>
<li>保存cpu的一些临时处理结果，以便下次使用或保存到硬盘</li>
</ol>
<p>RAM最多，速度越快，但是有上限</p>
<p>+++</p>
<h4 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h4><p>鼠标、键盘</p>
<p>显示器、打印机</p>
<p>+++</p>
<h4 id="通信设备"><a href="#通信设备" class="headerlink" title="通信设备"></a>通信设备</h4><p>拨号调制解调器、DSL（数字用户线）、无线网络、网络接口卡、电缆调制解调器</p>
<p>+++</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>管理和控制计算机的活动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> |----------------------|</span><br><span class="line"> V						V</span><br><span class="line">用户&lt;----&gt;应用程序&lt;---&gt;操作系统&lt;------&gt;硬件</span><br></pre></td></tr></table></figure>
<p>操作系统的主要任务：</p>
<ul>
<li>控制和监视系统的活动</li>
<li>分配和调配系统资源</li>
<li>调度操作</li>
</ul>
<p>+++</p>
<h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>world wide web分为web客户端和web服务器程序。</p>
<p>www可以让web客户端（浏览器）访问web服务器的页面（网页）</p>
<p>URL统一资源定位符</p>
<p>URI统一资源标识符</p>
<p>超文本传输协议（Hypetext Transfer Protocol）<strong>http协议，https协议是具有安全性的ssl加密传输协议</strong></p>
<p>万维网包含于因特网，因特网包含于互联网</p>
<p>架构：<br>B/S<br>browser server  （通过浏览器访问服务器）</p>
<p>C/S<br>client  server（通过客户端访问服务器） </p>
<p>+++</p>
<h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><p>用win+R输出cmd调出命令提示符</p>
<p>切换盘</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">d</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\&gt;</span></span><br></pre></td></tr></table></figure>
<p>dir：列出当前目录下的所有文件及文件夹</p>
<p>md：创建目录</p>
<p>rd：删除目录</p>
<p>cd：进入指定目录</p>
<p>cd..：返回上一级目录</p>
<p>cd\：返回根目录</p>
<p>del：删除文件</p>
<p>exit： 退出dos命令行</p>
<p>+++</p>
<h4 id="创建目录-移动目录-列出目录实例"><a href="#创建目录-移动目录-列出目录实例" class="headerlink" title="创建目录/移动目录/列出目录实例"></a>创建目录/移动目录/列出目录实例</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">dir</span></span></span><br><span class="line"><span class="function"> 驱动器 <span class="title">C</span> 中的卷是 <span class="title">OS</span></span></span><br><span class="line"><span class="function"> 卷的序列号是 4805-<span class="title">CB1A</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span> 的目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          .</span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          ..</span></span><br><span class="line"><span class="function">2022/05/05  12:33    &lt;<span class="title">DIR</span>&gt;          .<span class="title">anaconda</span></span></span><br><span class="line"><span class="function">2022/05/25  22:09    &lt;<span class="title">DIR</span>&gt;          .<span class="title">android</span></span></span><br><span class="line"><span class="function">2022/04/21  12:31    &lt;<span class="title">DIR</span>&gt;          .<span class="title">cache</span></span></span><br><span class="line"><span class="function">2022/05/14  01:59    &lt;<span class="title">DIR</span>&gt;          .<span class="title">conda</span></span></span><br><span class="line"><span class="function">2022/05/05  12:35                25 .<span class="title">condarc</span></span></span><br><span class="line"><span class="function">2022/05/05  12:32    &lt;<span class="title">DIR</span>&gt;          .<span class="title">continuum</span></span></span><br><span class="line"><span class="function">2022/04/21  12:31    &lt;<span class="title">DIR</span>&gt;          .<span class="title">eclipse</span></span></span><br><span class="line"><span class="function">2022/05/14  01:44    &lt;<span class="title">DIR</span>&gt;          .<span class="title">idlerc</span></span></span><br><span class="line"><span class="function">2022/05/05  12:49    &lt;<span class="title">DIR</span>&gt;          .<span class="title">ipython</span></span></span><br><span class="line"><span class="function">2022/05/05  12:49    &lt;<span class="title">DIR</span>&gt;          .<span class="title">matplotlib</span></span></span><br><span class="line"><span class="function">2022/03/25  20:04    &lt;<span class="title">DIR</span>&gt;          .<span class="title">Origin</span></span></span><br><span class="line"><span class="function">2022/04/24  23:12    &lt;<span class="title">DIR</span>&gt;          .<span class="title">p2</span></span></span><br><span class="line"><span class="function">2022/05/14  02:08                27 .<span class="title">python_history</span></span></span><br><span class="line"><span class="function">2022/03/25  20:04    &lt;<span class="title">DIR</span>&gt;          .<span class="title">QtWebEngineProcess</span></span></span><br><span class="line"><span class="function">2022/04/23  17:45    &lt;<span class="title">DIR</span>&gt;          .<span class="title">redhat</span></span></span><br><span class="line"><span class="function">2022/05/14  01:58    &lt;<span class="title">DIR</span>&gt;          .<span class="title">spyder</span>-<span class="title">py3</span></span></span><br><span class="line"><span class="function">2022/01/11  13:22    &lt;<span class="title">DIR</span>&gt;          .<span class="title">vscode</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          3<span class="title">D</span> <span class="title">Objects</span></span></span><br><span class="line"><span class="function">2021/10/17  14:14    &lt;<span class="title">DIR</span>&gt;          <span class="title">ansel</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Contacts</span></span></span><br><span class="line"><span class="function">2022/04/14  13:25    &lt;<span class="title">DIR</span>&gt;          <span class="title">Creative</span> <span class="title">Cloud</span> <span class="title">Files</span></span></span><br><span class="line"><span class="function">2022/07/30  15:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Desktop</span></span></span><br><span class="line"><span class="function">2022/07/27  01:54    &lt;<span class="title">DIR</span>&gt;          <span class="title">Documents</span></span></span><br><span class="line"><span class="function">2022/05/28  19:50    &lt;<span class="title">DIR</span>&gt;          <span class="title">Downloads</span></span></span><br><span class="line"><span class="function">2022/04/21  12:23    &lt;<span class="title">DIR</span>&gt;          <span class="title">eclipse</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Favorites</span></span></span><br><span class="line"><span class="function">2022/05/05  12:50    &lt;<span class="title">DIR</span>&gt;          <span class="title">Jedi</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Links</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Music</span></span></span><br><span class="line"><span class="function">2022/08/01  17:45    &lt;<span class="title">DIR</span>&gt;          <span class="title">OneDrive</span></span></span><br><span class="line"><span class="function">2022/04/25  00:24    &lt;<span class="title">DIR</span>&gt;          <span class="title">Pictures</span></span></span><br><span class="line"><span class="function">2021/10/15  20:36    &lt;<span class="title">DIR</span>&gt;          <span class="title">Saved</span> <span class="title">Games</span></span></span><br><span class="line"><span class="function">2021/10/15  20:38    &lt;<span class="title">DIR</span>&gt;          <span class="title">Searches</span></span></span><br><span class="line"><span class="function">2021/10/22  14:53    &lt;<span class="title">DIR</span>&gt;          <span class="title">source</span></span></span><br><span class="line"><span class="function">2022/08/01  17:41    &lt;<span class="title">DIR</span>&gt;          <span class="title">Videos</span></span></span><br><span class="line"><span class="function">2022/05/11  16:14    &lt;<span class="title">DIR</span>&gt;          编程</span></span><br><span class="line"><span class="function">               2 个文件             52 字节</span></span><br><span class="line"><span class="function">              36 个目录 30,808,530,944 可用字节</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">md</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">hello.java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">md</span> <span class="title">class2</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span> <span class="title">class2</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class2</span>&gt;<span class="title">cd</span> ..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span>\</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801224825370.png" alt="image-20220801224825370"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801224845030.png" alt="image-20220801224845030"></p>
<p>+++</p>
<h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">echo</span> <span class="title">hello</span>,<span class="title">my</span> <span class="title">name</span> <span class="title">is</span> 66&gt;1.<span class="title">txt</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801225749867.png" alt="image-20220801225749867"></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">echo</span> <span class="title">hello</span>,<span class="title">my</span> <span class="title">name</span> <span class="title">is</span> <span class="title">xingtong</span>&gt;1.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801225845111.png" alt="image-20220801225845111"></p>
<p>echo指令是替代文件内容到某个文件，若无文件则创建，若存在则替代</p>
<p>+++</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">del</span> 1.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230251871.png" alt="image-20220801230251871"></p>
<p>+++</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用del可以删除文件</p>
<p>如果想批量删除一个格式的文件,如图所示有很多txt格式的文件</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230502053.png" alt="image-20220801230502053"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Yee\java&gt;del *.txt</span><br><span class="line">//*类似sql的*</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801230552004.png" alt="image-20220801230552004"></p>
<p>+++</p>
<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">hello.java</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801231123355.png" alt="image-20220801231123355"></p>
<font size=5 color=red >当目录不为空，不允许删除</font>

<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">cd</span>..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">rd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function">目录不是空的。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<font size=5 color=red>当文件夹不为空又想删除时，在上一级目录使用del进行删除所有文件，再删除目录</font>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Yee&gt;cd java</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java&gt;cd class1</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java\class1&gt;echo hello,world&gt;1.docx</span><br><span class="line"></span><br><span class="line">C:\Users\Yee\java\class1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801231706768.png" alt="image-20220801231706768"></p>
<p>此时我的class1目录下的文件不为空</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class1</span>&gt;<span class="title">cd</span>..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function">目录不是空的。</span></span><br></pre></td></tr></table></figure>
<p>提示我不能删除</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Yee</span>&gt;<span class="title">cd</span> <span class="title">java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">del</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>\<span class="title">class1</span>\*, 是否确认(<span class="title">Y</span>/<span class="title">N</span>)? <span class="title">Y</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;<span class="title">rd</span> <span class="title">class1</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Yee</span>\<span class="title">java</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220801232037632.png" alt="image-20220801232037632"></p>
<p>就能删除了</p>
<p>+++</p>
<h2 id="浅识JAVA"><a href="#浅识JAVA" class="headerlink" title="浅识JAVA"></a>浅识JAVA</h2><p>  人机交互方式</p>
<p>图形化界面（GUI）、命令行方式（CLI）</p>
<p>JAVASE   标准版   支持面向桌面型应用</p>
<p>JAVAEE   企业版    开发企业环境下的应用程序解决方案针对Web应用程序开发</p>
<p>JAVAME  小型版    支持JAVA移动端的平台</p>
<p>JAVA Card    支持java小程序</p>
<p>+++</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>三大特征：封装，多态，继承</p>
<p>基本概念：类，对象</p>
<p>+++</p>
<h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>吸收C/C++的特点，去掉C/C++的一些容易弄错的点，例如指针、内存申请与释放，多继承等等，提供一个相对安全的内存管理和访问机制</p>
<p>+++</p>
<h3 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h3><p>由于java程序的特点，使用虚拟机（JVM）运行，可以在多个平台（windows，linux等等）上运行同一个java程序。</p>
<p>+++</p>
<h3 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h3><p>java虚拟机：JVM</p>
<p>垃圾收集机制</p>
<p>+++</p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>java开发工具包，其中包括JAVA开发工具和jre，开发工具包含：编译工具（javac.exe）和打包工具(jar.exe)等</p>
<p>+++</p>
<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>包括java虚拟机(JVM)和JAVA程序的核心类库，想运行JAVA程序只需要有JRE就好</p>
<p>+++</p>
<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>java运行的环境，虚拟机</p>
<p>+++</p>
<h3 id="用命令行运行java程序"><a href="#用命令行运行java程序" class="headerlink" title="用命令行运行java程序"></a>用命令行运行java程序</h3><p>用记事本写好一个java程序，修改后缀为java</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220802192446930.png" alt="image-20220802192446930"></p>
<p>在cmd里实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编译</span></span><br><span class="line">C:\Users\Yee\java\class2&gt;javac hello.java</span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line">C:\Users\Yee\java\class2&gt;java hello</span><br><span class="line">hello,world</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>与c/c++一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是文档注释</span></span><br><span class="line"><span class="comment">会被java内置的jdk提供的javadoc解析，生成一套以网页形式体现的该程序的说明文档</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>以下是大概的使用方法概述</p>
<p>首先先写一个java程序，里面包含文档注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">@author</span> yxq</span></span><br><span class="line"><span class="comment"> <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> 测试文档的用法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要设置环境变量jdk才能通过命令行打开javadoc</p>
<p>小技巧，在需要打开cmd的路径前加上cmd和空格点回车打开的cmd就是当前目录下的cmd</p>
<p>或者直接在目录上输入cmd打开的cmd也是目录下的cmd</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803151328647.png" alt="image-20220803151328647"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//命令行语句（尚硅谷讲的是）</span></span><br><span class="line">javadoc -d  建立一个新文件夹的文件夹名  -author -version java文件名</span><br><span class="line"><span class="comment">//csdn查的资料是</span></span><br><span class="line">javadoc -encoding UTF-<span class="number">8</span> -charset UTF-<span class="number">8</span> Doc.java</span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>也可以用idea等编译器生成文档</p>
<p>这里是idea的生成文档使用方法</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803152220242.png" alt="image-20220803152220242"></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803152356217.png" alt="image-20220803152356217"></p>
<p>遇到了几个问题javadoc:错误 - 无法读取 Input lenght=1 </p>
<p>不能生成文档，是因为不能存在中文路径名。换成英文就可以了。</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownimage-20220803153330401.png" alt="image-20220803153330401"></p>
<p>这样就能生成使用文档了</p>
<p>+++</p>
<h3 id="java-api-文档"><a href="#java-api-文档" class="headerlink" title="java     api   文档"></a>java     api   文档</h3><p>api 是接口</p>
<p>讲解了各个类名使用方法</p>
<p>+++</p>
<h3 id="程序编写注意事项"><a href="#程序编写注意事项" class="headerlink" title="程序编写注意事项"></a>程序编写注意事项</h3><p>一个java文件中，可以有多个class</p>
<p>但是只能有一个public class </p>
<p>并且public class 后面的类名与文件名相同</p>
<p>程序的入口是main()方法格式 是固定的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//args 是一个单词的缩写arguments 参数  可变</span></span><br><span class="line"><span class="comment">//即</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可运行</span></span><br><span class="line"><span class="comment">//中括号可以变</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String  a[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可运行</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>编译后会生成一个或多个字节码文件，文件名与数量与java文件的class名字数量相同。</p>
<p>+++</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>+++</p>
<h3 id="关键字保留字"><a href="#关键字保留字" class="headerlink" title="关键字保留字"></a>关键字保留字</h3><p>关键字：由java语言赋予特殊功能的单词或者字符串</p>
<p>保留字：现版本Java未使用，但以后的版本可能会使用，尽量避开使用例如goto、const</p>
<p>+++</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量、方法、类，接口，包命名时使用的字符序列称为标识符（只要是能命名的都是标识符）</p>
<p>定义规则：由26个字母大小写，0-9  十个数字，_下划线,$，组成</p>
<p>注意：</p>
<ul>
<li>数字不可以开头</li>
<li>不能使用关键字和保留字，可以包含关键字例如int是关键字不能使用，int_1可以使用</li>
<li>java区分大小写，长度无限制</li>
<li><p>标识符不能包含空格</p>
</li>
<li><p>标识符可以为中文，但是尽量不用，以免造成编码不一致等等问题</p>
</li>
</ul>
<p>+++</p>
<p>命名规范（不是强制要求，只是建议，增强代码可读性）</p>
<ul>
<li>包名多单词组成时全小写，不同单词用__链接例如:     java_start_day1</li>
<li>类名、接口名：多单词组成时，首字母大写:   JavaStartDay1</li>
<li>变量名、方法名：多单词组成，第一个单词小写首字母，后面的单词首字母大写 ：javaStartDay1</li>
<li>常量名:所有字母大写，用下划线连接：JAVA_START_DAY1</li>
</ul>
<p>+++</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量存在于内存中一个存储区域</p>
<p>该区域的数据在同一类型范围内不断变化</p>
<p>变量是程序中最基本的存储单元，包含变量类型、变量名、存储的值</p>
<p>变量用于在内存中保存数据</p>
<p>变量必须先声明后使用</p>
<p>用变量名访问这块区域的数据</p>
<p>变量的作用域一般为所定义的{}内</p>
<p>变量在作用域中才可生效</p>
<p>同一个作用域中，不可以定义重名的变量 </p>
<p>+++</p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>+++</p>
<p>基本数据类型</p>
<p>整形：byte、short、int、long</p>
<p>浮点型：float、double</p>
<p>字符型：char</p>
<p>布尔型：boolean</p>
<p>+++</p>
<p>引用数据类型</p>
<p>类（class）、接口（interface）、数组（array）</p>
<p>+++</p>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>8bit位(1byte)</td>
<td><code>-128~127</code>即-2^7^<code>~</code>2^7^-1</td>
</tr>
<tr>
<td>short</td>
<td>16bit位(2byte)</td>
<td><code>-32768~32767</code>即-2^15^~2^15^-1</td>
</tr>
<tr>
<td>int</td>
<td>32bit(4byte)</td>
<td><code>-2147483648~2147483647</code>即-2^31^~2^31^-1</td>
</tr>
<tr>
<td>long</td>
<td>64bit(8byte)</td>
<td><code>-9223372036854775808~9223372036854775807</code>即-2^63^~2^63^-1</td>
</tr>
<tr>
<td>char</td>
<td>16bit</td>
<td><code>&#39;\u0000&#39;~&#39;\uffff&#39;</code>即0~65535</td>
</tr>
</tbody>
</table>
</div>
<p>赋值long的时候需要在末尾加一个L或l</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long a=23123213L;</span><br><span class="line">long b=231232131l;                                                                                       </span><br><span class="line">int c=2313;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>单精度float,精确到小数点后7位数</p>
<p>双精度double，精度是float的俩倍</p>
<p>浮点型由两种表达方式</p>
<p>十进制：4.23      42.33f     3.00</p>
<p>科学计数法：2.19e4   4.44E5   100e-2</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4byte</td>
<td>-3.403E38~3.403E38</td>
</tr>
<tr>
<td>double</td>
<td>8byte</td>
<td>-1.798E308~1.798E308</td>
</tr>
</tbody>
</table>
</div>
<p>java定义浮点型默认为double，声名float型常量则需要在后面加==f或F==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> a=<span class="number">5.32f</span>;</span><br><span class="line"><span class="type">float</span> b=<span class="number">4.55F</span>;</span><br><span class="line"><span class="type">double</span> c=<span class="number">3.45</span>;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>char  1字符=2字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义char型变量，用&#x27;&#x27;；</span></span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//一个char只能存储一个字符</span></span><br><span class="line"><span class="type">char</span> cc=<span class="string">&#x27;ab&#x27;</span>;<span class="comment">//错误</span></span><br><span class="line"><span class="comment">//可以输入中文或者数字或者其他国家语言</span></span><br><span class="line"><span class="type">char</span> ccc=<span class="string">&#x27;啊&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c2=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="comment">//也可以存储一个符号,包括转义子符</span></span><br><span class="line"><span class="type">char</span> c3=<span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c4=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">//可以用unicode</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;\u0043&#x27;</span>;<span class="comment">//是C</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\ddd</td>
<td>1~3位八进制数表示的字符</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>1~4位十六进制表示的字符</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号’</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号”</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠\</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>走纸换页</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符tab键</td>
</tr>
</tbody>
</table>
</div>
<p>+++</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>boolean只有两个值==true和false==,即真与否</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> a=<span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> b=flase;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>自动类型提升</p>
<p>范围小的和范围大的相运算，应用范围大的类型接收结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">223</span>;</span><br><span class="line"><span class="type">byte</span> c=a+b;<span class="comment">//错误</span></span><br><span class="line"><span class="type">int</span> c=a+b;<span class="comment">//正确</span></span><br><span class="line"><span class="type">long</span> c=a+b;<span class="comment">//正确</span></span><br><span class="line"><span class="type">double</span> c=a+b;</span><br><span class="line">c=<span class="number">235.0</span></span><br><span class="line"><span class="comment">//而整型与浮点型运算都自动提升到浮点型</span></span><br><span class="line"><span class="comment">//char 与整型运算</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> a1=a+c;<span class="comment">//a1=98</span></span><br><span class="line"><span class="comment">//当char   byte    short   三个类型进行运算时，自动转化为int型</span></span><br><span class="line"><span class="type">byte</span> aa=<span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> a2=<span class="number">32</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//无论byte、short、char三种运算最后的结果由byte、short、char接收都不会成功</span></span><br><span class="line"><span class="type">byte</span>、<span class="type">char</span>、<span class="type">short</span>-&gt;<span class="type">int</span> -&gt;<span class="type">long</span>-&gt;<span class="type">float</span>-&gt;<span class="type">double</span></span><br><span class="line"><span class="comment">//高等级转化到低等级会出错</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>强制类型转换</p>
<p>byte、short、char运算时该怎么办呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> b=<span class="number">33</span>;</span><br><span class="line"><span class="type">short</span> c=a+b;<span class="comment">//错误</span></span><br><span class="line"><span class="type">short</span> c= (<span class="type">short</span>) (a+b);<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//强制转换会造成精度损失</span></span><br><span class="line"><span class="comment">//浮点型变为整数型损失小数部分</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> b=(<span class="type">int</span>)a;<span class="comment">//b=12</span></span><br><span class="line"><span class="comment">//超过数的精度时</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> b=(<span class="type">byte</span>)i;b=-<span class="number">128</span><span class="comment">//与二进制存储有关</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>当long型定义时忘记写L时，会认为定义是int型，自动提升为long型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> l1=<span class="number">123213</span>;</span><br><span class="line"><span class="type">long</span> l2=<span class="number">22312312312312312111</span>;<span class="comment">//会报错，int型不允许这么长的变量存在，所以也就没了转化为long型的可能性</span></span><br><span class="line"><span class="comment">//同理，float型也是</span></span><br><span class="line"><span class="type">float</span> f1=<span class="number">12.3</span>;<span class="comment">//错误，默认为double，向下转换类型时失败，不允许向下自转</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>整型常量默认int，浮点型默认double</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> b=<span class="number">12</span>;</span><br><span class="line"><span class="type">byte</span> b1=b+<span class="number">1</span>;<span class="comment">//编译出错，因为，1默认int型，导致b自动提升为int型，不能自动转化会byte，导致出错</span></span><br><span class="line"><span class="type">float</span> a=<span class="number">1.23f</span>;</span><br><span class="line"><span class="type">float</span> b=a+<span class="number">1.1</span>;<span class="comment">//出错，理由同上。</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><p>引用数据类型，不算基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明String</span></span><br><span class="line">String ch=<span class="string">&quot;1231232你好那&quot;</span>;</span><br><span class="line"><span class="comment">//使用双引号，字符串。</span></span><br><span class="line"><span class="comment">//String可以和八种基本类型做运算，即连接运算</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">99999</span>;</span><br><span class="line">String b=<span class="string">&quot;你好，&quot;</span>;</span><br><span class="line">String c=a+b;<span class="comment">//c=&quot;你好，99999&quot;</span></span><br><span class="line"><span class="comment">//其他逻辑、浮点型，布尔型等等都可以连接,以String型接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="type">char</span> ch=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">String str=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(ch+num+str);<span class="comment">//107hello</span></span><br><span class="line">System.out.println(ch+str+num);<span class="comment">//ahello10</span></span><br><span class="line">System.out.println(ch+(num+str));<span class="comment">//ahello10</span></span><br><span class="line">System.out.println((ch+num)+str);<span class="comment">//107hello</span></span><br><span class="line">System.out.println(str+num+ch);<span class="comment">//hello10a</span></span><br><span class="line"><span class="comment">//string和多种数据类型计算时是根据左到右的顺序计算</span></span><br><span class="line"><span class="comment">//只要遇到string，后面的都是string连接了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x27;a&#x27;+&#x27;b&#x27;+&#x27;c&#x27;和&quot;a&quot;+&#x27;b&#x27;+&#x27;c&#x27;不一样,字符型加号是做运算，字符串加号是连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String 转化为int型的方法为</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span>  Integer.parseInt(str1);</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>计算机常用八进制，二进制，十六进制，十进制。</p>
<p>二进制   0b   0B   开头</p>
<p>八进制   0o   0O 开头</p>
<p>十六进制  0x   0X   开头   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">0b1100</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">1100</span>; <span class="comment">//十进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> 0o127;<span class="comment">//八进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">0x1100</span>;<span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure>
<p>计算机内最高位    0正数    1负数</p>
<p>计算机底层以补码的方式存储数据！</p>
<p>二进制转八进制，三位二进制数看成一位八进制数范围0-7，八进制转二进制，每一个数字转为三位二进制数字拼接</p>
<p>二进制于十六进制转换也是如此</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">二进制 <span class="number">000</span> <span class="number">101</span> <span class="number">111</span></span><br><span class="line">八进制  <span class="number">0</span>   <span class="number">5</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span></span><br><span class="line">   </span><br><span class="line">-</span><br><span class="line"><span class="number">2</span>-<span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">*</span><br><span class="line"><span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span></span><br><span class="line">/</span><br><span class="line"><span class="number">40</span>/<span class="number">8</span>=<span class="number">5</span></span><br><span class="line"><span class="number">41</span>/<span class="number">8</span>=<span class="number">5</span><span class="comment">//自动转int取整    </span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41</span>/<span class="number">8</span>;<span class="comment">//a=5.0</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41</span>/(<span class="type">double</span>)<span class="number">8</span>;<span class="comment">//5.125</span></span><br><span class="line"><span class="type">double</span> a=<span class="number">41.0</span>/<span class="number">8</span>;<span class="comment">//5.125</span></span><br><span class="line">%</span><br><span class="line"><span class="number">41</span>%<span class="number">8</span>=<span class="number">1</span></span><br><span class="line">-<span class="number">41</span>%<span class="number">8</span>=-<span class="number">1</span></span><br><span class="line"><span class="number">41</span>%-<span class="number">8</span>=<span class="number">1</span></span><br><span class="line">-<span class="number">41</span>%-<span class="number">8</span>=-<span class="number">1</span></span><br><span class="line"><span class="comment">//被模数符号决定了    </span></span><br><span class="line">++</span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line">x=++i;<span class="comment">//x=2</span></span><br><span class="line">y=i++；<span class="comment">//y=1</span></span><br><span class="line">运算符在前面的先运算在赋值</span><br><span class="line">运算符在后面则先赋值再运算</span><br><span class="line">--</span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line">x=--i;<span class="comment">//x=0</span></span><br><span class="line">y=i--；<span class="comment">//y=1</span></span><br><span class="line"><span class="comment">//自增自减的时候不会自动转化为int型，即不改变变量本身数据类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td><code>赋值,a=3,c=b=6;</code></td>
</tr>
<tr>
<td><code>+=</code></td>
<td><code>a+=4同a=a+4</code></td>
</tr>
<tr>
<td><code>-=</code></td>
<td><code>a-=4同a=a-4</code></td>
</tr>
<tr>
<td><code>/=</code></td>
<td><code>a/=4同a=a/4</code></td>
</tr>
<tr>
<td><code>%=</code></td>
<td><code>a%=4同a=a%4</code></td>
</tr>
<tr>
<td><code>*=</code></td>
<td><code>a*=4同a=a*4</code></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>注意，a+=5与a=a+5,不同点，前者不会改变数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//即</span></span><br><span class="line"><span class="type">short</span> a=<span class="number">5</span>;</span><br><span class="line">a+=<span class="number">5</span>;<span class="comment">//不会出错</span></span><br><span class="line">a=a+<span class="number">5</span>;<span class="comment">//a会先转int型，导致不能转化更小级别的short，出错</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>运算</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==</code></td>
<td>等于</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
<tr>
<td><code>instanceof</code></td>
<td>检查是否属于对象”hello” instanceof String   返回true</td>
</tr>
</tbody>
</table>
</div>
<p>运算结果均为布尔型</p>
<p>+++</p>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>短路与</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
<td>逻辑或</td>
</tr>
<tr>
<td>`</td>
<td></td>
<td>`</td>
<td>短路或</td>
</tr>
<tr>
<td><code>^</code></td>
<td>异或</td>
</tr>
<tr>
<td><code>!</code></td>
<td>非</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp;与&amp;&amp; 的区别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> a1=<span class="literal">false</span>,a2=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>,num2=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(a1&amp;(num1++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a2&amp;&amp;(num2++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//num1 = 11</span></span><br><span class="line"><span class="comment">//num2 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与和短路与的区别就在这里，当前面的判断有一个为false时，短路与  后面的语句不会运算，逻辑与   会继续运算</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  |   与   ||   的区别</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> a1=<span class="literal">true</span>,a2=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>,num2=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(a1|(num1++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a2||(num2++&gt;<span class="number">0</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num1 = 11</span></span><br><span class="line"><span class="comment">//num2 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//短路或在获得一个true条件时，不会继续后面的运算，而逻辑或会继续运算</span></span><br></pre></td></tr></table></figure>
<p>短路与和短路或效率稍微高一些</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>a&amp;b</th>
<th>a&amp;&amp;b</th>
<th>`a</th>
<th>b`</th>
<th>`a</th>
<th></th>
<th>b`</th>
<th><code>!a</code></th>
<th><code>b^a</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
</tbody>
</table>
</div>
<p>异或：先取反，在判断是否或</p>
<p>+++</p>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">位运算符</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:left">异或，两个二进制数中位数相同为0，不相同为1</td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:left">`</td>
<td>或，返回两位数都为0的值，否则返回1</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:left">取反，把二进制数的0变为1，1变为0</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;&gt;</code></td>
<td style="text-align:left">右移，a&gt;&gt;n,把a的二进制数向右移动n位，相当于a=a//2^n^，可以做除法,当a&gt;&gt;1的时候相当于a//2</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;</code></td>
<td style="text-align:left">左移，a&lt;&lt;n,把a的二进制数向左移动n位，相当于a=a<code>*</code>2^n^，可以做除法,当a&lt;&lt;1的时候相当于a<code>*</code>2</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:left">与，返回两位二进制数都为1 的部分，可以判断奇偶，例3&amp;1=1，2&amp;1=0，1的二进制是01，2是10，3是11，1&amp;3即01与11都为1 的数是个位的1，2&amp;1没有相同位数上的1，即为0，通过这样的方式判断奇偶</td>
</tr>
</tbody>
</table>
</div>
<p>这里是异或的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/位运算的异或.png"/></p>
<p>这里是或的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/位运算的或.png"/></p>
<p>这里是取反示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%96%E5%8F%8D.png" alt="位运算取反"></p>
<p>这里是左移与右移</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B7%A6%E7%A7%BB%E5%8F%B3%E7%A7%BB.png" alt="位运算左移右移"></p>
<p>这里是与的示例</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E4%B8%8E&amp;.png" alt="位运算的与&amp;"></p>
<blockquote>
<p>补充：右移时，如果是负数，用1补左边，正数用0补前面</p>
<p><code>&gt;&gt;&gt;</code>无符号右移，无论正数负数都是左边补0</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//位运算的一些小用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 交换值</span></span><br><span class="line"><span class="type">int</span> num1=<span class="number">1</span>,num2=<span class="number">2</span>;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p> 格式：条件表达式 ?  表达式1:表达式2</p>
<p>符合条件表达式进入表达式1，否则进入表达式2</p>
<p>类似： if (条件表达式){<br>    表达式1<br>}else{<br>    表达式2<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">99</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (num1+<span class="number">1</span>&gt;=<span class="number">100</span>)?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">99</span>;</span><br><span class="line">        String str ;</span><br><span class="line">        <span class="keyword">if</span>(num1+<span class="number">1</span>&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">            str = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            str = <span class="string">&quot;no&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表达式有数据类型要求，字符串和整型不能同时满足</p>
<p>故三元运算可以转化 if-else  结构  但是   if_else 结构 不一定可以转化三元运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">(n&gt;m)?<span class="string">&quot;m大&quot;</span>:<span class="number">55</span>;<span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>
<p>三元运算可以嵌套使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">in</span> <span class="operator">=</span> ( n &gt; m)  ? <span class="string">&quot;n大&quot;</span> : ( ( n &lt; m) ? <span class="string">&quot;m大&quot;</span> : <span class="string">&quot;一样大&quot;</span> ) ;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>三元运算、单目运算，赋值运算是从右往左运算的，其他都是从左往右运算</p>
<p>+++</p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制 大体可以分为  顺序结构，分支结构和循环结构</p>
<p>+++</p>
<h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>顺序结构 即按照顺序从上往下一步一步地执行语句</p>
<p>+++</p>
<h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><h5 id="if-else分支"><a href="#if-else分支" class="headerlink" title="if-else分支"></a>if-else分支</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">a</span>  <span class="operator">=</span>  <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    若为 <span class="literal">false</span> 执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分支可以嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(判断语句)&#123;</span><br><span class="line">    若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        <span class="keyword">if</span>(判断语句<span class="number">2</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">if</span>(判断语句<span class="number">3</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            若为  <span class="literal">false</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断语句<span class="number">5</span>)&#123;</span><br><span class="line">    若为 <span class="literal">false</span> 执行语句</span><br><span class="line">        <span class="keyword">if</span>(判断语句<span class="number">4</span>)&#123;</span><br><span class="line">            若为  <span class="literal">true</span> 执行语句</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            若为  <span class="literal">false</span> 执行语句</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断语句<span class="number">6</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中default可以省略，作为不满足所有case条件的补充</span></span><br><span class="line"><span class="comment">//再有，case条件内若无break，执行完结构语句则玩下继续执行下一个内容</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        结构<span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        结构<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即表达式是1，进入case1，执行结构1，此时无case，继续执行结构2，遇到break，退出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        结构<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        结构<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        结构;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="comment">//若为这个情况，表达式值为1，则执行结构1遇到则退出</span></span><br></pre></td></tr></table></figure>
<p>switch结构表达式的值为   int 、byte 、 short 、 char 、 枚举类型（jdk1.5新增）、 String（jdk1.7新增）</p>
<p>default可以不放在末尾，运行会查看满不满足case，不满族进入default，运算后检测若无break，则继续往下运行。</p>
<p>+++</p>
<h5 id="另一种switch结构"><a href="#另一种switch结构" class="headerlink" title="另一种switch结构"></a>另一种switch结构</h5><p>在写代码的过程中使用switch结构，当忘记了break的书写，稍稍不留心就会出大茬子，在jdk12之中引入了一种新的switch结构，可以不需要break就可以实现结束switch结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(n*<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(n);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;不是1也不是2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">&gt;&gt;<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;<span class="number">3</span></span><br><span class="line">不是<span class="number">1</span>也不是<span class="number">2</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，当case里有许多语句时，需要用括号括起来，不加括号会报错</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(n*<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                System.out.println(n);</span><br><span class="line">                System.out.println(<span class="string">&quot;这是2&quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;不是1也不是2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//新的switch语法可以返回值</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  arg)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> x=<span class="keyword">switch</span>(n)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; n*<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; n+<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="number">0</span>;</span><br><span class="line">        &#125;;<span class="comment">//注意这里需要分号结尾</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的x接收了switch返回的值。</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>+++</p>
<h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始表达式[可省略，放置循环体外]:迭代条件[不可省略，为布尔值，为<span class="literal">true</span>运行，<span class="literal">false</span>退出循环]:迭代表达式[可省略，放置循环体内])&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125;</span><br><span class="line">与c语言相同</span><br><span class="line"><span class="comment">//迭代条件可以为空，可以省略，会导致死循环，需要设置break。    </span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件[布尔值，<span class="literal">true</span>进入循环，<span class="literal">false</span>退出])&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="do…-while循环"><a href="#do…-while循环" class="headerlink" title="do….while循环"></a>do….while循环</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	循环体;    </span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件[布尔值，<span class="literal">true</span>进入循环，<span class="literal">false</span>退出]);</span><br><span class="line"><span class="comment">//do...while 循环与while循环的差距是while循环进入时判断条件是否为true，是进入循环，false则退出循环。</span></span><br><span class="line"><span class="comment">//do...while循环不论条件是否为false，都会进行一次循环，再判断条件是否成立选择退出还是继续循环</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<ul>
<li><p>循环语句的条件判断可以是true</p>
</li>
<li><p>在循环语句里设置break可以跳出循环，可以搭配if条件选择使用。</p>
</li>
<li>循环可以嵌套使用，多使用一层循环会导致计算时间大幅度上升，慎用多级嵌套</li>
<li></li>
</ul>
<p>++++</p>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>从输入设备输入数据是需要使用Scanner对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//也可以使用    import  java.util.*     使用所有java的util包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scannertest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Scanner对象实例化</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//oo即为实例化的Scanner对象</span></span><br><span class="line">        <span class="comment">//Scanner对象的方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> oo.nextInt();<span class="comment">//nextInt 是指接收数字</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">panduan</span> <span class="operator">=</span> in.nextBoolean();</span><br><span class="line"></span><br><span class="line">Scanner未定义接收<span class="type">char</span>型，可以使用next()接收一个字符串再取第一个字符的方式接收<span class="type">char</span>型</span><br><span class="line"><span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> in.next();</span><br><span class="line"><span class="type">char</span> <span class="variable">sex_1</span> <span class="operator">=</span> sex.charAt(<span class="number">0</span>);<span class="comment">//此处为0指取出在索引零位存储位置的字符</span></span><br><span class="line"><span class="comment">//这样我们就能输入char字符型变量了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入格式与接收格式需要一致，若不一致如果不能向上提升数据类型会报错。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>输出格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print();<span class="comment">//输出一行内容，不换行</span></span><br><span class="line">System.out.println();<span class="comment">//相对于上面的格式会输出完自动换行</span></span><br><span class="line">System.out.printf();<span class="comment">//格式化输出，具体同c语言</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">36</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(name+<span class="string">&quot;今年&quot;</span>+num+<span class="string">&quot;岁了&quot;</span>);</span><br><span class="line"><span class="comment">//小明今年36岁了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num_2</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">System.out.println(num+num_2+name);</span><br><span class="line"><span class="comment">//48小明</span></span><br><span class="line">System.out.println(name+num+num_2);</span><br><span class="line"><span class="comment">//小明3612</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;%s今年%d岁了&quot;</span>,name,num);</span><br><span class="line"><span class="comment">//小明今年36岁了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//format格式化输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>+++</p>
<p>format输出</p>
<p>字符串中用format函数进行精度输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;&#125;，小名是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是kiko，小名是suki</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;1&#125;，小名是&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是suki，小名是kiko</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;0&#125;，小名是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="string">&quot;suki&quot;</span>))</span><br><span class="line">我的名字是kiko，小名是suki</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;我的名字是&#123;0&#125;，小名是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;kiko&quot;</span>,<span class="number">6666</span>))</span><br><span class="line">我的名字是kiko，小名是<span class="number">6666</span></span><br><span class="line"><span class="comment">#以上是简单的位置输出格式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>format是一个使用起来十分强大的格式控制</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/markdown/py输出.png"/></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#冒号前面的数字是后面的字符串数字</span></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;&#123;:_^25&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">___________张三____________</span><br><span class="line"><span class="comment">#其中25 是总共输出的长度，而25前的‘^’是对其方式，在填充方式前的是当输出内容少 ，不足以填满长度而填充的字符</span></span><br><span class="line"><span class="comment">#如果不指明填充的字符，则默认空格</span></span><br><span class="line"><span class="comment">#千分位例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;0:*&gt;25,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">9876543210</span>))</span><br><span class="line">************<span class="number">9</span>,<span class="number">876</span>,<span class="number">543</span>,<span class="number">210</span></span><br><span class="line"><span class="comment">#每隔三个数字添加一个‘，’</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;0:0&gt;25,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">9876543210</span>))</span><br><span class="line">0000000000009,<span class="number">876</span>,<span class="number">543</span>,<span class="number">210</span></span><br><span class="line"><span class="comment">#精度例子</span></span><br><span class="line"><span class="comment">#如果要求保留俩位小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>qq=<span class="number">0.12333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>.<span class="built_in">format</span>(qq))</span><br><span class="line"><span class="number">0.12</span></span><br><span class="line"><span class="comment">#不过在整数部分变成非零后我不知道为什么会变成科学计数法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>qq=<span class="number">231.123214</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2&#125;&quot;</span>.<span class="built_in">format</span>(qq))</span><br><span class="line"><span class="number">2.3e+02</span></span><br><span class="line"><span class="comment">#修改输出类型</span></span><br><span class="line"><span class="comment">#和c语言差不多的，b表示二进制，c表示字符，d表示整数型，o表示八进制，x表示十六进制</span></span><br><span class="line"><span class="comment">#X是十六进制X大写，E和e是科学计数法表示浮点数的大小写e，f是标准浮点数输出</span></span><br><span class="line"><span class="comment">#%表示百分比输出浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">1100100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:c&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line">d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:d&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:o&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">31202</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">79E2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">79e2</span></span><br><span class="line"><span class="comment">#以下是浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">2.4223</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:e&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300e+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:E&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300E+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:f&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">2.422300</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:%&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="number">242.230000</span>%</span><br></pre></td></tr></table></figure>
<p>format函数的另外一个输出方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是f-string输出方法</span></span><br><span class="line">&gt;&gt;&gt;name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">&gt;&gt;&gt;age=<span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">f&quot;我是 <span class="subst">&#123;name&#125;</span> ，我今年 <span class="subst">&#123;age&#125;</span> 岁&quot;</span>)</span><br><span class="line">我是 张三 ，我今年 <span class="number">18</span> 岁</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:-^<span class="number">25</span>&#125;</span>&quot;</span>)</span><br><span class="line">-----------张三------------</span><br><span class="line"><span class="comment">#输出的方式余format差不多，唯一的区别是f-string的方法不需要在后面使用format函数。</span></span><br><span class="line"><span class="comment">#直接在输出时候填入变量，控制格式即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC的应用</title>
    <url>/posts/9375e561.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>JDBC是java操作关系数据库的一套API</p>
<p>全称：JAVA  DataBase  Connectivity     java数据库连接</p>
</blockquote>
<p>市面上的数据库多种多样，每个数据库的底层逻辑都不一样，不同数据库需要学习不同的接口来连接数据库，为了减少学习工作量统一使用jdbc的接口代码，由数据库的各个厂商使用jar包来适配不一样的底层实现逻辑。</p>
<p>这时候我们只用学习jdbc就可以实现各类数据库的增删查改了。不管是什么数据库系统，都能保证java代码的一致性。</p>
<p>过去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">java---&gt;mysql</span><br><span class="line">java---&gt;server</span><br><span class="line">java---&gt;DB2</span><br><span class="line">java---&gt;...各种各样的数据库</span><br></pre></td></tr></table></figure>
<p>现在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">java--调用--&gt;jdbc</span><br><span class="line">jdbc--&gt;mysql驱动</span><br><span class="line">jdbc--&gt;server驱动</span><br><span class="line">jdbc--&gt;DB2驱动</span><br><span class="line">jdbc--&gt;其他</span><br><span class="line">mysql驱动--&gt;mysql</span><br><span class="line">server驱动--&gt;server</span><br><span class="line">DB2驱动--&gt;DB2</span><br><span class="line">其他--&gt;其他数据库</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本篇使用   mysql8.0   jdk 1.8  IDEA 2023  学习实践</p>
</blockquote>
<p>mysql驱动下载地址：<a href="https://dev.mysql.com/downloads/">MySQL :: MySQL Community Downloads</a></p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203604734.webp" alt="image-20240519203604734"></p>
<p>选择无关平台</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203644277.webp" alt="image-20240519203644277"></p>
<p>选择zip下载就可以了</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203711892.webp" alt="image-20240519203711892"></p>
<p>如果想下载历史版本的话</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203806676.webp" alt="image-20240519203806676"></p>
<p>在下图下拉框可以选择旧版本</p>
<blockquote>
<p>不同版本之间的驱动有对应的MySQL数据库版本以及jdk版本</p>
</blockquote>
<p>系统依旧选择无关平台</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240519203839065.webp" alt="image-20240519203839065"></p>
<p>下载好驱动以后，在你的项目中添加到库里面</p>
<p>例如我存放驱动的文件目录为lib，点击右键添加到库</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240520021042343.webp" alt="image-20240520021042343"></p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//创建驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取连接地址     IP地址+mysql一般使用3306端口 /数据库名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line">        <span class="comment">//用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span>  <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span>  <span class="variable">password</span> <span class="operator">=</span>  <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;201819&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取执行对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">        <span class="comment">//可以根据  count 的数值来判断 是否数据库更改成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>com.mysql.jdbc.Driver</code>为驱动版本8.0以下使用的，8.0以上可能会出问题不能运行</p>
<p>亦有可能会出现提示但是仍然可以运行，如下提示你该使用新的驱动注册</p>
<p><code>Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></p>
<p>驱动版本为8.0以上使用<code>com.mysql.cj.jdbc.Driver</code></p>
<p>版本5以后的驱动也可以不写注册驱动，jar包自动获取</p>
</blockquote>
<p>原来的表格：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521013241436.webp" alt="image-20240521013241436"></p>
<p>修改成功后的表格：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521013340904.webp" alt="image-20240521013340904"></p>
<h2 id="JDBC-的API-简单应用"><a href="#JDBC-的API-简单应用" class="headerlink" title="JDBC 的API 简单应用"></a>JDBC 的API 简单应用</h2><h3 id="1-DriverManager-类"><a href="#1-DriverManager-类" class="headerlink" title="1. DriverManager 类"></a>1. DriverManager 类</h3><p>1.1 获取连接 <code>getConnection</code>方法</p>
<p><code>getConnection</code>一般有三个参数，url，username，password。后俩个不用多说，就是数据库的用户名和密码</p>
<p>调用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span>  <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span>  <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<p>其中url的格式为:<code>jdbc:mysql://url地址:端口/数据库名?各种参数配置&amp;各种参数配置</code></p>
<ul>
<li><code>jdbc:mysql</code></li>
<li><p><code>url:端口</code>：数据库所在的IP地址+端口号</p>
</li>
<li><p>数据库名</p>
</li>
<li><p>各种参数配置，在数据库名后面以<code>?</code>开始，以<code>&amp;</code>连接多个配置，例如时区和字符编码等等</p>
<p>例：设置编码为UTF-8</p>
</li>
</ul>
<p><code>jdbc:mysql://127.0.0.1:3306/test??useUnicode=true&amp;characterEncoding=UTF-8</code></p>
<blockquote>
<p>当使用本地地址127.0.0.1以及默认端口3306是可以省略，为：<code>jdbc:mysql:///test</code></p>
</blockquote>
<p>1.2 注册驱动</p>
<p><code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>的底层方法其实是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>com.mysql.jdbc.Driver</code>为驱动版本8.0以下使用的，8.0以上可能会出问题不能运行</p>
<p>亦有可能会出现提示但是仍然可以运行，如下提示你该使用新的驱动注册</p>
<p><code>Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></p>
<p>驱动版本为8.0以上使用<code>com.mysql.cj.jdbc.Driver</code></p>
<p>版本5以后的驱动也可以不写注册驱动，jar包自动获取</p>
<p><del>又重复了一遍…</del></p>
</blockquote>
<h3 id="2-Connection-类"><a href="#2-Connection-类" class="headerlink" title="2. Connection 类"></a>2. Connection 类</h3><h4 id="1-获取执行sql的对象"><a href="#1-获取执行sql的对象" class="headerlink" title="1. 获取执行sql的对象"></a>1. 获取执行sql的对象</h4><p>1.1 普通获取<code>Statement</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span>  DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>
<p>1.2 获取预编译sql对象<code>PreparedStatement</code>获取</p>
<p>1.3 获取执行存储过程对象</p>
<h4 id="2-mysql-事务控制"><a href="#2-mysql-事务控制" class="headerlink" title="2. mysql 事务控制"></a>2. mysql 事务控制</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>mysql</th>
<th>JDBC</th>
</tr>
</thead>
<tbody>
<tr>
<td>开启事务</td>
<td>BEGIN  <br />或者<br />START TRANSACTION</td>
<td>setAutoCommit(bool autoCommit)<br />默认为true，自动提交事务<br />改为false时，手动提交事物，即开启事务</td>
</tr>
<tr>
<td>提交事务</td>
<td>COMMIT</td>
<td>commit()</td>
</tr>
<tr>
<td>回滚事务</td>
<td>ROLLBACK</td>
<td>rollback()</td>
</tr>
</tbody>
</table>
</div>
<p>初始数据：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521032911216.webp" alt="image-20240521032911216"></p>
<p>现在是默认自动事务(即事务没开启)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;222&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;222&#x27; where id = &#x27;5&#x27; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取执行对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> statement.executeUpdate(sql1);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>  ; <span class="comment">//手动制造的异常</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> statement.executeUpdate(sql2);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：运行了sql1以后出现异常跳出来了，sql1执行的代码还在</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033138016.webp" alt="image-20240521033138016"></p>
<p>接下来是开启事务的实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;333&#x27; where id = &#x27;6&#x27; &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update student_inf set password = &#x27;333&#x27; where id = &#x27;5&#x27; &quot;</span>;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> statement.executeUpdate(sql1);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>  ; <span class="comment">//手动制造的异常</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> statement.executeUpdate(sql2);<span class="comment">//返回值是有几行数据被修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：事务出错，数据回滚</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033544206.webp" alt="image-20240521033544206"></p>
<p>如果把<code>//            int i = 1/0  ;</code>注释掉了，执行的结果如下：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521033652158.webp" alt="image-20240521033652158"></p>
<h3 id="Statement-类"><a href="#Statement-类" class="headerlink" title="Statement 类"></a>Statement 类</h3><h4 id="1-执行sql语句的方法"><a href="#1-执行sql语句的方法" class="headerlink" title="1 执行sql语句的方法"></a>1 执行sql语句的方法</h4><h4 id="1-0-执行所有sql语句"><a href="#1-0-执行所有sql语句" class="headerlink" title="1.0 执行所有sql语句"></a>1.0 执行所有sql语句</h4><p>甚至包括存储过程</p>
<p><code>execute(sql)</code></p>
<p>返回值为Boolean值：</p>
<ul>
<li>true<br>执行后返回了一个ResultSet对象<br>也就是说sql语句 是 DQL 查询语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(stmt.execute(sql))&#123;<span class="comment">//如果为true</span></span><br><span class="line">	<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.getResultSet();<span class="comment">//获取ResultSet</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>false<br>没有返回ResultSet执行的是DML或者DDL语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">updateCount</span> <span class="operator">=</span> stmt.getUpdateCount();<span class="comment">//获取受影响的行数</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="1-1-执行DDL、DML-，即表的修改，数据修改"><a href="#1-1-执行DDL、DML-，即表的修改，数据修改" class="headerlink" title="1.1 执行DDL、DML ，即表的修改，数据修改"></a>1.1 执行DDL、DML ，即表的修改，数据修改</h5><p><code>executeUpdate(sql)</code></p>
<ul>
<li>执行DML（数据）语句时返回值受影响的行数<br>返回值大于0即为执行成功<br>实例上面很详细</li>
<li>执行DDL(数据库)时，返回值均为0<br>不报异常就是成功了</li>
</ul>
<h5 id="1-2-执行DQL，查询语句"><a href="#1-2-执行DQL，查询语句" class="headerlink" title="1.2 执行DQL，查询语句"></a>1.2 执行DQL，查询语句</h5><p><code>executeQuery(sql)</code></p>
<p>返回一个ResultSet对象</p>
<h3 id="ResultSet-类"><a href="#ResultSet-类" class="headerlink" title="ResultSet 类"></a>ResultSet 类</h3><p>一个结果集合</p>
<p>使用<code>executeQuery(sql)</code>查询语句后，返回的ResultSet对象是一个游标，指向查询语句的上一行，例如<code>student_inf</code>表查询语句</p>
<p>使用<code>select * from student_inf</code>后，游标指向：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521180625685.webp" alt="image-20240521180625685"></p>
<p>使用<code>next()</code>,可以指向下一行数据，返回值是Boolean，为true则下一行有数据，否则为false</p>
<p>使用get数据类型()来接收对应数据，例如String<code>getString()</code>，int<code>getInt()</code>,double<code>getDouble()</code></p>
<p>get数据类型()的参数分为俩种，一个是int型，按照数据在表中的位置来定位，第二种为String型，根据列名来提取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="number">3</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="number">4</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int id = resultSet.getInt(&quot;id&quot;);</span></span><br><span class="line">        <span class="comment">//String student_id = resultSet.getString(&quot;student_id&quot;);</span></span><br><span class="line">        <span class="comment">//String name =  resultSet.getString(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">//String pas = resultSet.getString(&quot;password&quot;);</span></span><br><span class="line">        <span class="comment">//String sex = resultSet.getString(&quot;sex&quot;);</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521181819044.webp" alt="image-20240521181819044"></p>
<p>其他方法：</p>
<ul>
<li><p><code>int getRow()</code>获取当前行数   ——-先last(),再getRow()可以获得总共有多少行数据</p>
</li>
<li><p><code>boolean next()</code>: 移动到下一行。</p>
</li>
<li><code>boolean previous()</code>: 移动到前一行。</li>
<li><code>boolean first()</code>: 移动到第一行。  //在可滚动的ResultSet启用,在获取PreparedStatement 或者Statement 对象时的参数加上<code>ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE</code></li>
<li><code>boolean last()</code>: 移动到最后一行。</li>
<li><code>void moveToFirst()</code>: 移动到第一行。//不可滚动的数据启用  </li>
<li><code>void moveToLast()</code>: 移动到最后一行。</li>
<li><code>boolean absolute(int row)</code>: 移动到指定行。</li>
<li><code>boolean relative(int rows)</code>: 相对于当前行移动指定行数。</li>
<li><code>boolean isBeforeFirst()</code>: 判断是否在第一行之前。</li>
<li><code>boolean isAfterLast()</code>: 判断是否在最后一行之后。</li>
<li><code>boolean isFirst()</code>: 判断是否在第一行。</li>
<li><code>boolean isLast()</code>: 判断是否在最后一行。</li>
<li><code>void beforeFirst()</code>: 移动到第一行之前。</li>
<li><code>void afterLast()</code>: 移动到最后一行之后。</li>
<li></li>
<li>获取列名：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ResultSetMetaData 对象</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">System.out.println(<span class="string">&quot;列数：&quot;</span> + columnCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsmd.getColumnName(i);</span><br><span class="line">    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i); <span class="comment">// 列别名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">columnType</span> <span class="operator">=</span> rsmd.getColumnTypeName(i); <span class="comment">// 列数据类型</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;列名：&quot;</span> + columnName);</span><br><span class="line">    System.out.println(<span class="string">&quot;列别名：&quot;</span> + columnLabel);</span><br><span class="line">    System.out.println(<span class="string">&quot;列数据类型：&quot;</span> + columnType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><p><code>void insertRow()</code>: 插入当前行。</p>
</li>
<li><p><code>void updateRow()</code>: 更新当前行。</p>
</li>
<li><p><code>void deleteRow()</code>: 删除当前行。</p>
</li>
<li><p><code>void refreshRow()</code>：刷新当前行在resultSet的缓存</p>
</li>
<li><p><code>void update 数据类型</code>更新数据</p>
</li>
<li><p><code>void updateNull(int columnIndex)</code>: 更新指定列为 NULL 值。</p>
</li>
<li><p><code>void updateNull(String columnLabel)</code>: 更新指定列名为 NULL 值。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改数据为可编辑</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="comment">//设置修改的列，修改后的数据</span></span><br><span class="line">        resultSet.updateString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;999&quot;</span>);</span><br><span class="line">        <span class="comment">//提交更新请求</span></span><br><span class="line">        resultSet.updateRow();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521184929931.webp" alt="image-20240521184929931"></p>
<hr>
<h3 id="PreparedStatement-类"><a href="#PreparedStatement-类" class="headerlink" title="PreparedStatement 类"></a>PreparedStatement 类</h3><p>一个</p>
<p>为什么要使用这个类呢</p>
<ul>
<li><p>防止sql注入</p>
</li>
<li><p>性能高，使用预编译</p>
<blockquote>
<p>预编译默认需要关闭，需要开启</p>
<ol>
<li>useServerPrepStmts=true</li>
<li>配置mysql执行日志(自行百度)，需要重启mysql<br>一般执行sql需要：</li>
</ol>
</blockquote>
</li>
</ul>
<ol>
<li>检查sql语法</li>
<li>编译</li>
<li>执行<br>当PreparedStatement 执行sql时，如果是执行同一个sql语句，仅仅是参数不同<br>那么第一次执行sql时的步骤一模一样，第二次执行sql语句sql代码已经编译就只用执行就完成了</li>
</ol>
<h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>使用<code>Statement</code>对象的时候，执行的sql代码是以String的形式发送给mysql的。如果在一些特定条件查询，比如账户密码查询的时候输入语句加入<code>&#39; or &#39;1&#39;=&#39;1</code>,到了sql就变成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_inf <span class="keyword">where</span> <span class="string">&#x27;name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>因为<span class="number">1</span>恒等于<span class="number">1</span></span><br><span class="line"><span class="number">120190101</span>张三<span class="number">999</span>男<span class="number">19</span></span><br><span class="line"><span class="number">220190102</span>李四<span class="number">999</span>女<span class="number">18</span></span><br><span class="line"><span class="number">320200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">420200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">520200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">620200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br><span class="line"><span class="number">720200101</span>小强<span class="number">999</span>男<span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>就不费吹灰之力获取你的数据</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>以<code>？</code>为占位符</p>
<p>查询操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf where password = ? and name= ? &quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;999&quot;</span>);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">student_id</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">pas</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">                System.out.println(id+student_id+name+pas+sex+age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据输出如下</span></span><br><span class="line"><span class="number">120190101</span>张三<span class="number">999</span>男<span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>增、改、删：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student_inf values (?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;20240521&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;桐崎千棘&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;159&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">5</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">preparedStatement.setInt(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行 返回受影响行数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">preparedStatement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240521194424842.webp" alt="image-20240521194424842"></p>
<p>删改类似，不多赘述</p>
<h2 id="封装数据进对象以及集合"><a href="#封装数据进对象以及集合" class="headerlink" title="封装数据进对象以及集合"></a>封装数据进对象以及集合</h2><p>新建一个Student_inf 类，设置好数据字段，<code>Alt</code>+<code>Inesert</code>快速重写toString()以及get和set</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student_inf</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String student_inf;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStudent_inf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student_inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent_inf</span><span class="params">(String student_inf)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.student_inf = student_inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student_inf&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, student_inf=&#x27;&quot;</span> + student_inf + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student_inf &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建列表</span></span><br><span class="line">List&lt;Student_inf&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">        <span class="type">Student_inf</span> <span class="variable">studentInf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student_inf</span>();</span><br><span class="line">        studentInf.id= resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        studentInf.student_inf= resultSet.getString(<span class="string">&quot;student_id&quot;</span>);</span><br><span class="line">        studentInf.name=  resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        studentInf.password = resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        studentInf.sex= resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentInf.age= resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(studentInf.toString());</span><br><span class="line">        lists.add(studentInf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(lists);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Student_inf&#123;<span class="built_in">id</span>=1, student_inf=<span class="string">&#x27;20190101&#x27;</span>, name=<span class="string">&#x27;张三&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=19&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=2, student_inf=<span class="string">&#x27;20190102&#x27;</span>, name=<span class="string">&#x27;李四&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;女&#x27;</span>, age=18&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=3, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=4, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=5, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=6, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">Student_inf&#123;<span class="built_in">id</span>=7, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;</span><br><span class="line">[Student_inf&#123;<span class="built_in">id</span>=1, student_inf=<span class="string">&#x27;20190101&#x27;</span>, name=<span class="string">&#x27;张三&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=19&#125;, Student_inf&#123;<span class="built_in">id</span>=2, student_inf=<span class="string">&#x27;20190102&#x27;</span>, name=<span class="string">&#x27;李四&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;女&#x27;</span>, age=18&#125;, Student_inf&#123;<span class="built_in">id</span>=3, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=4, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=5, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=6, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;, Student_inf&#123;<span class="built_in">id</span>=7, student_inf=<span class="string">&#x27;20200101&#x27;</span>, name=<span class="string">&#x27;小强&#x27;</span>, password=<span class="string">&#x27;999&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=20&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>使用以上方法，每次与数据库交互都要创建一个新连接，交互完就销毁释放资源，造成资源浪费</p>
<p>数据池解决这个问题，在缓冲区创建好多个连接对象，使用时由连接池分配数据库连接对象，不使用时就放回连接池。类似客服，有需求时打电话过去，没需求就挂掉电话，给下一个有需求的人接电话。避免了频繁销毁创建</p>
<p>目前<code>druid</code>和<code>hikari</code>是用的最多的俩个，前者是综合性，后者速度快</p>
<blockquote>
<p> 使用需要引入jar包</p>
</blockquote>
<p>步骤：</p>
<ol>
<li>创建连接池对象</li>
<li>配置连接池</li>
<li>由连接池对象创建连接对象</li>
<li>代码实现后回收连接对象</li>
</ol>
<p>配置分为俩种：代码配置以及配置文件配置</p>
<h2 id="主键回显"><a href="#主键回显" class="headerlink" title="主键回显"></a>主键回显</h2><ol>
<li>创建PreparedStatement对象时加入参数<code>PreparedStatement.RETURN_GENERATED_KEYS</code></li>
<li><code>pstmt.getGeneratedKeys();</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取数据库连接</span></span><br><span class="line">    conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 创建SQL插入语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student_inf (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 创建PreparedStatement对象，并指定返回生成的键</span></span><br><span class="line">    pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 设置参数</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, <span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, <span class="number">22</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 执行插入操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">affectedRows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6. 检查是否插入成功</span></span><br><span class="line">    <span class="keyword">if</span> (affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 7. 获取生成的键</span></span><br><span class="line">        rs = pstmt.getGeneratedKeys();</span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">generatedId</span> <span class="operator">=</span> rs.getLong(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Inserted record&#x27;s ID: &quot;</span> + generatedId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 8. 关闭资源</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) rs.close();</span><br><span class="line">        <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>同一用户有多个需求打电话给客服，只需要一个客服接听电话就可以了，不需要多个客服来解决需求。</p>
<p>这就是ThreadLocal的作用。</p>
<p>简单例子看<a href="https://www.bilibili.com/video/BV1Tx421S7HZ?p=31&amp;vd_source=ae1743069d1cb97d6b6a1d21340b6497">30高级篇-工具类封装V2.0_哔哩哔哩_bilibili</a></p>
<p>以下是gpt的示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalConnectionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; connectionThreadLocal = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to create a connection&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> connectionThreadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionThreadLocal.get();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connectionThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">            <span class="comment">// Perform database operations using conn</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: Got connection &quot;</span> + conn);</span><br><span class="line">            closeConnection();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread 1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>执行相似且数量大SQL的时候，例如插入数据，使用上述方法会很慢，这个时候批量操作就派上用场了</p>
<p>驱动 url设置<code>rewriteBatchedStatements=true</code></p>
<p>步骤：</p>
<ol>
<li>把每行数据添加进bacth <code>addbatch()</code></li>
<li>提交到数据库 <code>executeBatch()</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取数据库连接</span></span><br><span class="line">        conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 设置自动提交为 false</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 准备 SQL 语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student_inf (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">        pstmt = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 设置批量操作的参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Student &quot;</span> + i);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, <span class="number">20</span> + (i % <span class="number">10</span>));</span><br><span class="line">            </span><br><span class="line">            pstmt.addBatch();  <span class="comment">// 添加到批处理</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 5. 执行批处理，每100条记录提交一次</span></span><br><span class="line">                <span class="type">int</span>[] result = pstmt.executeBatch();</span><br><span class="line">                conn.commit();</span><br><span class="line">                System.out.println(<span class="string">&quot;Inserted batch of 100 records: &quot;</span> + result.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 执行剩余的批处理操作</span></span><br><span class="line">        <span class="type">int</span>[] result = pstmt.executeBatch();</span><br><span class="line">        conn.commit();</span><br><span class="line">        System.out.println(<span class="string">&quot;Inserted remaining records: &quot;</span> + result.length);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// 发生异常时回滚事务</span></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 7. 关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于把多条insert()</p>
<p>变为insert  values(),(),()</p>
</blockquote>
<p>删改类似，不多赘述</p>
<h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><p>数据访问对象（DAO，Data Access Object）模式是用于抽象和封装对数据源的访问逻辑的一种设计模式。通过使用 DAO 模式，可以将数据访问逻辑从业务逻辑中分离出来，使代码更具可维护性和可测试性。自此，逻辑层不用再管sql部分的代码，只需要调用函数，就可以返回结果。</p>
<p>dao一般由以下组成：</p>
<ul>
<li>工具/数据类</li>
<li>数据库操作接口</li>
<li>接口的具体实现逻辑</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>速通html</title>
    <url>/posts/928b078b.html</url>
    <content><![CDATA[<h1 id="从零开始的前端"><a href="#从零开始的前端" class="headerlink" title="从零开始的前端"></a>从零开始的前端</h1><blockquote>
<p>对于上次学习前端知识已经过去很久了，所有从零开始做一个笔记温故而知新。</p>
</blockquote>
<p><code>HTML(HyperText Markup Language)(超文本标记语言)</code></p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>这是一个html的文件的基本结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  //给浏览器告知是什么协议</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>	//使用什么语言</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  //编码</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span> //移动端</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>//标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    网站主题</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>虽然h1-h6等等排版标签拥有先置样式，但是可以随意修改，虽然全部标签可以使用div来完成显示需求，但是不推荐，标签拥有语义化的时候能被浏览器所认识，利于SEO搜索引擎检索，方便设备解析。</p>
<p>比如p标签是文章标签</p>
</blockquote>
<h3 id="标签类型"><a href="#标签类型" class="headerlink" title="标签类型"></a>标签类型</h3><ul>
<li>块级标签                           —&gt;独占一行</li>
<li>行内标签                           —&gt;不独占一行</li>
</ul>
<blockquote>
<p>块元素可以写块元素行内标签</p>
<p>行内只能写行内</p>
<p>h1~h6不能嵌套</p>
<p>p中不写块元素</p>
</blockquote>
<h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签名</th>
<th>语义</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>斜体（着重内容</td>
</tr>
<tr>
<td>strong</td>
<td>加粗（重要&gt;em</td>
</tr>
<tr>
<td>span</td>
<td>无语义</td>
</tr>
<tr>
<td>cite</td>
<td>作品名</td>
</tr>
<tr>
<td>dfn</td>
<td>特殊用语</td>
</tr>
<tr>
<td>del</td>
<td>删除文本 删除线</td>
</tr>
<tr>
<td>ins</td>
<td>下划线  插入文本</td>
</tr>
<tr>
<td>sub /sup</td>
<td>下标和上标</td>
</tr>
<tr>
<td>code</td>
<td>代码</td>
</tr>
<tr>
<td>samp</td>
<td>提取内容，表示设备输出</td>
</tr>
<tr>
<td>kbd</td>
<td>键盘输入</td>
</tr>
<tr>
<td>abbr</td>
<td>缩写，鼠标触碰会有title显示</td>
</tr>
<tr>
<td>bdo</td>
<td>反向标签，dir属性取值<code>ltr</code>和<code>rtl</code>即从左到右和从右到左</td>
</tr>
<tr>
<td>var</td>
<td>标记变量，code中嵌套var标记</td>
</tr>
<tr>
<td>small</td>
<td>附属细则，版权之类法律的细则</td>
</tr>
<tr>
<td>b</td>
<td>摘要中关键字</td>
</tr>
<tr>
<td>i</td>
<td>本体人物思想活动，现 图标</td>
</tr>
<tr>
<td>u</td>
<td>与正文反差，错字不合适 的描述等等</td>
</tr>
<tr>
<td>q</td>
<td>短引用</td>
</tr>
<tr>
<td>blockquote</td>
<td>长引用</td>
</tr>
<tr>
<td>address</td>
<td>地址信息</td>
</tr>
</tbody>
</table>
</div>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>img</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>地址</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>alt</td>
<td>图片描述/<br />加载不出图片所显示的文本</td>
</tr>
<tr>
<td>width</td>
<td>宽度px，vw,em等等</td>
</tr>
<tr>
<td>height</td>
<td>高度</td>
</tr>
</tbody>
</table>
</div>
<h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><p>两种方式</p>
<ol>
<li><p>网站根目录放置``</p>
</li>
<li><p>link</p>
</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a&gt;&lt;/a&gt;</code>中间可以放任何数据（图片/文字）点击则跳转页面,可跳转文件，锚点<code>#name的值</code>、<code>#id选择器</code>、甚至是js代码、应用也可以，比如邮件和电话等等</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>target</td>
<td>跳转方式<br /><code>_self</code>本页面跳转/默认<br /><code>_blank</code>新页面跳转</td>
</tr>
<tr>
<td>href</td>
<td>跳转的地址</td>
</tr>
<tr>
<td>download</td>
<td>无值，启动文件下载模式，可取值默认文件名</td>
</tr>
<tr>
<td>name</td>
<td>设置锚点给人跳转</td>
</tr>
</tbody>
</table>
</div>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
    <li>11111</li>
     <li>2222</li>
     <li>333</li>
     <li>444</li>
</ol>
嵌套

<ol>
    <li>11111</li>
    <li>
        <ol>222
        <li>22.11</li>
        <li>222.22</li>
        <li>22.333</li>
        <li>22.4444</li>
        </ol>
    </li>
     <li>333</li>
     <li>333</li>
</ol>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">嵌套</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span>222</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222.22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>22.4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>
    <li>11111</li>
     <li>222</li>
     <li>333</li>
     <li>444</li>
</ul>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">11111</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">333</span>&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;<span class="number">444</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><dl>
    <dt>这是标语，类似 1.</dt>
        <dd>这是内容</dd>
     <dt>哈哈哈</dt>
        <dd>这是内容</dd>
     <dt>11111</dt>
        <dd>这是内容</dd>
</dl>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>这是标语，类似 1.<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px solid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表格头部--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>钓鱼<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span>//垂直位置  可选bottom/middle</span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>翁达<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>上课<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>桐崎千棘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>17<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>一条乐<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;green&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>制表人：Kirari<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- rowspan=&quot;2&quot;一列两行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1px solid">
        <caption>表格标题</caption>
        <thead>
            <!--表格头部-->
            <tr>
                <th>姓名</th>
                <th>年龄</th>
                <th>性别</th>
                <th>爱好</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>小明</td>
                <td>13</td>
                <td>男</td>
                <td>钓鱼</td>
            </tr>
            <!-- 表格内容 -->
            <tr  valign="top">
                <td>翁达</td>
                <td>22</td>
                <td  valign="top">女</td>
                <td>上课</td>
            </tr>
            <tr>
                <td>桐崎千棘</td>
                <td>17</td>
                <td>女</td>
                <td>一条乐</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
               <td align="right" bgcolor="green" colspan="4">制表人：Kirari</td>
               <!-- rowspan="2"一列两行 -->
            </tr>
            <!-- 表格脚注 -->
        </tfoot>
    </table>


<p>简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>ggg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1">
  <tr>
    <td rowspan="2">aaa</td>
    <td>bbb</td>
    <td>ccc</td>
  </tr>
  <tr>
    <td>ddd</td>
 <td>eee</td>
  </tr>
  <tr>    <td>fff</td>
   <td colspan="2">ggg</td>
</tr>
</table>

<p>table的属性</p>
<ul>
<li><p>border</p>
<p>边框</p>
</li>
<li><p>width</p>
<p>宽度</p>
</li>
<li><p>height</p>
<p>只在body调整高度</p>
</li>
<li><p>cellspacing</p>
<p>单元格间隙，0为无间隙</p>
</li>
</ul>
<h3 id="换行-分割线-按照原来效果显示"><a href="#换行-分割线-按照原来效果显示" class="headerlink" title="换行/分割线/按照原来效果显示"></a>换行/分割线/按照原来效果显示</h3><p><code>&lt;br&gt;</code></p>
<p><code>&lt;hr&gt;</code></p>
<p><code>&lt;pre&gt;&lt;/pre&gt;</code></p>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>基本构成:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./11.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- target=&quot;_blank&quot; 是新标签页打开 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- mothod get  post --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- action  是地址 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h5><div class="table-container">
<table>
<thead>
<tr>
<th>特性</th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>目的</strong></td>
<td>从服务器检索数据</td>
<td>向服务器提交数据进行处理</td>
</tr>
<tr>
<td><strong>数据传输</strong></td>
<td>数据作为查询参数附加到 URL 中发送</td>
<td>数据在请求体中发送</td>
</tr>
<tr>
<td><strong>可见性</strong></td>
<td>数据在 URL 中可见</td>
<td>数据不在 URL 中可见</td>
</tr>
<tr>
<td><strong>缓存</strong></td>
<td>可以被浏览器和中间服务器缓存</td>
<td>通常不被浏览器或中间服务器缓存</td>
</tr>
<tr>
<td><strong>书签</strong></td>
<td>可以被书签</td>
<td>不能被书签</td>
</tr>
<tr>
<td><strong>大小限制</strong></td>
<td>通常限制在 2048 个字符左右</td>
<td>数据大小限制较大</td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td>数据在URL中暴露，不适合传输敏感数据</td>
<td>数据在请求体中，不容易被窥视，较为安全</td>
</tr>
<tr>
<td><strong>幂等性</strong></td>
<td>请求应为幂等的</td>
<td>请求可能产生副作用</td>
</tr>
<tr>
<td><strong>使用场景</strong></td>
<td>获取数据（如搜索查询、检索用户信息）</td>
<td>提交表单（如登录表单、注册表单）、上传文件，修改数据</td>
</tr>
</tbody>
</table>
</div>
<h4 id="文本框和密码框"><a href="#文本框和密码框" class="headerlink" title="文本框和密码框"></a>文本框和密码框</h4><form action="https://kiko2568.top" method="get" target="_blank">
        账号<input type="text" name="user" value="初始值" maxlength="10">
<br>
        <!--maxlength 最大长度 -->
      密码  <input type="password" name="pwd" value="csz" maxlength="10">
        <br>
        <input type="submit" value="commit">
        <br>
        <button>提交</button>
    </form>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">       账号 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--maxlength 最大长度 --&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h4><form action="https://kiko2568.top"  target="_blank">
性别<input type="radio" value="男" name="sex">男
<input type="radio" value="女" name="sex" checked>女<br>
爱好<input type="checkbox" value="跑步" name="habit" checked>跑步
<input type="checkbox" value="唱歌" name="habit">唱歌
<input type="checkbox" value="阅读" name="habit">阅读
<input type="checkbox" value="跳舞" name="habit">跳舞<br>
<input type="submit" value="commit"><br>
<button>提交</button>
</form>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跑步&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span> <span class="attr">checked</span>&gt;</span>跑步</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>唱歌</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阅读&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>阅读</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳舞&quot;</span> <span class="attr">name</span>=<span class="string">&quot;habit&quot;</span>&gt;</span>跳舞<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>checked</code>默认勾选</p>
<h4 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h4><form action="https://kiko2568.top"  target="_blank">
        看不见的input
        <input name="hiden" value="hello" type="hidden">
        <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        看不见的input</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;hiden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="提交和重置按钮"><a href="#提交和重置按钮" class="headerlink" title="提交和重置按钮"></a>提交和重置按钮</h4><form action="https://kiko2568.top"  target="_blank">
        <input type="submit" value="commit"><br>
        <input type="reset" value="重置111">
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置111&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><form action="https://kiko2568.top"  target="_blank">
        <input type="button" value="普通按钮">
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文本域和下拉框"><a href="#文本域和下拉框" class="headerlink" title="文本域和下拉框"></a>文本域和下拉框</h4><form action="https://kiko2568.top"  target="_blank">
        文本<textarea name="textarea1" id="" cols="30" rows="10">123默认值</textarea>
        <br>
        家乡<select name="place" id="">
            <option value="sc">四川</option>
            <option value="cq">重庆</option>
            <option value="gx" selected>广西</option>
            <!-- selected 默认值 -->
            <option value="hebei">河北</option>
            <!-- 如果没value则取标签内的字 -->
        </select>
        <input type="submit" value="commit"><br> 
        <input type="reset" value="重置">
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        文本<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>123默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        家乡<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;place&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sc&quot;</span>&gt;</span>四川<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cq&quot;</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gx&quot;</span> <span class="attr">selected</span>&gt;</span>广西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- selected 默认值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hebei&quot;</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果没value则取标签内的字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文件控件"><a href="#文件控件" class="headerlink" title="文件控件"></a>文件控件</h4><form action="https://kiko2568.top" target="_blank" method="post" enctype="multipart/form-data">
    提交文件: <input type="file" name="file_sumit">
    <input type="submit" value="提交">
</form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--enctype是文件的编码，如果使用默认会只上传名字，更换编码后文件内容和文件数据一起s，同时请求的模式改为post 因为get数据少--&gt;</span></span><br><span class="line">    提交文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file_sumit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="禁用控件"><a href="#禁用控件" class="headerlink" title="禁用控件"></a>禁用控件</h4><p>在控件中添加<code>disabled</code>,例如：</p>
  <form action="https://kiko2568.top"  target="_blank">
        性别<input disabled type="radio" value="男" name="sex">男
        <input type="radio" value="女" name="sex" checked>女<br>
        <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    性别<span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>发现男这个单选不可选中</p>
<p>通过<code>disabled</code>和<code>checked</code>可以设置默认值不可修改</p>
<h4 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h4><p>文本关联控件</p>
<form action="https://kiko2568.top"  target="_blank">
        <label for="zhanghu">账号</label>
         <input id="zhanghu" type="text" name="user" value="初始值" maxlength="10"><br>
        <label > 密码 <input type="password" name="pwd" value="csz" maxlength="10"></label>
      <br>
        性别
        <label for="nan"></label>
        <input id="nan" type="radio" value="男" name="sex">男
        <label ><input type="radio" value="女" name="sex" checked>女</label>
            <br>
            <input type="submit" value="commit"><br>
        <button>提交</button>
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;zhanghu&quot;</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;zhanghu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">            密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span>性别</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击文本相当于点击控件！</p>
<h4 id="fieldset与legend-作为分组使用"><a href="#fieldset与legend-作为分组使用" class="headerlink" title="fieldset与legend 作为分组使用"></a>fieldset与legend 作为分组使用</h4><form action="https://kiko2568.top"  target="_blank">
    <fieldset>
        <legend>分组一</legend>
            <label for="zhanghu">账号</label>
            <input id="zhanghu" type="text" name="user" value="初始值" maxlength="10"><br>
            <label > 密码 <input type="password" name="pwd" value="csz" maxlength="10"></label>
            <br>
    </fieldset>
    <fieldset>
        <legend>分组2</legend>
            性别
            <label for="nan"></label>
            <input id="nan" type="radio" value="男" name="sex">男
            <label ><input type="radio" value="女" name="sex" checked>女</label>
    </fieldset>
        <br>
        <input type="submit" value="commit"><br>
    <button>提交</button>
</form>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://kiko2568.top&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>分组一<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;zhanghu&quot;</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;zhanghu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始值&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> &gt;</span> 密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csz&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>分组2<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            性别</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> &gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;commit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p><code>ifame</code></p>
<p>嵌入网站/图片/视频等等的框架</p>
<iframe src="https://kiko2568.top" frameborder="0" width="400px" height="300px"></iframe><br>
<a href="https://blog.kiko2568.top/" target="wz">个人博客</a>
    <a href="https://life.kiko2568.top/" target="wz">生活博客</a>

    <form action="https://moments.kiko2568.top/" target="wz"><input type="submit" value="朋友圈"></form>
    <iframe src="https://kiko2568.top" name="wz" frameborder="0" width="400px" height="300px"></iframe>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span>个人博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://life.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span>生活博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://moments.kiko2568.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;wz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;朋友圈&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://kiko2568.top&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与a链接或表单搭配首先切换</p>
<h3 id="特殊字符-字符实体"><a href="#特殊字符-字符实体" class="headerlink" title="特殊字符/字符实体"></a>特殊字符/字符实体</h3><p><code>&amp;nbsp;</code>空格</p>
<blockquote>
<p><a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">字符表大全</a></p>
</blockquote>
<h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>元信息—-页面基本信息</p>
<p>详细请参考</p>
<p><a href="mozilla.org">元数据元素 - HTML（超文本标记语言） | MDN</a></p>
<h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><ul>
<li>title 给元素加上提示信息，鼠标放上去有提示</li>
</ul>
<h2 id="html-5新特性"><a href="#html-5新特性" class="headerlink" title="html 5新特性"></a>html 5新特性</h2><h3 id="1-新增语义标签"><a href="#1-新增语义标签" class="headerlink" title="1. 新增语义标签"></a>1. 新增语义标签</h3><ul>
<li><p><code>header</code>整个界面/区域头部</p>
</li>
<li><p><code>footer</code>整个界面/区域尾部 —-多用于页脚</p>
</li>
<li><p><code>nav</code>导航//栏</p>
</li>
<li><p><code>aside</code>侧边栏</p>
</li>
</ul>
<hr>
<p>用上面的就行</p>
<ul>
<li><p><code>article</code>文章帖子杂志评论</p>
</li>
<li><p><code>section</code>页面中某段文字，一个段落，通常包含标题</p>
<p>article里面会有多个section，section强调分块分段</p>
</li>
<li><p><code>main</code>文档主要内容，几乎不用</p>
</li>
<li><p><code>hgroup</code>连续的标题</p>
</li>
</ul>
<h3 id="2-新增状态标签"><a href="#2-新增状态标签" class="headerlink" title="2.  新增状态标签"></a>2.  新增状态标签</h3><p><code>meter</code>类似进度条</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>high</td>
<td>区间最高值</td>
</tr>
<tr>
<td>low</td>
<td>区间最低</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>optimum</td>
<td>状态最好的值</td>
</tr>
<tr>
<td>value</td>
<td>当前值</td>
</tr>
</tbody>
</table>
</div>
<p><meter max="100" min="0" high="80" low="60" value="70"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="50"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="70" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="95" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="40" optimum="90"></meter><br></p>
<p><meter max="100" min="0" high="80" low="60" value="80" optimum="90"></meter><br></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;70&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;70&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;95&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span> <span class="attr">low</span>=<span class="string">&quot;60&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>progress</code>进度条</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>max</td>
<td>数字</td>
<td>规定最大值</td>
</tr>
<tr>
<td>value</td>
<td>数字</td>
<td>规定当前值</td>
</tr>
</tbody>
</table>
</div>
<p><progress max="100" value="30" > <br><br></progress><br></p>
<p><progress max="100" value="60" > <br></progress><br></p>
<p><progress max="100" value="90" > <br></progress><br></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;90&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-新增列表标签"><a href="#3-新增列表标签" class="headerlink" title="3. 新增列表标签"></a>3. 新增列表标签</h3><ul>
<li><code>datelist</code></li>
<li><code>details</code></li>
</ul>
<form action="">
    <input type="text" list="date">
    <input type="submit" value="搜索">
</form>
<datalist id="date">
    <option value="12">12</option>
    <option value="23">23</option>
    <option value="34">34</option>
    <option value="14">14</option>
</datalist>
<details><summary>标题</summary>
    你好
</details>


示例

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;34&quot;</span>&gt;</span>34<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;14&quot;</span>&gt;</span>14<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;<span class="name">summary</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    你好</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>


### 4. 新增文本标签

- `ruby`拼音标签？

- `mark`高亮

<ruby>你好，我是一个程序员<rt>ni hao , wo shi yi ge cheng xu yuan</rt></ruby>

<ruby>你好<rt>ni hao </rt>，我是一个程序员</ruby>

<mark>你好</mark>，我是<mark>kirari</mark>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>你好，我是一个程序员<span class="tag">&lt;<span class="name">rt</span>&gt;</span>ni hao , wo shi yi ge cheng xu yuan<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>你好<span class="tag">&lt;<span class="name">rt</span>&gt;</span>ni hao <span class="tag">&lt;/<span class="name">rt</span>&gt;</span>，我是一个程序员<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>，我是<span class="tag">&lt;<span class="name">mark</span>&gt;</span>kirari<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>



### 5. 新的表单控件



#### 5. 1 属性




 <table>
        <thead>
            <tr>
                <th>名字</th>
                <th>效果</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>required</td>
                <td>必填入信息，否则不能通过，会出现提示文字不可留空之类<br />文本框不能为空<br />单选框必须选一个<br />多选框是必须选设置的选项<br />可规避不正确输入以及同意协议</td>
            </tr>
            <tr>
                <td>autocomplete</td>
                <td>属性值on开启off关闭<br />会有历史记录，提交后再次获取焦点可以获得历史输入<br />密码框和多行文本域不可使用<br />需要浏览器开启地址信息才生效</td>
            </tr>
            <tr>
                <td>autofocus</td>
                <td>自动获取焦点，多个autofocus只生效最开始的那个</td>
            </tr>
            <tr>
                <td>placeholder</td>
                <td>提示文字</td>
            </tr>
            <tr>
                <td>pattern</td>
                <td>正则表达式，必须有required才能使用</td>
            </tr>
        </tbody>
    </table>






<form action="">
        账号<input type="text" name="" id="" required autofocus autocomplete="on" placeholder="提示"><br>
        密码<input type="password" name="" id="" placeholder="输入密码" required pattern="\b\d{6,12}\b"><br>
        <input type="radio" name="sex" value="nan">男
        <input type="radio" required name="sex">女<br>
        <input type="checkbox"  name="aa">多选1
        <input type="checkbox" required name="aa">多选2
        <input type="checkbox" name="aa">多选3
        <input type="checkbox" name="aa">多选4<br>
        <input type="submit" name="" id="" value="提交">
    </form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        账号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> <span class="attr">autofocus</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;提示&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入密码&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;\b\d&#123;6,12&#125;\b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选1</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选2</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选3</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>多选4<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-2-新的控件，即type新属性值"><a href="#5-2-新的控件，即type新属性值" class="headerlink" title="5.2 新的控件，即type新属性值"></a>5.2 新的控件，即type新属性值</h4><form action="">
网址<input type="url"></input><br>
邮箱<input type="email"></input><br>
搜索<input type="search"></input><br>
数值<input type="number" step="2" max="100" min="0"></input>max是最大值，min最小值。step是间距<br>
电话<input type="tel"></input><br>
进度条<input type="range" max="100" min="0" value="80"></input><br>
颜色<input type="color"></input><br>
日期<input type="date"></input><br>
月<input type="month"></input><br>
周<input type="week"></input><br>
时间<input type="time"></input><br>
日期+时间<input type="datetime-local"></input><br>
<input type="submit" value="提交"></input>
 </form>




<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">网址<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">搜索<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">数值<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span>max是最大值，min最小值。step是间距<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">电话<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">进度条<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">颜色<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">日期<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">月<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">周<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">时间<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">日期+时间<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>视频标签</p>
<p>媒体参与度，本来需要静音才能自动播放，媒体参与度高的网站可以开声音自动播放</p>
<p><code>chrome://media-engagement/</code></p>
<p><code>edge://media-engagement/</code></p>
<h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>音频标签</p>
<h3 id="全局属性新增"><a href="#全局属性新增" class="headerlink" title="全局属性新增"></a>全局属性新增</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-笔记 -前端</tag>
      </tags>
  </entry>
  <entry>
    <title>利用请求标头Referer实现一些有趣功能</title>
    <url>/posts/54e16799.html</url>
    <content><![CDATA[<blockquote>
<p>思路来源：<a href="https://digu.plus/post/87af0182c9ab4aa6adcd3c009c2360f0/">嘀咕虫洞 - 评论是否来自虫洞的另一端？ - 嘀咕 (digu.plus)</a></p>
</blockquote>
<p>当我们打开一个网站，在请求报头中的<code>Referer</code>属性会显示出请求当前网站的路径</p>
<p>例如我们在百度中使用搜索这个功能，跳转到其他页面后使用F12的网页检查器，找出跳转界面请求响应的信息，就可以在<code>Referer</code>找到请求现在网站原来的网址</p>
<p><img src="https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blogimage-20240527183348480.webp" alt="百度的请求报头"></p>
<p>利用这个信息可以做到什么呢，像<a href="https://digu.plus/post/87af0182c9ab4aa6adcd3c009c2360f0/">嘀咕虫洞 - 评论是否来自虫洞的另一端？</a>一样。做一个标记访客来源地址，给他们一个标志，实现一些特殊的样式。</p>
<p>也可以使用这个禁止某些来源网站的跳转</p>
<p>也可以使用<code>Referer</code>给访客来源进行统计，计算有哪些途径来源来优化网站，或者制成图表进行展示</p>
<p>更多作用等你探索…</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>博客圈学习</tag>
        <tag>请求报头</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/css/article_all_index.css</url>
    <content><![CDATA[#article_all  .category-list,#article_all .tag-cloud-list,#article_all #archive{

	margin:10px;
	padding:10px;
	border: solid 1px black;
	border-radius: 20px;

}


#recent-posts > .recent-post-item,.card-widget,.article_all,#post,#page{

background: linear-gradient(-45deg,rgba(255,255,255,.7),rgba(255,255,255,.8),rgba(255,255,255,.8),rgba(255,255,255,.7)) !important;
}
]]></content>
  </entry>
  <entry>
    <title>Blogtimeline</title>
    <url>/Blogtimeline/index.html</url>
    <content><![CDATA[<div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">2024</button><button type="button" class="tab " data-href="-2">2023</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="timeline  orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>3月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>15日</p>
</div></div><div class='timeline-item-content'><p> 使用静态网页做了一个音乐播放页面(很垃圾很丑陋)</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>30日</p>
</div></div><div class='timeline-item-content'><p>使用github的next-chatgpt镜像了自己的一个chatgpt</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>31日</p>
</div></div><div class='timeline-item-content'><p>使用cloudflare的免费cdn加速</p>
</div></div></div>

<div class="timeline  orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>4月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3日</p>
</div></div><div class='timeline-item-content'><p>又开始折腾了….看见京东云卖的云主机配置2h2g3M等等等等只要50一年，于是乎我就心动了，没有试过服务器建站的我决定尝试一下</p>
<p>于是我把github上的项目托管到了Vercel上，用子域名重定向到了Vercel上的项目地址  <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">本来有点想再买一个域名，现在手头不太宽绰</span>&lt;/span&gt; </p>
<p>有宝塔这玩意，用起来很是方便，不用多少步骤就一键安装好了LMNP四件套    <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">（虽然中间出了很多小插曲，买服务器的时候选择了镜像宝塔界面，没想到京东云的宝塔镜像有问题：不能下载东西无论怎么点都点不了，软件商店也是一片空白，在那干瞪眼了好久，还以为是便宜没有好货被骗了，后面更新了一下宝塔才可以使用）</span>&lt;/span&gt; ，再用WordPress这个使用人数最多的一键式建站   <span class="hide-inline"><button type="button" class="hide-button" style="background-color: black;color: white">
  </button><span class="hide-content">（写是不可能自己写的）</span>&lt;/span&gt; </p>
<p>  主域名现在在等着备案，看来这几天可以好好地选择一下主题了。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5日</p>
</div></div><div class='timeline-item-content'><p>利用 hexo-abbrlink 生成随机永久链接</p>
<p>利用 <a href="https://twikoo.js.org/">Twikoo</a> 作为评论系统</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11日</p>
</div></div><div class='timeline-item-content'><p>修改字体为<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai / 霞鹜文楷</a></p>
<p>修改代码字体为<a href="https://github.com/githubnext/monaspace">monaspace</a></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>18日</p>
</div></div><div class='timeline-item-content'><p>备案成功啦！</p>
<p>给博客加上了主页<a href="https://kiko2568.top">Kirari</a>,与<a href="https://life.kiko2568.top">生活博客</a>，并且全站使用https！</p>
<p>生活博客使用<a href="https://typecho.org/">Typecho</a>和<a href="https://github.com/liaocp666/Jasmine">Jasmine:typecho 主题</a>再加上自己的一些修改，完成了我之前的设想，一个主页两个博客（生活+学习向）</p>
</div></div></div></div><div class="tab-item-content" id="-2"><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>12月</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-14</p>
</div></div><div class='timeline-item-content'><p>看见博客主题推荐,想起<mark class="hl-label orange">github</mark> 上部署着几个<mark class="hl-label green">html</mark> 文件好几年了,当初就是想搞一个博客网站才有的那几个<mark class="hl-label green">html</mark> 文件,又看见了<mark class="hl-label bluelabel">hexo</mark> 部署网站可以使用<mark class="hl-label purple">markdown</mark> 语法,感觉实属方便。便开始了折腾</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-15</p>
</div></div><div class='timeline-item-content'><p>部署好<mark class="hl-label blue">hexo</mark> ,并且上传到了<mark class="hl-label orange">github</mark> ，接下来就是极其折磨的选择主题</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 12-17</p>
</div></div><div class='timeline-item-content'><p>选了butterfly作为主题(因为有一堆外挂标签太好用了)，做好了大部分的使用文档的调整</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-18</p>
</div></div><div class='timeline-item-content'><p>看到一篇可以迁移其他主题的外挂标签，我馋<mark class="hl-label red">volantis</mark> 的一些标签外挂,可惜这段时间课设多有些忙,有时间一定迁移过来！！！</p>
</div></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
]]></content>
  </entry>
  <entry>
    <title>相册</title>
    <url>/Gallery/index.html</url>
    <content><![CDATA[<hr>
<h1 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h1><div class="gallery-group-main">
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755412321.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">桐棘千崎</div>
  <p>关于桐棘千崎那些事</p>
  <a href='/Gallery/tjqq'></a>
  </figcaption>
  </figure>
  
</div>

<hr>
<h1 id="风景"><a href="#风景" class="headerlink" title="风景"></a>风景</h1><hr>
]]></content>
  </entry>
  <entry>
    <title>桐崎千棘</title>
    <url>/Gallery/tjqq.html</url>
    <content><![CDATA[<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown784dfc78fb028d882f2aba68f2d498fad896511f.jpg_400x300.jpg","alt":"784dfc78fb028d882f2aba68f2d498fad896511f.jpg_400x300"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown5569afebd3e716184e57c307100667c8.jpg","alt":"5569afebd3e716184e57c307100667c8"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown9610997eca8065381191964080dda144ad348268.jpg","alt":"9610997eca8065381191964080dda144ad348268"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownb59c72d26b54dedeff3d93e6e5e0acbb.jpg","alt":"b59c72d26b54dedeff3d93e6e5e0acbb"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownd8mto5x-49b1dcea-09b0-4ccf-a783-8166e8c0f4ef.png","alt":"d8mto5x-49b1dcea-09b0-4ccf-a783-8166e8c0f4ef"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownec7a9d7236daad223f89f1cd3cc27d29.png","alt":"ec7a9d7236daad223f89f1cd3cc27d29"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdownillust_57883693_20200606_100354.png","alt":"illust_57883693_20200606_100354"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownR-C.png","alt":"R-C"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdowntqqh.png","alt":"tqqh"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown4d72382ae8a09b6185800cd8764fce4d.jpg","alt":"4d72382ae8a09b6185800cd8764fce4d"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5Cmarkdown562ad9eb819bf542e1d18e30dc166e2a.jpg","alt":"562ad9eb819bf542e1d18e30dc166e2a"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755426550.png","alt":"Image_1702755426550"},{"url":"https://yee-1312555989.cos.ap-guangzhou.myqcloud.com/%5CmarkdownImage_1702755412321.png","alt":"Image_1702755412321"}]</div>
      <div class="gallery-items">
      </div>
    </div>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/fontFamily.css</url>
    <content><![CDATA[/* @font-face {
  font-family: 'LXGWWenKaiMonoScreen';
  font-display: swap;
  src: url('https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/files/lxgwwenkaiscreen-subset-77.woff2') format("woff2");
} 
已经用cdn替代

*/
@font-face {
  font-family: 'SFMono-Regular';
  font-display: swap;
  src: url('../font/SFMono-Regular.otf') format("truetype");
}

/* @font-face {
  font-family: 'MonaspaceRadonVarVF';
  font-display: swap;
  src: url('../font/MonaspaceRadonVarVF.ttf') format("truetype");
} */

@font-face {
  font-family: 'MonaspaceRadonVarVF';
  font-display: swap;
  src: url('../font/MonaspaceRadonVarVF.woff2') format("woff2");
}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/footer_kirari.css</url>
    <content><![CDATA[#footer-wrap{
    
    padding: 1rem;
    //color: #363636;
   // margin-top: 1rem;
    //background: #f7f7f9;
    display: flex;
    overflow: hidden;
    z-index: 10;
    transition: .3s;
    border-top: 2px solid #e3e8f7;
    //margin-bottom: -10px;
}




#footer_right {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
}

#footer_left {
    display: flex;
    flex-wrap: wrap;
    min-height: 32px;
    align-items: center;
}

 #footer-bar-links {
    margin: 0 4px;
    
   // font-size: .88rem;
   //s font-weight: 700;
    white-space: nowrap;
    padding: 8px;
    border-radius: 12px;
    line-height: 1;

    display: flex;
    justify-content: space-between;
    max-width: 1400px;
    width: 100%;
    margin: 0 auto;
    flex-wrap: wrap;
    align-items: center;
    line-height: 1;
}

/*  */
#nav .kirari-nav-box {
transition: .5s   ;

   max-width: 1170px;
    width: 100%;
    display: flex;
    justify-content: center; /* 新增这一行 */
    align-items: center;
    margin: 0 auto; /* 可选：将此容器水平居中 */
}




/*
div#rightside-config-show {
    top: -150px;
    position: absolute;
}*/]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/widget_poem.css</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/randomTopImg.js</url>
    <content><![CDATA[
const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

const jsonUrl = isMobile ? '../json/m_top_img.json' : '../json/top_img.json';
const bg_json = "../json/bg.json"
// 随机背景图
fetch(bg_json)
  .then(response => response.json())
  .then(data => {
    const bg_json_len = data.color.length;
    const random_bg = getRandomInt(0, bg_json_len);
    const bg_color = document.getElementById("body-wrap");
    const bg_ran_re = data.color[random_bg];
    bg_color.style.background = bg_ran_re.c1;
    bg_color.style.background = bg_ran_re.c2;
    bg_color.style.background = bg_ran_re.c3;
  })
  .catch(error => {
    console.error('Error fetching data:', error);
  });

// 头顶图随机
fetch(jsonUrl)
  .then(response => {
    if (!response.ok) {
      throw new Error('网络响应异常');
    }
    return response.json();
  })
  .then(data => {

    var img_length_top = data.links.length;
    var random_img_top =  getRandomInt(0,img_length_top);
    var img_top = document.getElementById("page-header");
    var imgDivTopUrl = data.links[random_img_top]; 
    
    img_top.style.backgroundImage = 'url(' + imgDivTopUrl + ')';

    console.log(imgDivTopUrl);
  })
  .catch(error => {
    console.error('获取数据时发生问题:', error);
  });

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}



///以下是根据屏幕变化修改导航栏的 宽度


var screenWidth;
var screenHeight ;
  function updateScreenSize() {
    screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    // document.getElementById('screenSizeOutput').textContent = `Screen Width: ${screenWidth}px, Screen Height: ${screenHeight}px`;
  }

  // Initial call to update screen size information
  updateScreenSize();

  // Event listener for window resize event
  window.addEventListener('resize', updateScreenSize);

  function updateScrollDistance() {
    const scrollDistance = window.pageYOffset || document.documentElement.scrollTop;
    const kirari_box_nav = document.querySelectorAll('.kirari-nav-box');

  kirari_box_nav.forEach(function(element) {
    if (scrollDistance < screenHeight*7/10) {
      element.style.maxWidth = `${screenWidth}px`;
    } else {
      element.style.maxWidth = '1170px';
    }
  });
  }

  // Initial call to update scroll distance
  updateScrollDistance();

  // Event listener for scroll event
  window.addEventListener('scroll', updateScrollDistance);



//sakana
  document.addEventListener('DOMContentLoaded', function() {
    // let i=0;
    var sakanawidgetctrl = document.querySelectorAll('.sakana-widget-ctrl a');
    sakanawidgetctrl.forEach(function(element) {
        // i+=1;
        // if(i==3){
          element.style.display = 'none';
        // }
    });
});
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/bg.json</url>
    <content><![CDATA[{"color":[{"c1":" #ff6e7f","c2":" -webkit-linear-gradient(to left, #bfe9ff, #ff6e7f)","c3":" linear-gradient(to left, #bfe9ff, #ff6e7f)"},{"c1":" #77A1D3","c2":" -webkit-linear-gradient(to left, #E684AE, #79CBCA, #77A1D3)","c3":" linear-gradient(to left, #E684AE, #79CBCA, #77A1D3)"},{"c1":" #314755","c2":" -webkit-linear-gradient(to left, #26a0da, #314755)","c3":" linear-gradient(to left, #26a0da, #314755)"},{"c1":" #e65c00","c2":" -webkit-linear-gradient(to left, #F9D423, #e65c00)","c3":" linear-gradient(to left, #F9D423, #e65c00)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to left, #6dd5ed, #2193b0)","c3":" linear-gradient(to left, #6dd5ed, #2193b0)"},{"c1":" #cc2b5e","c2":" -webkit-linear-gradient(to left, #753a88, #cc2b5e)","c3":" linear-gradient(to left, #753a88, #cc2b5e)"},{"c1":" #ec008c","c2":" -webkit-linear-gradient(to left, #fc6767, #ec008c)","c3":" linear-gradient(to left, #fc6767, #ec008c)"},{"c1":" #00467F","c2":" -webkit-linear-gradient(to left, #A5CC82, #00467F)","c3":" linear-gradient(to left, #A5CC82, #00467F)"},{"c1":" #00467F","c2":" -webkit-linear-gradient(to right, #A5CC82, #00467F)","c3":" linear-gradient(to right, #A5CC82, #00467F)"},{"c1":" #076585","c2":" -webkit-linear-gradient(to left, #fff, #076585)","c3":" linear-gradient(to left, #fff, #076585)"},{"c1":" #076585","c2":" -webkit-linear-gradient(to right, #fff, #076585)","c3":" linear-gradient(to right, #fff, #076585)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to right, #536976, #BBD2C5)","c3":" linear-gradient(to right, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to bottom, #536976, #BBD2C5)","c3":" linear-gradient(to bottom, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to right, #536976, #BBD2C5)","c3":" linear-gradient(to right, #536976, #BBD2C5)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to right, #fbc7d4, #9796f0)","c3":" linear-gradient(to right, #fbc7d4, #9796f0)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to bottom, #fbc7d4, #9796f0)","c3":" linear-gradient(to bottom, #fbc7d4, #9796f0)"},{"c1":" #9796f0","c2":" -webkit-linear-gradient(to left, #fbc7d4, #9796f0)","c3":" linear-gradient(to left, #fbc7d4, #9796f0)"},{"c1":" #B79891","c2":" -webkit-linear-gradient(to top, #94716B, #B79891)","c3":" linear-gradient(to top, #94716B, #B79891)"},{"c1":" #B79891","c2":" -webkit-linear-gradient(to right, #94716B, #B79891)","c3":" linear-gradient(to right, #94716B, #B79891)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to bottom, #292E49, #536976, #BBD2C5)","c3":" linear-gradient(to bottom, #292E49, #536976, #BBD2C5)"},{"c1":" #BBD2C5","c2":" -webkit-linear-gradient(to left, #292E49, #536976, #BBD2C5)","c3":" linear-gradient(to left, #292E49, #536976, #BBD2C5)"},{"c1":" #acb6e5","c2":" -webkit-linear-gradient(to top, #86fde8, #acb6e5)","c3":" linear-gradient(to top, #86fde8, #acb6e5)"},{"c1":" #acb6e5","c2":" -webkit-linear-gradient(to right, #86fde8, #acb6e5)","c3":" linear-gradient(to right, #86fde8, #acb6e5)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to left, #799F0C, #FFE000)","c3":" linear-gradient(to left, #799F0C, #FFE000)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to top, #799F0C, #FFE000)","c3":" linear-gradient(to top, #799F0C, #FFE000)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #E4E5E6, #00416A)","c3":" linear-gradient(to right, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to bottom, #E4E5E6, #00416A)","c3":" linear-gradient(to bottom, #E4E5E6, #00416A)"},{"c1":" #ffe259","c2":" -webkit-linear-gradient(to bottom, #ffa751, #ffe259)","c3":" linear-gradient(to bottom, #ffa751, #ffe259)"},{"c1":" #ffe259","c2":" -webkit-linear-gradient(to left, #ffa751, #ffe259)","c3":" linear-gradient(to left, #ffa751, #ffe259)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to right, #ACBB78, #799F0C)","c3":" linear-gradient(to right, #ACBB78, #799F0C)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to bottom, #ACBB78, #799F0C)","c3":" linear-gradient(to bottom, #ACBB78, #799F0C)"},{"c1":" #799F0C","c2":" -webkit-linear-gradient(to left, #ACBB78, #799F0C)","c3":" linear-gradient(to left, #ACBB78, #799F0C)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to left, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to left, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to top, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to top, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #5433FF","c2":" -webkit-linear-gradient(to right, #A5FECB, #20BDFF, #5433FF)","c3":" linear-gradient(to right, #A5FECB, #20BDFF, #5433FF)"},{"c1":" #0052D4","c2":" -webkit-linear-gradient(to right, #6FB1FC, #4364F7, #0052D4)","c3":" linear-gradient(to right, #6FB1FC, #4364F7, #0052D4)"},{"c1":" #0052D4","c2":" -webkit-linear-gradient(to bottom, #6FB1FC, #4364F7, #0052D4)","c3":" linear-gradient(to bottom, #6FB1FC, #4364F7, #0052D4)"},{"c1":" #334d50","c2":" -webkit-linear-gradient(to right, #cbcaa5, #334d50)","c3":" linear-gradient(to right, #cbcaa5, #334d50)"},{"c1":" #334d50","c2":" -webkit-linear-gradient(to top, #cbcaa5, #334d50)","c3":" linear-gradient(to top, #cbcaa5, #334d50)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #FFE000, #799F0C, #00416A)","c3":" linear-gradient(to right, #FFE000, #799F0C, #00416A)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to right, #ACBB78, #F7F8F8)","c3":" linear-gradient(to right, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to bottom, #ACBB78, #F7F8F8)","c3":" linear-gradient(to bottom, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to left, #ACBB78, #F7F8F8)","c3":" linear-gradient(to left, #ACBB78, #F7F8F8)"},{"c1":" #F7F8F8","c2":" -webkit-linear-gradient(to top, #ACBB78, #F7F8F8)","c3":" linear-gradient(to top, #ACBB78, #F7F8F8)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to top, #799F0C, #FFE000)","c3":" linear-gradient(to top, #799F0C, #FFE000)"},{"c1":" #FFE000","c2":" -webkit-linear-gradient(to right, #799F0C, #FFE000)","c3":" linear-gradient(to right, #799F0C, #FFE000)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to top, #E4E5E6, #00416A)","c3":" linear-gradient(to top, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to right, #E4E5E6, #00416A)","c3":" linear-gradient(to right, #E4E5E6, #00416A)"},{"c1":" #00416A","c2":" -webkit-linear-gradient(to bottom, #E4E5E6, #00416A)","c3":" linear-gradient(to bottom, #E4E5E6, #00416A)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to bottom, #2c3e50, #bdc3c7)","c3":" linear-gradient(to bottom, #2c3e50, #bdc3c7)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to left, #2c3e50, #bdc3c7)","c3":" linear-gradient(to left, #2c3e50, #bdc3c7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to left, #ffdde1, #ee9ca7)","c3":" linear-gradient(to left, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to top, #ffdde1, #ee9ca7)","c3":" linear-gradient(to top, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to right, #ffdde1, #ee9ca7)","c3":" linear-gradient(to right, #ffdde1, #ee9ca7)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to bottom, #ffdde1, #ee9ca7)","c3":" linear-gradient(to bottom, #ffdde1, #ee9ca7)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to bottom, #6dd5ed, #2193b0)","c3":" linear-gradient(to bottom, #6dd5ed, #2193b0)"},{"c1":" #2193b0","c2":" -webkit-linear-gradient(to left, #6dd5ed, #2193b0)","c3":" linear-gradient(to left, #6dd5ed, #2193b0)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to left, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to left, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to top, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to top, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #C6FFDD","c2":" -webkit-linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)","c3":" linear-gradient(to right, #f7797d, #FBD786, #C6FFDD)"},{"c1":" #0F2027","c2":" -webkit-linear-gradient(to right, #2C5364, #203A43, #0F2027)","c3":" linear-gradient(to right, #2C5364, #203A43, #0F2027)"},{"c1":" #b92b27","c2":" -webkit-linear-gradient(to right, #1565C0, #b92b27)","c3":" linear-gradient(to right, #1565C0, #b92b27)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to right, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to right, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to left, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to left, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #2980B9","c2":" -webkit-linear-gradient(to top, #FFFFFF, #6DD5FA, #2980B9)","c3":" linear-gradient(to top, #FFFFFF, #6DD5FA, #2980B9)"},{"c1":" #FF0099","c2":" -webkit-linear-gradient(to left, #493240, #FF0099)","c3":" linear-gradient(to left, #493240, #FF0099)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to left, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to left, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #aa4b6b","c2":" -webkit-linear-gradient(to bottom, #3b8d99, #6b6b83, #aa4b6b)","c3":" linear-gradient(to bottom, #3b8d99, #6b6b83, #aa4b6b)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to left, #99f2c8, #1f4037)","c3":" linear-gradient(to left, #99f2c8, #1f4037)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to top, #99f2c8, #1f4037)","c3":" linear-gradient(to top, #99f2c8, #1f4037)"},{"c1":" #1f4037","c2":" -webkit-linear-gradient(to right, #99f2c8, #1f4037)","c3":" linear-gradient(to right, #99f2c8, #1f4037)"},{"c1":" #7F7FD5","c2":" -webkit-linear-gradient(to bottom, #91EAE4, #86A8E7, #7F7FD5)","c3":" linear-gradient(to bottom, #91EAE4, #86A8E7, #7F7FD5)"},{"c1":" #7F7FD5","c2":" -webkit-linear-gradient(to left, #91EAE4, #86A8E7, #7F7FD5)","c3":" linear-gradient(to left, #91EAE4, #86A8E7, #7F7FD5)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to right, #f4791f, #659999)","c3":" linear-gradient(to right, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to bottom, #f4791f, #659999)","c3":" linear-gradient(to bottom, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to left, #f4791f, #659999)","c3":" linear-gradient(to left, #f4791f, #659999)"},{"c1":" #659999","c2":" -webkit-linear-gradient(to right, #f4791f, #659999)","c3":" linear-gradient(to right, #f4791f, #659999)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to right, #6be585, #dd3e54)","c3":" linear-gradient(to right, #6be585, #dd3e54)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to bottom, #6be585, #dd3e54)","c3":" linear-gradient(to bottom, #6be585, #dd3e54)"},{"c1":" #dd3e54","c2":" -webkit-linear-gradient(to left, #6be585, #dd3e54)","c3":" linear-gradient(to left, #6be585, #dd3e54)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to right, #ffd452, #544a7d)","c3":" linear-gradient(to right, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to bottom, #ffd452, #544a7d)","c3":" linear-gradient(to bottom, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to left, #ffd452, #544a7d)","c3":" linear-gradient(to left, #ffd452, #544a7d)"},{"c1":" #544a7d","c2":" -webkit-linear-gradient(to top, #ffd452, #544a7d)","c3":" linear-gradient(to top, #ffd452, #544a7d)"},{"c1":" #009FFF","c2":" -webkit-linear-gradient(to left, #ec2F4B, #009FFF)","c3":" linear-gradient(to left, #ec2F4B, #009FFF)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to left, #eaafc8, #654ea3)","c3":" linear-gradient(to left, #eaafc8, #654ea3)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to top, #eaafc8, #654ea3)","c3":" linear-gradient(to top, #eaafc8, #654ea3)"},{"c1":" #654ea3","c2":" -webkit-linear-gradient(to right, #eaafc8, #654ea3)","c3":" linear-gradient(to right, #eaafc8, #654ea3)"},{"c1":" #a8ff78","c2":" -webkit-linear-gradient(to right, #78ffd6, #a8ff78)","c3":" linear-gradient(to right, #78ffd6, #a8ff78)"},{"c1":" #a8ff78","c2":" -webkit-linear-gradient(to bottom, #78ffd6, #a8ff78)","c3":" linear-gradient(to bottom, #78ffd6, #a8ff78)"},{"c1":" #FDC830","c2":" -webkit-linear-gradient(to right, #F37335, #FDC830)","c3":" linear-gradient(to right, #F37335, #FDC830)"},{"c1":" #FDC830","c2":" -webkit-linear-gradient(to left, #F37335, #FDC830)","c3":" linear-gradient(to left, #F37335, #FDC830)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to bottom, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to bottom, #FFFFFF, #FFEFBA)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to left, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to left, #FFFFFF, #FFEFBA)"},{"c1":" #FFEFBA","c2":" -webkit-linear-gradient(to top, #FFFFFF, #FFEFBA)","c3":" linear-gradient(to top, #FFFFFF, #FFEFBA)"},{"c1":" #005AA7","c2":" -webkit-linear-gradient(to right, #FFFDE4, #005AA7)","c3":" linear-gradient(to right, #FFFDE4, #005AA7)"},{"c1":" #005AA7","c2":" -webkit-linear-gradient(to bottom, #FFFDE4, #005AA7)","c3":" linear-gradient(to bottom, #FFFDE4, #005AA7)"},{"c1":" #636363","c2":" -webkit-linear-gradient(to bottom, #a2ab58, #636363)","c3":" linear-gradient(to bottom, #a2ab58, #636363)"},{"c1":" #636363","c2":" -webkit-linear-gradient(to left, #a2ab58, #636363)","c3":" linear-gradient(to left, #a2ab58, #636363)"},{"c1":" #ad5389","c2":" -webkit-linear-gradient(to right, #3c1053, #ad5389)","c3":" linear-gradient(to right, #3c1053, #ad5389)"},{"c1":" #a8c0ff","c2":" -webkit-linear-gradient(to right, #3f2b96, #a8c0ff)","c3":" linear-gradient(to right, #3f2b96, #a8c0ff)"},{"c1":" #4e54c8","c2":" -webkit-linear-gradient(to right, #8f94fb, #4e54c8)","c3":" linear-gradient(to right, #8f94fb, #4e54c8)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to right, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to right, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to bottom, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to bottom, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to left, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to left, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #355C7D","c2":" -webkit-linear-gradient(to top, #C06C84, #6C5B7B, #355C7D)","c3":" linear-gradient(to top, #C06C84, #6C5B7B, #355C7D)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to right, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to right, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to left, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to left, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #40E0D0","c2":" -webkit-linear-gradient(to bottom, #FF0080, #FF8C00, #40E0D0)","c3":" linear-gradient(to bottom, #FF0080, #FF8C00, #40E0D0)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to bottom, #DECBA4, #3E5151)","c3":" linear-gradient(to bottom, #DECBA4, #3E5151)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to left, #DECBA4, #3E5151)","c3":" linear-gradient(to left, #DECBA4, #3E5151)"},{"c1":" #3E5151","c2":" -webkit-linear-gradient(to top, #DECBA4, #3E5151)","c3":" linear-gradient(to top, #DECBA4, #3E5151)"},{"c1":" #108dc7","c2":" -webkit-linear-gradient(to right, #ef8e38, #108dc7)","c3":" linear-gradient(to right, #ef8e38, #108dc7)"},{"c1":" #c94b4b","c2":" -webkit-linear-gradient(to right, #4b134f, #c94b4b)","c3":" linear-gradient(to right, #4b134f, #c94b4b)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to right, #b20a2c, #fffbd5)","c3":" linear-gradient(to right, #b20a2c, #fffbd5)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to bottom, #b20a2c, #fffbd5)","c3":" linear-gradient(to bottom, #b20a2c, #fffbd5)"},{"c1":" #fffbd5","c2":" -webkit-linear-gradient(to left, #b20a2c, #fffbd5)","c3":" linear-gradient(to left, #b20a2c, #fffbd5)"},{"c1":" #D3CCE3","c2":" -webkit-linear-gradient(to left, #E9E4F0, #D3CCE3)","c3":" linear-gradient(to left, #E9E4F0, #D3CCE3)"},{"c1":" #3C3B3F","c2":" -webkit-linear-gradient(to bottom, #605C3C, #3C3B3F)","c3":" linear-gradient(to bottom, #605C3C, #3C3B3F)"},{"c1":" #3C3B3F","c2":" -webkit-linear-gradient(to right, #605C3C, #3C3B3F)","c3":" linear-gradient(to right, #605C3C, #3C3B3F)"},{"c1":" #CAC531","c2":" -webkit-linear-gradient(to right, #F3F9A7, #CAC531)","c3":" linear-gradient(to right, #F3F9A7, #CAC531)"},{"c1":" #CAC531","c2":" -webkit-linear-gradient(to left, #F3F9A7, #CAC531)","c3":" linear-gradient(to left, #F3F9A7, #CAC531)"},{"c1":" #800080","c2":" -webkit-linear-gradient(to left, #ffc0cb, #800080)","c3":" linear-gradient(to left, #ffc0cb, #800080)"},{"c1":" #800080","c2":" -webkit-linear-gradient(to right, #ffc0cb, #800080)","c3":" linear-gradient(to right, #ffc0cb, #800080)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to right, #f05053, #e1eec3)","c3":" linear-gradient(to right, #f05053, #e1eec3)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to bottom, #f05053, #e1eec3)","c3":" linear-gradient(to bottom, #f05053, #e1eec3)"},{"c1":" #e1eec3","c2":" -webkit-linear-gradient(to left, #f05053, #e1eec3)","c3":" linear-gradient(to left, #f05053, #e1eec3)"},{"c1":" #22c1c3","c2":" -webkit-linear-gradient(to left, #fdbb2d, #22c1c3)","c3":" linear-gradient(to left, #fdbb2d, #22c1c3)"},{"c1":" #22c1c3","c2":" -webkit-linear-gradient(to right, #fdbb2d, #22c1c3)","c3":" linear-gradient(to right, #fdbb2d, #22c1c3)"},{"c1":" #C9D6FF","c2":" -webkit-linear-gradient(to left, #E2E2E2, #C9D6FF)","c3":" linear-gradient(to left, #E2E2E2, #C9D6FF)"},{"c1":" #d9a7c7","c2":" -webkit-linear-gradient(to left, #fffcdc, #d9a7c7)","c3":" linear-gradient(to left, #fffcdc, #d9a7c7)"},{"c1":" #d9a7c7","c2":" -webkit-linear-gradient(to right, #fffcdc, #d9a7c7)","c3":" linear-gradient(to right, #fffcdc, #d9a7c7)"},{"c1":" #1c92d2","c2":" -webkit-linear-gradient(to right, #f2fcfe, #1c92d2)","c3":" linear-gradient(to right, #f2fcfe, #1c92d2)"},{"c1":" #3A1C71","c2":" -webkit-linear-gradient(to left, #FFAF7B, #D76D77, #3A1C71)","c3":" linear-gradient(to left, #FFAF7B, #D76D77, #3A1C71)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to left, #FFFFFF, #EF3B36)","c3":" linear-gradient(to left, #FFFFFF, #EF3B36)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to right, #FFFFFF, #EF3B36)","c3":" linear-gradient(to right, #FFFFFF, #EF3B36)"},{"c1":" #EF3B36","c2":" -webkit-linear-gradient(to bottom, #FFFFFF, #EF3B36)","c3":" linear-gradient(to bottom, #FFFFFF, #EF3B36)"},{"c1":" #30E8BF","c2":" -webkit-linear-gradient(to top, #FF8235, #30E8BF)","c3":" linear-gradient(to top, #FF8235, #30E8BF)"},{"c1":" #30E8BF","c2":" -webkit-linear-gradient(to right, #FF8235, #30E8BF)","c3":" linear-gradient(to right, #FF8235, #30E8BF)"},{"c1":" #D66D75","c2":" -webkit-linear-gradient(to right, #E29587, #D66D75)","c3":" linear-gradient(to right, #E29587, #D66D75)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to right, #cbb4d4, #20002c)","c3":" linear-gradient(to right, #cbb4d4, #20002c)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to bottom, #cbb4d4, #20002c)","c3":" linear-gradient(to bottom, #cbb4d4, #20002c)"},{"c1":" #20002c","c2":" -webkit-linear-gradient(to top, #cbb4d4, #20002c)","c3":" linear-gradient(to top, #cbb4d4, #20002c)"},{"c1":" #34e89e","c2":" -webkit-linear-gradient(to top, #0f3443, #34e89e)","c3":" linear-gradient(to top, #0f3443, #34e89e)"},{"c1":" #34e89e","c2":" -webkit-linear-gradient(to right, #0f3443, #34e89e)","c3":" linear-gradient(to right, #0f3443, #34e89e)"},{"c1":" #6190E8","c2":" -webkit-linear-gradient(to right, #A7BFE8, #6190E8)","c3":" linear-gradient(to right, #A7BFE8, #6190E8)"},{"c1":" #6190E8","c2":" -webkit-linear-gradient(to left, #A7BFE8, #6190E8)","c3":" linear-gradient(to left, #A7BFE8, #6190E8)"},{"c1":" #44A08D","c2":" -webkit-linear-gradient(to left, #093637, #44A08D)","c3":" linear-gradient(to left, #093637, #44A08D)"},{"c1":" #4568DC","c2":" -webkit-linear-gradient(to left, #B06AB3, #4568DC)","c3":" linear-gradient(to left, #B06AB3, #4568DC)"},{"c1":" #4568DC","c2":" -webkit-linear-gradient(to right, #B06AB3, #4568DC)","c3":" linear-gradient(to right, #B06AB3, #4568DC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to right, #191654, #43C6AC)","c3":" linear-gradient(to right, #191654, #43C6AC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to right, #F8FFAE, #43C6AC)","c3":" linear-gradient(to right, #F8FFAE, #43C6AC)"},{"c1":" #43C6AC","c2":" -webkit-linear-gradient(to bottom, #F8FFAE, #43C6AC)","c3":" linear-gradient(to bottom, #F8FFAE, #43C6AC)"},{"c1":" #FFAFBD","c2":" -webkit-linear-gradient(to bottom, #ffc3a0, #FFAFBD)","c3":" linear-gradient(to bottom, #ffc3a0, #FFAFBD)"},{"c1":" #F0F2F0","c2":" -webkit-linear-gradient(to top, #000C40, #F0F2F0)","c3":" linear-gradient(to top, #000C40, #F0F2F0)"},{"c1":" #E8CBC0","c2":" -webkit-linear-gradient(to top, #636FA4, #E8CBC0)","c3":" linear-gradient(to top, #636FA4, #E8CBC0)"},{"c1":" #E8CBC0","c2":" -webkit-linear-gradient(to left, #636FA4, #E8CBC0)","c3":" linear-gradient(to left, #636FA4, #E8CBC0)"},{"c1":" #DBE6F6","c2":" -webkit-linear-gradient(to left, #C5796D, #DBE6F6)","c3":" linear-gradient(to left, #C5796D, #DBE6F6)"},{"c1":" #DBE6F6","c2":" -webkit-linear-gradient(to top, #C5796D, #DBE6F6)","c3":" linear-gradient(to top, #C5796D, #DBE6F6)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to top, #3B4371, #F3904F)","c3":" linear-gradient(to top, #3B4371, #F3904F)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to right, #3B4371, #F3904F)","c3":" linear-gradient(to right, #3B4371, #F3904F)"},{"c1":" #F3904F","c2":" -webkit-linear-gradient(to bottom, #3B4371, #F3904F)","c3":" linear-gradient(to bottom, #3B4371, #F3904F)"},{"c1":" #A770EF","c2":" -webkit-linear-gradient(to bottom, #FDB99B, #CF8BF3, #A770EF)","c3":" linear-gradient(to bottom, #FDB99B, #CF8BF3, #A770EF)"},{"c1":" #41295a","c2":" -webkit-linear-gradient(to bottom, #2F0743, #41295a)","c3":" linear-gradient(to bottom, #2F0743, #41295a)"},{"c1":" #f4c4f3","c2":" -webkit-linear-gradient(to bottom, #fc67fa, #f4c4f3)","c3":" linear-gradient(to bottom, #fc67fa, #f4c4f3)"},{"c1":" #f4c4f3","c2":" -webkit-linear-gradient(to left, #fc67fa, #f4c4f3)","c3":" linear-gradient(to left, #fc67fa, #f4c4f3)"},{"c1":" #00c3ff","c2":" -webkit-linear-gradient(to bottom, #ffff1c, #00c3ff)","c3":" linear-gradient(to bottom, #ffff1c, #00c3ff)"},{"c1":" #ff7e5f","c2":" -webkit-linear-gradient(to bottom, #feb47b, #ff7e5f)","c3":" linear-gradient(to bottom, #feb47b, #ff7e5f)"},{"c1":" #de6161","c2":" -webkit-linear-gradient(to bottom, #2657eb, #de6161)","c3":" linear-gradient(to bottom, #2657eb, #de6161)"},{"c1":" #ef32d9","c2":" -webkit-linear-gradient(to left, #89fffd, #ef32d9)","c3":" linear-gradient(to left, #89fffd, #ef32d9)"},{"c1":" #3a6186","c2":" -webkit-linear-gradient(to left, #89253e, #3a6186)","c3":" linear-gradient(to left, #89253e, #3a6186)"},{"c1":" #3a6186","c2":" -webkit-linear-gradient(to right, #89253e, #3a6186)","c3":" linear-gradient(to right, #89253e, #3a6186)"},{"c1":" #4ECDC4","c2":" -webkit-linear-gradient(to right, #556270, #4ECDC4)","c3":" linear-gradient(to right, #556270, #4ECDC4)"},{"c1":" #A1FFCE","c2":" -webkit-linear-gradient(to right, #FAFFD1, #A1FFCE)","c3":" linear-gradient(to right, #FAFFD1, #A1FFCE)"},{"c1":" #bdc3c7","c2":" -webkit-linear-gradient(to bottom, #2c3e50, #bdc3c7)","c3":" linear-gradient(to bottom, #2c3e50, #bdc3c7)"},{"c1":" #ffd89b","c2":" -webkit-linear-gradient(to bottom, #19547b, #ffd89b)","c3":" linear-gradient(to bottom, #19547b, #ffd89b)"},{"c1":" #ffd89b","c2":" -webkit-linear-gradient(to left, #19547b, #ffd89b)","c3":" linear-gradient(to left, #19547b, #ffd89b)"},{"c1":" #42275a","c2":" -webkit-linear-gradient(to left, #734b6d, #42275a)","c3":" linear-gradient(to left, #734b6d, #42275a)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to left, #FD746C, #2C3E50)","c3":" linear-gradient(to left, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to right, #FD746C, #2C3E50)","c3":" linear-gradient(to right, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to bottom, #FD746C, #2C3E50)","c3":" linear-gradient(to bottom, #FD746C, #2C3E50)"},{"c1":" #2C3E50","c2":" -webkit-linear-gradient(to top, #FD746C, #2C3E50)","c3":" linear-gradient(to top, #FD746C, #2C3E50)"},{"c1":" #e96443","c2":" -webkit-linear-gradient(to top, #904e95, #e96443)","c3":" linear-gradient(to top, #904e95, #e96443)"},{"c1":" #e96443","c2":" -webkit-linear-gradient(to bottom, #904e95, #e96443)","c3":" linear-gradient(to bottom, #904e95, #e96443)"},{"c1":" #0B486B","c2":" -webkit-linear-gradient(to bottom, #F56217, #0B486B)","c3":" linear-gradient(to bottom, #F56217, #0B486B)"},{"c1":" #EECDA3","c2":" -webkit-linear-gradient(to top, #EF629F, #EECDA3)","c3":" linear-gradient(to top, #EF629F, #EECDA3)"},{"c1":" #EECDA3","c2":" -webkit-linear-gradient(to right, #EF629F, #EECDA3)","c3":" linear-gradient(to right, #EF629F, #EECDA3)"},{"c1":" #1D4350","c2":" -webkit-linear-gradient(to right, #A43931, #1D4350)","c3":" linear-gradient(to right, #A43931, #1D4350)"},{"c1":" #BA5370","c2":" -webkit-linear-gradient(to right, #F4E2D8, #BA5370)","c3":" linear-gradient(to right, #F4E2D8, #BA5370)"},{"c1":" #BA5370","c2":" -webkit-linear-gradient(to left, #F4E2D8, #BA5370)","c3":" linear-gradient(to left, #F4E2D8, #BA5370)"},{"c1":" #5A3F37","c2":" -webkit-linear-gradient(to left, #2C7744, #5A3F37)","c3":" linear-gradient(to left, #2C7744, #5A3F37)"},{"c1":" #5A3F37","c2":" -webkit-linear-gradient(to top, #2C7744, #5A3F37)","c3":" linear-gradient(to top, #2C7744, #5A3F37)"},{"c1":" #2F7336","c2":" -webkit-linear-gradient(to top, #AA3A38, #2F7336)","c3":" linear-gradient(to top, #AA3A38, #2F7336)"},{"c1":" #114357","c2":" -webkit-linear-gradient(to top, #F29492, #114357)","c3":" linear-gradient(to top, #F29492, #114357)"},{"c1":" #114357","c2":" -webkit-linear-gradient(to left, #F29492, #114357)","c3":" linear-gradient(to left, #F29492, #114357)"},{"c1":" #eacda3","c2":" -webkit-linear-gradient(to left, #d6ae7b, #eacda3)","c3":" linear-gradient(to left, #d6ae7b, #eacda3)"},{"c1":" #403A3E","c2":" -webkit-linear-gradient(to left, #BE5869, #403A3E)","c3":" linear-gradient(to left, #BE5869, #403A3E)"},{"c1":" #CCCCB2","c2":" -webkit-linear-gradient(to left, #757519, #CCCCB2)","c3":" linear-gradient(to left, #757519, #CCCCB2)"},{"c1":" #304352","c2":" -webkit-linear-gradient(to left, #d7d2cc, #304352)","c3":" linear-gradient(to left, #d7d2cc, #304352)"},{"c1":" #ee9ca7","c2":" -webkit-linear-gradient(to left, #ffdde1, #ee9ca7)","c3":" linear-gradient(to left, #ffdde1, #ee9ca7)"},{"c1":" #BA8B02","c2":" -webkit-linear-gradient(to top, #181818, #BA8B02)","c3":" linear-gradient(to top, #181818, #BA8B02)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to top, #135058, #F1F2B5)","c3":" linear-gradient(to top, #135058, #F1F2B5)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to right, #135058, #F1F2B5)","c3":" linear-gradient(to right, #135058, #F1F2B5)"},{"c1":" #F1F2B5","c2":" -webkit-linear-gradient(to bottom, #135058, #F1F2B5)","c3":" linear-gradient(to bottom, #135058, #F1F2B5)"},{"c1":" #D1913C","c2":" -webkit-linear-gradient(to bottom, #FFD194, #D1913C)","c3":" linear-gradient(to bottom, #FFD194, #D1913C)"},{"c1":" #8e9eab","c2":" -webkit-linear-gradient(to bottom, #eef2f3, #8e9eab)","c3":" linear-gradient(to bottom, #eef2f3, #8e9eab)"},{"c1":" #00bf8f","c2":" -webkit-linear-gradient(to bottom, #001510, #00bf8f)","c3":" linear-gradient(to bottom, #001510, #00bf8f)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to bottom, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to bottom, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to left, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to left, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FEAC5E","c2":" -webkit-linear-gradient(to top, #4BC0C8, #C779D0, #FEAC5E)","c3":" linear-gradient(to top, #4BC0C8, #C779D0, #FEAC5E)"},{"c1":" #FFA17F","c2":" -webkit-linear-gradient(to top, #00223E, #FFA17F)","c3":" linear-gradient(to top, #00223E, #FFA17F)"},{"c1":" #1e130c","c2":" -webkit-linear-gradient(to top, #9a8478, #1e130c)","c3":" linear-gradient(to top, #9a8478, #1e130c)"},{"c1":" #abbaab","c2":" -webkit-linear-gradient(to top, #ffffff, #abbaab)","c3":" linear-gradient(to top, #ffffff, #abbaab)"},{"c1":" #abbaab","c2":" -webkit-linear-gradient(to bottom, #ffffff, #abbaab)","c3":" linear-gradient(to bottom, #ffffff, #abbaab)"},{"c1":" #556270","c2":" -webkit-linear-gradient(to bottom, #FF6B6B, #556270)","c3":" linear-gradient(to bottom, #FF6B6B, #556270)"},{"c1":" #FBD3E9","c2":" -webkit-linear-gradient(to bottom, #BB377D, #FBD3E9)","c3":" linear-gradient(to bottom, #BB377D, #FBD3E9)"},{"c1":" #FBD3E9","c2":" -webkit-linear-gradient(to top, #BB377D, #FBD3E9)","c3":" linear-gradient(to top, #BB377D, #FBD3E9)"},{"c1":" #F0C27B","c2":" -webkit-linear-gradient(to right, #4B1248, #F0C27B)","c3":" linear-gradient(to right, #4B1248, #F0C27B)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to right, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to right, #FFAFBD, #C9FFBF)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to bottom, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to bottom, #FFAFBD, #C9FFBF)"},{"c1":" #C9FFBF","c2":" -webkit-linear-gradient(to left, #FFAFBD, #C9FFBF)","c3":" linear-gradient(to left, #FFAFBD, #C9FFBF)"},{"c1":" #D3959B","c2":" -webkit-linear-gradient(to left, #BFE6BA, #D3959B)","c3":" linear-gradient(to left, #BFE6BA, #D3959B)"},{"c1":" #E6DADA","c2":" -webkit-linear-gradient(to left, #274046, #E6DADA)","c3":" linear-gradient(to left, #274046, #E6DADA)"},{"c1":" #E6DADA","c2":" -webkit-linear-gradient(to top, #274046, #E6DADA)","c3":" linear-gradient(to top, #274046, #E6DADA)"},{"c1":" #ddd6f3","c2":" -webkit-linear-gradient(to top, #faaca8, #ddd6f3)","c3":" linear-gradient(to top, #faaca8, #ddd6f3)"},{"c1":" #DE6262","c2":" -webkit-linear-gradient(to top, #FFB88C, #DE6262)","c3":" linear-gradient(to top, #FFB88C, #DE6262)"},{"c1":" #FFEEEE","c2":" -webkit-linear-gradient(to top, #DDEFBB, #FFEEEE)","c3":" linear-gradient(to top, #DDEFBB, #FFEEEE)"},{"c1":" #d53369","c2":" -webkit-linear-gradient(to top, #cbad6d, #d53369)","c3":" linear-gradient(to top, #cbad6d, #d53369)"},{"c1":" #FC354C","c2":" -webkit-linear-gradient(to top, #0ABFBC, #FC354C)","c3":" linear-gradient(to top, #0ABFBC, #FC354C)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to bottom, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to bottom, #D6A4A4, #DAE2F8)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to left, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to left, #D6A4A4, #DAE2F8)"},{"c1":" #DAE2F8","c2":" -webkit-linear-gradient(to top, #D6A4A4, #DAE2F8)","c3":" linear-gradient(to top, #D6A4A4, #DAE2F8)"},{"c1":" #283048","c2":" -webkit-linear-gradient(to top, #859398, #283048)","c3":" linear-gradient(to top, #859398, #283048)"},{"c1":" #3D7EAA","c2":" -webkit-linear-gradient(to top, #FFE47A, #3D7EAA)","c3":" linear-gradient(to top, #FFE47A, #3D7EAA)"},{"c1":" #232526","c2":" -webkit-linear-gradient(to top, #414345, #232526)","c3":" linear-gradient(to top, #414345, #232526)"},{"c1":" #757F9A","c2":" -webkit-linear-gradient(to top, #D7DDE8, #757F9A)","c3":" linear-gradient(to top, #D7DDE8, #757F9A)"},{"c1":" #2BC0E4","c2":" -webkit-linear-gradient(to left, #EAECC6, #2BC0E4)","c3":" linear-gradient(to left, #EAECC6, #2BC0E4)"},{"c1":" #403B4A","c2":" -webkit-linear-gradient(to left, #E7E9BB, #403B4A)","c3":" linear-gradient(to left, #E7E9BB, #403B4A)"},{"c1":" #1D2B64","c2":" -webkit-linear-gradient(to left, #F8CDDA, #1D2B64)","c3":" linear-gradient(to left, #F8CDDA, #1D2B64)"}]}]]></content>
  </entry>
  <entry>
    <title>链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[<div class="flink"><div class="flink-name">友人帐</div><div class="flink-desc">今夕复何夕，共此灯烛光！</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://wu1015.github.io" title="wu1015" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://shp.qpic.cn/collector/1015650207/25a0d289-cf69-481c-99c1-74a855390f3b/0" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="wu1015" />
              </div>
              <div class="flink-item-name">wu1015</div> 
              <div class="flink-item-desc" title="満 身 創 痍">満 身 創 痍</div>
            </a>
          </div></div></div>
<hr>
<div class="flink"><div class="flink-name">好玩的网站</div><div class="flink-desc">好玩!</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://pranx.com/" title="摸鱼_模拟电脑不一样的界面" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="摸鱼_模拟电脑不一样的界面" />
              </div>
              <div class="flink-item-name">摸鱼_模拟电脑不一样的界面</div> 
              <div class="flink-item-desc" title="让别人看不明白你在干什么">让别人看不明白你在干什么</div>
            </a>
          </div></div></div>
<hr>
<div class="flink"><div class="flink-name">工具箱</div><div class="flink-desc">资源中心</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://acwing.com" title="acwing" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="acwing" />
              </div>
              <div class="flink-item-name">acwing</div> 
              <div class="flink-item-desc" title="多人在线oj平台">多人在线oj平台</div>
            </a>
          </div></div></div>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/m_top_img.json</url>
    <content><![CDATA[{"links":["https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048909.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048008.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048689.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048604.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048474.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122051488.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048459.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048547.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048345.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048475.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048358.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048873.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048777.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037589.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048250.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037903.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048341.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122037114.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038093.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038853.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038441.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038310.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038374.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038411.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038136.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038654.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038080.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038893.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038993.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038867.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038178.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038822.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038383.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038746.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038628.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038099.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038360.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038888.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038468.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038617.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038840.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038284.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038758.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038975.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038771.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038895.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039198.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039674.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039857.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039874.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039353.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039939.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039879.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039467.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039402.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039621.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039546.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039048.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039503.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039315.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039419.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039509.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039086.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039173.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039764.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039549.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039415.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039939.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039258.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039629.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039723.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039555.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039273.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039811.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039673.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039768.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039921.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039122.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039227.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039738.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039775.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039615.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039686.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040621.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040447.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040120.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040406.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040341.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040041.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040980.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040733.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040885.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040978.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040131.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040761.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040840.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040715.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040853.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040337.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040229.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040829.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040741.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040734.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040747.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040366.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040878.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040773.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040867.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040878.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040779.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040331.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040275.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040750.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040409.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040969.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040890.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040762.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040696.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040518.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040908.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040664.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040808.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041435.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041215.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041706.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041669.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041731.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042746.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042859.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042088.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042013.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042900.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042832.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042481.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042735.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042516.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042825.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042974.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042723.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042919.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042847.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042728.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042894.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042566.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042365.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042269.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043076.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043296.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043210.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043364.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043110.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043230.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043875.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043843.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043914.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043624.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043901.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043970.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043722.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043308.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043038.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043167.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043809.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043888.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043506.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043394.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043507.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043291.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043398.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043244.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043684.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043053.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043954.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043324.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043452.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043303.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043567.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043203.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043716.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045072.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045499.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045113.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045001.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045017.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045472.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045368.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045371.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045201.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045812.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045882.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045117.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045462.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045638.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045575.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045280.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045487.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046545.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046636.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046704.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046656.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046568.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046403.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046027.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046056.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046634.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046112.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046748.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046783.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046306.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046531.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046845.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046490.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046679.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046322.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046313.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046019.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046691.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046223.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046404.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046164.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046061.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046346.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046097.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046216.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046498.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046426.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046580.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046439.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046713.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046561.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047866.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047834.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047918.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047532.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047589.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047512.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047266.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047335.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047198.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047870.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047155.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047367.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047270.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047323.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047263.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047616.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047572.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047104.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047176.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047157.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047613.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047647.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047197.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047133.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047923.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047733.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047190.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047544.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047486.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047059.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048749.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048448.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048278.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048155.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048273.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048625.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048693.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048804.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048653.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048316.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048736.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048539.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048642.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048921.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048808.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048443.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048376.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048925.webp"]}]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/json/top_img.json</url>
    <content><![CDATA[{"links":["https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048909.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048289.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048604.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048474.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122051488.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048459.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048547.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048345.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048475.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048358.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048873.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048250.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038228.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038617.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122038771.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039509.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039086.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039122.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039227.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039651.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039738.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039775.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039615.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122039686.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040447.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040399.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040980.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040131.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040761.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040337.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040052.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122040779.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041435.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122041215.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042013.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042900.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042832.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042481.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122042825.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043230.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043875.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043943.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043774.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043624.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043308.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043038.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043167.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043809.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043506.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043394.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043507.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043291.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043396.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043398.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043797.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043244.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043684.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043053.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043954.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043324.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043452.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043303.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043868.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043567.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043203.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122043716.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045072.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045499.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045113.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045001.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045554.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045472.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045368.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045371.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045201.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045812.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045882.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045117.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045276.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045462.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045638.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045575.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045280.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045487.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122045314.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046545.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046636.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046704.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046656.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046568.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046403.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046027.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046056.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046634.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046112.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046748.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046690.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046306.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046024.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046531.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046845.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046490.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046440.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046679.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046322.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046313.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046416.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046911.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046019.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046691.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046404.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046497.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046164.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046061.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046346.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046946.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046097.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046498.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046426.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046580.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046439.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122046713.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047866.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047772.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047918.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047767.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047532.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047266.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047571.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047323.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047263.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047205.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047190.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047820.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047544.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122047486.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048448.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048342.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048278.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048454.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048693.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048653.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048011.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048390.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048316.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048924.webp","https://yee-1312555989.cos.ap-guangzhou.myqcloud.com//blog202404122048925.webp"]}]]></content>
  </entry>
</search>
